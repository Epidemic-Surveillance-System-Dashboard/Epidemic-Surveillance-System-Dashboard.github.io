{"version":3,"sources":["NavigationMenu/NavigationMenu.js","Visualizer/Visualizer.js","Database/database.js","Visualizer/VisualizerManager.js","LocationSelector/LocationSelector.js","MetricSelector/MetricSelector.js","Services/User.js","Graph/SaveGraph.js","RangeSelector/RangeSelector.js","Graph/CreateGraph.js","Dashboard/Dashboard.js","Login/Login.js","SampleHome/SampleHome.js","Users/CreateModifyDeleteUser.js","Account/Account.js","Users/Users.js","Sync/Sync.js","Analysis/LocationWrapper.js","Analysis/Analysis.js","DataQuality/DataQuality.js","App.js","serviceWorker.js","index.js"],"names":["App","rightButtonRenderer","_this","props","rightButtonAction","rightButtonType","react_default","a","createElement","es_button","type","onClick","className","icon","row","col","span","this","openDrawer_f","title","Component","strokeColors","averageColor","colorCounter","monthNames","Visualizer","getNextColor","color","length","resetColor","startDate","mockMetric","name","location","state","lga","ward","facility","data","Month","Year","Value","Math","floor","random","mockSet","endDate","Metric","mockGroup","legendTitles","createBarSeriesData","rawData","map","element","y","x","barSeries","es","legend","orientation","items","createBarSeriesAverage","sum","count","i","average","lineData","strokeDasharray","renderGraph","graph","MultipleBar","Histogram","Line","defaults","width","height","xDistance","barChartLeftMargin","maxLength","j","round","result","group","push","key","console","log","createMultipleBarSeries","yType","margin","left","barSeriesData","averageLine","createHistogramData","elements","series","dataForYear","hasOwnProperty","forEach","el","Date","Time","Number","parseInt","sort","b","currentYear","blankData","blankDataSeries","colorType","getUTCFullYear","getUTCMonth","concat","marks","legendElement","createLineSeriesWithLegend","empty","description","xType","_this2","show","Object","keys","undefined","db","Dexie","version","stores","Facility","Ward","LGA","State","Groups","Sets","Metrics","Data","User","LocalUser","Dashboard","DashboardData","VisualizerManager","ready","checkInputs","valid","validInputs","LocationId","value","LocationType","includes","DataId","DataType","StartDate","prototype","toString","call","EndDate","isSimpleData","formatDate","date","slice","getUTCDate","getSimpleData","where","between","toArray","arr","setState","graphType","getComplexData","RawData","MetricValue","charAt","SetValue","Title","queryComplexData","formatDateForRemoteQuery","period","url","rootURL","DataPresentation","fetch","then","stream","json","parseFloat","Total","titleIndex","d","setUTCMonth","replace","splice","ParentHandler","setStateFromProps","callback","LocationName","Location","Name","Id","Type","TotalOrDistribution","Dates","run","prevProps","spin","src_Visualizer_Visualizer","hierarchyLevels","Option","es_select","style","LocationSelector","findAllLocations","Promise","resolve","National","StateList","LGAList","WardList","FacilityList","enabledDisabledLists","selectedLocation","componentDidUpdate","_callee","oldProps","regenerator_default","wrap","_context","prev","next","disabled","enableDisableLists","stop","componentWillMount","setLocations","findIndexForLocationType","locationType","findIndex","_callee2","maxScope","initialLocation","_context2","initLocationIndex","locations","getLocationHierarchyForInitLocation","setLocationState","_callee3","currentIndex","currentLocationId","completionCallback","_context3","abrupt","findLocationByQuery","sent","parentId","objectSpread","notifyParent","updateList","handleChange","level","_this$setState","_this$setState2","currentLevelIndex","currentLevel","parseLocation","defineProperty","_loop","statePropertyName","_callee4","levelIndex","callBack","list","listName","queryProperty","aboveLevel","aboveLevelId","optionsList","_context4","parentHandler","queryParams","valueArr","split","placeholder","optionFilterProp","defaultValue","showSearch","onChange","filterOption","input","option","children","toLowerCase","indexOf","hidden","showLocation","MetricSelector","findAll","Group","Set","GroupList","SetList","MetricList","selectedData","componentDidMount","setInitialDataState","initialData","GroupValue","parseData","createLocationObject","typeID","totalOrDistribution","nextType","totalString","distributionString","aboveName","findByQuery","MetricSelector_Option","showLabel","userService","login","email","password","reject","loginApiRoute","process","method","headers","Content-Type","body","JSON","stringify","Email","Password","userJsonObj","success","clear","add","user","catch","e","logout","SaveGraph","saveGraph","toCollection","last","object","newGraph","Locations","put","message","MonthPicker","RangeSelector","plusOne","num","dateToString","getFullYear","getMonth","getDay","dateString","_this3","_this4","moment","startDateOnChange","endDateOnChage","CreateGraph","updateRawData","updateLocation","updateData","updateDates","dates","loc","obj","getTitle","gutter","xs","offset","sm","md","lg","card","size","src_LocationSelector_LocationSelector","divider","src_MetricSelector_MetricSelector","src_RangeSelector_RangeSelector","Visualizer_VisualizerManager","Graph_SaveGraph","fullSize","reportCard","showGraphs","graphOpenCloseState","graphDataLoaded","related","relatedGraphs","fullSizeOrListChanged","target","reportCardOrGraphsChanged","window","dispatchEvent","Event","toggleGraph","copy","newVal","open","anyOpen","text","toggleAllGraphs","openState","createCollapseExpandButton","getFirstLocation","loadGraphsFromDB","visibility","showInFilter","graphData","findAllGraphs","item","findRelatedGraphs","allData","relatedFound","metricData","toggleViewRelated","currentView","processFoundData","createViewRelatedButton","createDeleteButton","popconfirm","placement","okText","cancelText","onConfirm","deleteGraph","processedRelatedData","temp","parse","delete","renderRelated","es_list","itemLayout","dataSource","renderItem","item1","Item","Meta","assign","itemHasCompare","renderGraphs","actions","toUTCString","substring","GraphType","showHideCreateGraphUI","Graph_CreateGraph","Login","handleInput","property","preTab","minWidth","textAlign","UserService","updateDrawer","history","addonBefore","withRouter","userObj","src_Login_Login","Fragment","FirstName","userFields","CreateModifyDeleteUser","inputLabelTab","mode","userChanged","locationDisabled","loggedInUser","isUser","confirmDelete","passedUser","refreshUsers","back","error","adminFeatures","showTable_f","inputChanged","stateName","userInfo","userInformationChanged","basicFeatures","array","featureName","featureNameKey","allUserTypeOptions","UserType","handleUserTypeSelect","modifyControls","enableEditing","cancelEditing","save","computedState","u","userType","changed","successMessage","errorMessage","successHandler","userObject","Error","newProps","userState","Account","Users_CreateModifyDeleteUser","populateUsers","LastName","permissionLevel","toUpperCase","lastNameCompare","localeCompare","dataLoaded","showTable","selectedUser","columns","dataIndex","defaultSortOrder","sorter","filters","onFilter","record","filterMultiple","render","editUser","id","newUser","find","showHideTableClass","showHideViewClass","addUser","tableHidden","colStyle","class","table","Sync","showProgress","DataDownloads","startDownload","downloads","dataName","bulkAdd","users","all","dl","dl_i","Sync_DataProgress","downloadDashboard","_dashboard","dashboard","DashboardJson","dashboards","params","UserId","dashboardData","info","xl","timeline","DataProgress","pending","failed","Icon","pendingIcon","failedIcon","completeIcon","Message","pendingMessage","failedMessage","completeMessage","get","dot","LocationWrapper","componnentDidMount","saveLocation","cancelLocation","Analysis","initLoading","loading","locationData","addingLocation","dataForSingleLocation","dataForAllLocations","showGraph","generateGraph","createMetricGraph","createSetGraph","context","forEachPromise","getDataPromiseByLocation","getMetricsPromise","metrics","getLocationPromise","fn","reduce","promise","context2","getDataPromise","setId","equalsIgnoreCase","metric","point","MetricData","Compare","tempData","warning","addLocation","deleteLocation","editLocation","_this$state","block","pagination","page","pageSize","values","marginLeft","href","Analysis_LocationWrapper","MetricsReportedInLastYear","DataQuality","setLocation","getQualityOfData","Score","toFixed","es_alert","banner","closable","Header","Footer","Content","pathNamesAndTitles","/","/account","/dashboard","/analysis","/users","/sync","/health","pathName","pathname","drawerOpen","openDrawer","closerDrawer","BrowserRouter","layout","drawer","onClose","visible","menu","Link","to","padding","NavigationMenu_NavigationMenu","Route","exact","path","SampleHome_SampleHome","component","rel","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","src_App_0","document","getElementById","URL","origin","addEventListener","response","contentType","status","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.64731456.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Button, Icon } from 'antd';\n\nimport './NavigationMenu.css';\n\n/**\n * Navigation Menu Component\n * \n * Accepts up to three props:\n *  - title\n *  - rightButtonType\n *  - rightButtonAction\n */\n\nclass App extends Component {\n\n    rightButtonRenderer = () =>{\n        if (this.props.rightButtonAction != null && this.props.rightButtonType != null){\n            return (\n                <Button type=\"default\" onClick={this.props.rightButtonAction} className=\"ghost-button\">\n                    <Icon\n                        className=\"trigger\"\n                        type={this.props.rightButtonType ? this.props.rightButtonType : \"menu-fold\"}\n                        />\n                </Button>\n            )\n        }else{\n            return null\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"navMenu\">\n            <Row>\n                {/* This button opens and closes the drawer */}\n                <Col span= {4}>\n                    <Button type=\"default\" onClick={this.props.openDrawer_f} className=\"ghost-button\">\n                        <Icon\n                            className=\"trigger\"\n                            type='menu-unfold'\n                            />\n                    </Button>\n                </Col>\n                <Col span = {16}>\n                    <h2 className = \"nowrap center\">\n                        {this.props.title}\n                    </h2>\n                </Col>\n                <Col span= {4}>\n                    {this.rightButtonRenderer()}\n                </Col>\n\n\n            </Row>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\n//react-vis for graphs\nimport '../../node_modules/react-vis/dist/style.css';\nimport {Empty} from 'antd'\nimport { FlexibleWidthXYPlot, XAxis, YAxis, HorizontalGridLines, LineSeries, LineMarkSeries, DiscreteColorLegend, VerticalGridLines, HorizontalBarSeries} from 'react-vis';\n\nconst strokeColors = [\n    \"#2980b9\",\n    \"#27ae60\",\n    \"#ef8717\",\n    \"#7f8c8d\"\n]\n\nconst averageColor = \"#e74c3c\"\n\nlet colorCounter = 0\n\nconst monthNames = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\",\n\"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"\n]\n\nconst averageCharacterWidth = 5.5\nconst constantCharacterPadding = 20\n\nclass Visualizer extends Component {\n\n    getNextColor = () => {\n        let color = strokeColors[colorCounter]\n        colorCounter = (colorCounter + 1) % strokeColors.length\n        return color\n    }\n\n    resetColor = () => {\n        colorCounter = 0\n    }\n\n    startDate = null\n\n    mockMetric = {\n        name: \"Male Vaccinations Ages 0-19\",\n        location: {\n            state: \"Ex\",\n            lga: \"Ex\",\n            ward: \"Ex\",\n            facility: \"Ex\",\n        },\n        data: [\n            {\n                Month: 'JAN',\n                Year: 2017,\n                Value: Math.floor(Math.random() * 10)\n            },\n            { Month: 'FEB', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'MAR', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'APR', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'MAY', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'JUN', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'JUL', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'AUG', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'SEP', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'OCT', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'NOV', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'DEC', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'JAN', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'FEB', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'MAR', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'APR', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'MAY', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'JUN', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'JUL', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'AUG', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'SEP', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'OCT', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'NOV', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'DEC', Year: 2018, Value: Math.floor(Math.random() * 10) },\n        ]\n    }\n\n    mockSet = {\n        name: \"Male Vaccinations\",\n        startDate: \"\",\n        endDate: \"\",\n        location: {\n            state: \"Ex\",\n            lga: \"Ex\",\n            ward: \"Ex\",\n            facility: \"Ex\",\n        },\n        data: [\n            {\n                Value: Math.floor(Math.random() * 10),\n                Metric: \"Male Vaccinations 0-10\"\n            },\n            { Value: Math.floor(Math.random() * 10), Metric: \"Male Vaccinations 10-40\" },\n            { Value: Math.floor(Math.random() * 10), Metric: \"Male Vaccinations 40-80\" },\n            { Value: Math.floor(Math.random() * 10), Metric: \"Male Vaccinations 80+\" },\n        ]\n    }\n\n    mockGroup = {\n        data:[\n            [\n                { Value: 1, Metric: \"Metric1\" },\n                { Value: 2, Metric: \"Metric2\" },\n                { Value: 3, Metric: \"Metric3\" },\n                { Value: 4, Metric: \"Metric4\" },\n            ],\n            [\n                { Value: 2, Metric: \"Metric1\" },\n                { Value: 3, Metric: \"Metric2\" },\n                { Value: 4, Metric: \"Metric3\" },\n                { Value: 5, Metric: \"Metric4\" },\n            ],\n            [\n                { Value: 3, Metric: \"Metric1\" },\n                { Value: 4, Metric: \"Metric2\" },\n                { Value: 5, Metric: \"Metric3\" },\n                { Value: 6, Metric: \"Metric4\" },\n            ],\n        ],\n        legendTitles:[\n            \"Location 1\",\n            \"Location 2\",\n            \"Location 3\"\n        ]\n    }\n\n    createMultipleBarSeries() {\n        let data = this.props.data.data || this.mockGroup.data \n\n        //Update Default Padding\n        let maxLength = 0\n        for (let i = 0; i < data.length; i++) {\n            for (let j = 0; j < data.length; j++) {\n                if (data[i][j].Metric.length > maxLength) maxLength = data[i][j].Metric.length\n            }\n        }\n        this.defaults.barChartLeftMargin = Math.round(maxLength * averageCharacterWidth + constantCharacterPadding, 0)\n\n        let result = {\n            barSeries: [],\n            legend: null,\n            lineData: null\n        }\n\n        for (let i = 0; i < data.length; i++){\n            //For each Location:\n            \n            //Create the bars in each of the same metric\n            let group = []\n            for (let j = 0; j < data[i].length; j++){\n                group.push({\n                    y: data[0][j].Metric, x: data[i][j].Value\n                })\n            }\n\n            result.barSeries.push(\n                <HorizontalBarSeries key={i} data={group} color={this.getNextColor()} />\n            )\n\n        }\n\n        //Push all the legend names in\n        this.resetColor()\n        console.log(this.props.data.legendTitles);\n        var legend = [];//this.props.data.legendTitles;\n        for (let i = 0; i < this.props.data.legendTitles.length; i++){\n            legend.push({ title: this.props.data.legendTitles[i], color: this.getNextColor() })\n        }\n\n        result.legend = <DiscreteColorLegend orientation=\"horizontal\" items={legend} />\n        return result\n\n    }\n\n    MultipleBar() {\n        let data = this.createMultipleBarSeries()\n\n        return (\n            <div className=\"center\">\n                <FlexibleWidthXYPlot yType=\"ordinal\" height={this.defaults.height} margin={{ left: this.defaults.barChartLeftMargin }}>\n                    <HorizontalGridLines />\n                    <XAxis />\n                    <YAxis />\n                    {data.barSeries}\n                </FlexibleWidthXYPlot>\n                {data.legend}\n            </div>\n\n        )\n    }\n\n    createHistogramData(){\n        let rawData = this.props.data\n        console.log(rawData)\n        if (rawData.length === 0){\n            return null\n        }\n\n        //Update Default Padding\n        let maxLength = 0\n        for (let i = 0; i < rawData.data.length; i++){\n            if ((\"\"+rawData.data[i].Metric).length > maxLength) maxLength = (\"\"+rawData.data[i].Metric).length\n        }\n        this.defaults.barChartLeftMargin = Math.round(maxLength * averageCharacterWidth + constantCharacterPadding,0)\n        let barSeriesData = this.createBarSeriesData(rawData)\n        return {\n            barSeries: barSeriesData.barSeries,\n            legend: barSeriesData.legend,\n            averageLine: this.createBarSeriesAverage(rawData)\n        }\n    }\n\n    createBarSeriesData = (rawData) => {\n        let color = this.getNextColor()\n        let map = rawData.data.map(element => {\n            return { y: element.Metric, x: element.Value }\n        })\n\n        return ({\n            barSeries: <HorizontalBarSeries data={map} color={color} />,\n            legend: <DiscreteColorLegend orientation=\"horizontal\" items={[{ title: rawData.name, color: color }, { title: \"Average\", color: averageColor }]} />\n        })\n    }\n\n    createBarSeriesAverage = (rawData) => {\n        let sum = 0\n        let count = 0\n        for (let i = 0; i < rawData.data.length; i++) {\n            sum += rawData.data[i].Value\n            count++\n        }\n        let average = count > 0 ? sum / count : 0\n        let lineData = rawData.data.map(element => {\n            return { y: element.Metric, x: average }\n        })\n        return (<LineSeries data={lineData} strokeDasharray={[7, 5]} color={averageColor} />)\n    }\n\n    Histogram() {\n\n        // let data = this.createBarSeriesData(this.mockSet.data)\n\n        let data = this.createHistogramData()\n        console.log(data)\n        if (data === null){\n            return(\n                <div>\n                    empty\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"center\">\n                <FlexibleWidthXYPlot yType=\"ordinal\" height={this.defaults.height} margin={{ left: this.defaults.barChartLeftMargin }}>\n                    <HorizontalGridLines />\n                    <VerticalGridLines />\n                    <XAxis />\n                    <YAxis />\n                    {data.barSeries}\n                    {data.averageLine}\n                </FlexibleWidthXYPlot>\n                {data.legend}\n            </div>\n        )\n    }\n\n    /**\n     * Return an object containing an array of LineSeries (max 12 months)\n     * and one legend \n     */\n    createLineSeriesWithLegend() {\n\n        let elements = {\n            legend: null,\n            series: []\n        }\n\n        let dataForYear = []\n        let legend = []\n        let sum = 0\n        let count = 0\n\n        let data = this.props.data.data || this.mockMetric.data\n        \n        if (data.length === 0) return null\n        if (data[0].hasOwnProperty(\"Date\") === false){\n            data.forEach(el =>{\n                el.Date = new Date(el.Time)\n                el.Value = Number.parseInt(el.Value)\n            })\n\n            data.sort((a,b)=>{\n                return a.Date - b.Date\n            })\n        }\n\n        let currentYear = null \n\n        //Create a transparent line series with the correct month order\n        //to initialize the x-axis. This is necessary because sometimes\n        // the data has no values for consecutive months.\n\n        let blankData = []\n        for (let i = 0; i < monthNames.length; i++){\n            blankData.push({\n                x: monthNames[i],\n                y: 0\n            })\n        }\n        let blankDataSeries =  <LineMarkSeries key={-1} data={blankData} color=\"transparent\" colorType=\"literal\"/>\n        elements.series.push(blankDataSeries)\n\n        //Create a LineMarkSeries for each year.\n\n        for (let i = 0; i < data.length; i++) {\n\n            if (currentYear === null){\n                currentYear = data[i].Date.getUTCFullYear()\n            }\n\n            //Create data for the year\n            dataForYear.push({\n                x: monthNames[data[i].Date.getUTCMonth()],\n                y: data[i].Value\n            })\n\n            //Add to Average Calculation\n            sum += data[i].Value\n            count++\n\n            //With 12 data points OR at end of data set, create a LineMarkSeries\n            if (i === (data.length - 1) || data[(i + 1)].Date.getUTCFullYear() !== currentYear) {\n                let color = this.getNextColor()\n\n                elements.series.push(\n                    <LineMarkSeries key={i} data={dataForYear} color={color} colorType=\"literal\"/>\n                )\n\n                let title = `${currentYear}`\n\n                //Add legend entry for LineMarkSeries\n                legend.push({\n                    title: title,\n                    color: color\n                })\n\n                //Reset\n                dataForYear = []\n                if (i !== (data.length -1)) currentYear = data[(i + 1)].Date.getUTCFullYear()\n            }\n        }\n\n        //Add Average line\n        let marks = []\n        let average = count > 0 ? sum / count : 0\n        for (let i = 0; i < monthNames.length; i++){\n            marks.push({\n                x: monthNames[i],\n                y: average\n            })\n        }\n        \n        //Add legend entry for Average\n        legend.push({\n            title: \"Average\",\n            color: averageColor\n        })\n\n        elements.series.push(<LineSeries key={elements.length + 1} data={marks} strokeDasharray={[7, 5]} color={averageColor} colorType=\"literal\" />)\n\n        //Create legend\n        let legendElement = <DiscreteColorLegend orientation=\"horizontal\" items={legend}/>\n        elements.legend = legendElement\n\n        return elements\n\n    }\n\n    Line() {\n\n        let elements = this.createLineSeriesWithLegend()\n\n        if (elements === null){\n            return(\n                <div className=\"graphPlaceholder\">\n                    <Empty\n                        description=\"Hmm.. we can't find any data\"\n                    />\n                </div>\n            )\n        }else{\n            return (\n                <div className=\"center\">\n                    <FlexibleWidthXYPlot xType=\"ordinal\" height={this.defaults.height} >\n                        <HorizontalGridLines />\n                        <VerticalGridLines />\n                        <XAxis />\n                        <YAxis />\n                        {elements.series}\n                    </FlexibleWidthXYPlot>\n                    {elements.legend}\n                </div>\n            )\n        }\n\n\n    }\n\n    renderGraph = () =>{\n\n        let graph = null\n        switch (this.props.type) {\n            case \"Group\":\n                graph = this.MultipleBar()\n                break\n            case \"Set\":\n                graph = this.Histogram()\n                break\n            case \"Metric\":\n                graph = this.Line()\n                break\n            default:\n                graph = null\n                break\n        }\n        return graph\n    }\n\n    defaults = {\n        width: 350,\n        height: 350,\n        xDistance: 100,\n        barChartLeftMargin: 175\n    }\n\n    render() {\n\n        \n        if (this.props.show === false) return null\n\n        colorCounter = 0\n        //Override Defaults where appropriate\n        Object.keys(this.defaults).forEach((key) => {\n            if (this.props[key] !== undefined) this.defaults[key] = this.props[key]\n        });\n\n\n        let graph = this.renderGraph()\n        if (graph !== null) {\n            return <div>{graph} <span></span></div>\n\n        } else {\n            return (\n                <div>\n                    Sorry, something went wrong.\n                </div>\n            )\n        }\n\n    }\n}\n\nexport default Visualizer;\n","import Dexie from 'dexie'\n\nconst db = new Dexie('ESSD_DB')\n\ndb.version(1).stores({\n    //Locations\n    Facility:\"Id,parentId\",\n    Ward:\"Id,parentId\",\n    LGA:\"Id,parentId\",\n    State:\"Id\",\n\n    //Data\n    Groups:\"Id\",\n    Sets:\"Id,parentId\",\n    Metrics:\"Id,parentId\",\n    Data:\"Id,Time,MetricId,FacilityId,[FacilityId+MetricId+Time]\", //Index everything here\n\n    //Users (all of ESSD)\n    User:\"Id\",   // only store non-essential information\n\n    //User (local)\n    LocalUser: \"Id\",\n    Dashboard:\"Id\",\n    DashboardData: \"Id\"\n\n})\n\nexport default db;","import React, { Component } from 'react';\n\n//react-vis for graphs\nimport '../../node_modules/react-vis/dist/style.css';\n\nimport {Empty, Spin} from 'antd'\n\nimport Visualizer from './Visualizer'\n\nimport db from '../Database/database'\n\n/**\n * Types of Graphs Generated:\n * \n * Data: Metric\n * Location: Any (Note: Location is always ANY because we're not going to show breakdown by location; too many locations)\n * Time Period: Any\n *      -> Line Graph\n *      -> X-Axis is monthly if startDate.year == endDate.year; otherwise yearly\n * \n * Data: Set or Group\n * Location: Any\n * Time Period: Any\n * Period: Any\n * Type: Distribution\n *      -> Show Horizontal Bar Graph of the set or the group\n * \n * Data: Set or Group\n * Location: Any\n * Time Period: Any\n * Period: Any\n * Type: Total\n *      -> Show Line Graph of the Set or Group\n * \n */\n\n/**\n * PROPS:\n * @param LocationId: String\n * @param LocationType: String \"National\" | \"State\" | \"LGA\" | \"Ward\" | \"Facility\"\n * @param DataId: String\n * @param DataType: String \"Metric\" | \"Set\" | \"Group\"\n * @param StartDate: Date\n * @param EndDate: Date (if applicable)\n */\nclass VisualizerManager extends Component {\n\n    state = {\n        ready: false,\n        data: null,\n    }\n\n    checkInputs = () => {\n\n        \n        console.log(this.state)\n        let valid = true\n        let validInputs = {\n            \"LocationId\": value => {return value !== undefined && value !== null},\n            \"LocationType\": value => {return [\"National\", \"State\", \"LGA\", \"Ward\", \"Facility\"].includes(value)},\n            \"DataId\": value => {return value !== undefined && value !== null},\n            \"DataType\": value => {return [\"Metric\", \"Set\", \"Group\"].includes(value)},\n            \"StartDate\": value => {return Object.prototype.toString.call(value) === '[object Date]'},\n            \"EndDate\": value => {return Object.prototype.toString.call(value) === '[object Date]'}, \n        }\n\n        for (var key in validInputs){\n            if (validInputs[key](this.state[key]) === false){\n                console.log(key)\n                console.log(this.state[key])\n                valid = false\n                break\n            }\n        }\n        console.log(valid)\n\n        return valid\n    }\n\n    isSimpleData = () =>{\n        //Simple data is only Facility, Metric \n        //All other data requires aggregation and therefore will be queried from the database.\n        if (this.state.LocationType !== \"Facility\") return false\n        if (this.state.DataType !== \"Metric\") return false\n        return true\n    }\n\n    /**\n     * @param date Date object\n     */\n    formatDate = (date) =>{\n        //Format into YYYY-MM-DDT:00:00:00.000Z\n        let dateString = `${date.getUTCFullYear()}-${(\"0\" + (date.getUTCMonth()+1)).slice(-2)}-${(\"0\" + date.getUTCDate()).slice(-2)}T00:00:00.000Z`\n        return dateString\n    }\n\n    /**\n     * Preconditions:\n     * locationType === \"Facility\"\n     * dataType === \"Metric\"\n     */\n    getSimpleData = () =>{\n        console.log(\"**************\");\n        console.log(this.state.Data);\n        console.log(\"**************\");\n        db.Data.where(\n            [\"FacilityId\", \"MetricId\", 'Time']\n        ).between(\n            [this.state.LocationId, this.state.DataId, this.formatDate(this.state.StartDate)],\n            [this.state.LocationId, this.state.DataId, this.formatDate(this.state.EndDate)],\n            true,\n            true\n        )\n        .toArray((arr) =>{\n            this.setState({\n                data: {\n                    data: arr\n                },\n                graphType :\"Metric\",\n                ready: true\n            })\n        })\n    }\n\n    /**\n     * 1. Try to find data from local store\n     * 2. If not possible, try to find data from internet\n     *     - If exists, cache\n     * 3. If not, some error message\n     */\n    getComplexData = () =>{\n        if (this.props.RawData){\n            let graphType = \"Metric\"\n            if (this.props.Data.MetricValue !== undefined && this.props.Data.MetricValue.charAt(0)!== \"-\") graphType = \"Metric\" \n            else if (this.props.Data.SetValue !== undefined) graphType = \"Set\"\n            else graphType = \"Group\"    \n            this.setState({\n                ready: true,\n                data:{\n                    data: this.props.RawData,\n                    name: this.props.Title\n                },\n                graphType: graphType\n            })\n        }else{\n            this.queryComplexData()\n        }\n    }\n\n    formatDateForRemoteQuery = (date) =>{\n        return `${date.getUTCFullYear()}-${(\"0\" + (date.getUTCMonth()+1)).slice(-2)}-${(\"0\" + date.getUTCDate()).slice(-2)}`\n    }\n\n    queryComplexData = () =>{\n    \n        //Build Query URL\n        let period = \"month\"\n        \n        if (this.state.StartDate.getUTCFullYear() !== this.state.EndDate.getUTCFullYear()) period = \"year\"\n        let rootURL = `https://essd-backend-dev.azurewebsites.net/api/data/query?`\n        let url = rootURL + \n                \"LocationId=\" + this.state.LocationId\n            +   \"&LocationType=\" + this.state.LocationType\n            +   \"&DataId=\" + this.state.DataId\n            +   \"&DataType=\" + this.state.DataType\n            +   \"&StartDate=\" + this.formatDateForRemoteQuery(this.state.StartDate)\n            +   \"&EndDate=\" + this.formatDateForRemoteQuery(this.state.EndDate)\n            +   \"&Period=\" + period\n            +   \"&Distribution=\" + this.state.DataPresentation\n\n        console.log(url)\n\n        //Data comes back as an array\n        fetch(url,{}).then(stream => stream.json().then(result =>{\n\n            if (period === \"year\"){\n\n                //TODO: Switch to vertical bar graph in the future\n                result.forEach(el =>{\n                    el.Value = Number.parseFloat(el.Total)\n                })\n\n                result.sort((a,b) =>{\n                    return a.Metric - b.Metric\n                })\n                \n                //If this spans multiple years, always display it as a bar chart\n                this.setState({\n                    ready: true,\n                    data: {\n                        data: result,\n                        name: this.state.Title\n                    },\n                    graphType: \"Set\",\n                })\n            }else{\n                //Period === month\n                let graphType = this.state.DataPresentation === \"distribution\" ? \"Set\" : \"Metric\"\n\n                let groupName = \"Metric\"\n                // if (result.length > 0) groupName = result[0].hasOwnProperty(\"MetricName\") ? \"MetricName\" : \"SetName\"\n\n                let titleIndex = undefined\n\n                for (let i = 0; i < result.length; i++){\n                    let d = new Date(this.state.StartDate)\n                    d.setUTCMonth(result[i].Month - 1)\n                    result[i].Date = d\n                    result[i].Value = Number.parseInt(result[i].Total)\n                    if (graphType === \"Set\"){\n                        if (result[i][groupName] === this.state.Title) titleIndex = i\n                        result[i].Metric = result[i][groupName].replace(`${this.state.Title}, `, \"\")\n                    }else{\n                        result[i].Metric = result[i][groupName]\n                    }\n                }\n\n                if (titleIndex !== undefined){\n                    result.splice(titleIndex,1)\n                }\n \n                this.setState({\n                    ready: true,\n                    graphType: graphType,\n                    data: {\n                        data: result,\n                        name: this.state.Title\n                    }\n                })\n\n            }\n\n            if (this.props.ParentHandler) this.props.ParentHandler(result)\n\n            //TODO: store data locally\n        }))\n    \n    }\n\n    componentDidUpdate(prevProps){\n        if (prevProps.Location !== this.props.Location || prevProps.Data !== this.props.Data || prevProps.Dates !== this.props.Dates){\n            this.setStateFromProps(this.run)\n        }\n    }\n\n    setStateFromProps = (callback) =>{\n        if (this.props.Title){\n            this.setState({\n                Title: this.props.Title,\n                LocationName: this.props.Location ? this.props.Location.Name : undefined,\n                LocationId: this.props.Location ? this.props.Location.Id : undefined,\n                LocationType: this.props.Location ? this.props.Location.Type : undefined,\n                DataId: this.props.Data ? this.props.Data.Id : undefined,\n                DataType: this.props.Data ? this.props.Data.Type : undefined,\n                DataPresentation: this.props.Data ? this.props.Data.TotalOrDistribution : undefined,\n                StartDate: this.props.Dates ? new Date(this.props.Dates.StartDate) : undefined,\n                EndDate: this.props.Dates ? new Date(this.props.Dates.EndDate) : undefined,\n            }, () =>{\n                if (callback) callback()\n            })\n        }else{\n            if (callback) callback()\n        }\n\n    }\n\n    run = () => {\n        if (this.checkInputs()){\n            if (this.isSimpleData()){\n                console.log('simple data')\n                this.getSimpleData()\n            }else{\n                console.log('complex data')\n                this.getComplexData()\n            }\n        }\n    }   \n\n    componentDidMount(){\n        this.setStateFromProps(this.run)\n    }\n\n    render() {\n        if (this.checkInputs()){\n            return (\n                <div>\n                    {\n                        this.state.ready === false && \n                        <div className=\"graphPlaceholder\">\n                            <Spin></Spin>\n                        </div>\n                        \n                    }\n                    {\n                        this.state.ready === true && \n                        <div>\n                            <Visualizer \n                                type = {this.state.graphType}\n                                show = {this.props.show}\n                                data = {this.state.data}\n                            />\n\n                        </div>\n\n                    }\n                </div>\n            )\n        }else{\n            return(\n                <div className=\"graphPlaceholder\">\n                    <Empty\n                        description=\"We can't display a graph with these inputs.\"\n                    />\n                </div>)\n        }\n    }\n}\n\nexport default VisualizerManager;\n","import React, { Component } from 'react';\n\nimport {Select} from 'antd'\n\nimport db from '../Database/database'\n\nconst hierarchyLevels = [\n    \"National\",\n    \"State\",\n    \"LGA\",\n    \"Ward\",\n    \"Facility\"\n]\n\nconst Option = Select.Option;\n\nconst style = {\n    width: \"100%\"\n}\n\n/**\n * Selects a loction in Nigeria\n * @param {parentHandler} - Function passed in by the parent that takes a LocationObject with props {Id, Name, Type} and updates the parent UI\n * @param {showLocation} - Boolean that shows or hides LocationSelector's built-in selected location text\n * @param {maxScope}: optional - {Id: \"188\", Level: \"State\"}\n * @param {initialLocation}\n */\nclass LocationSelector extends Component {\n\n    findAllLocations = (type) => {\n        return new Promise((resolve) =>{\n            //Cannot access type via db[type], so we have to do it manually\n            let callback = (data) => {\n                resolve (data) \n            }\n\n            switch(type){\n                case \"Facility\":\n                    db.Facility.toArray(callback)\n                break\n                case \"Ward\":\n                    db.Ward.toArray(callback)\n                break\n                case \"LGA\":\n                    db.LGA.toArray(callback)\n                break\n                case \"State\":\n                    db.State.toArray(callback)\n                break\n                default:\n                    //\n                break;\n            }\n        })\n    }\n\n    findLocationByQuery(type, queryParams){\n        return new Promise((resolve) =>{\n            //Cannot access type via db[type], so we have to do it manually\n            let callback = (data) => {\n                resolve (data) \n            }\n            switch(type){\n                case \"Facility\":\n                    db.Facility.where(queryParams).toArray(callback)\n                break\n                case \"Ward\":\n                    db.Ward.where(queryParams).toArray(callback)\n                break\n                case \"LGA\":\n                    db.LGA.where(queryParams).toArray(callback)\n                break\n                case \"State\":\n                    db.State.where(queryParams).toArray(callback)\n                break\n                default:\n                    //\n                break;\n            }\n        })\n    }\n\n    state = {\n\n        //Selected locations at each level\n        National: \"1|Nigeria|National\" ,\n        State:undefined,\n        LGA:undefined,\n        Ward:undefined,\n        Facility:undefined,\n\n        //Selection lists to show at each level\n        StateList: undefined,\n        LGAList: undefined,\n        WardList:undefined,\n        FacilityList:undefined,\n\n        //Enables / disables each list\n        enabledDisabledLists:{\n            \"National\"  : false,\n            \"State\"     : false,\n            \"LGA\"       : false,\n            \"Ward\"      : false,\n            \"Facility\"  : false\n        },\n\n        selectedLocation: \"1|Nigeria|National\"\n    }\n\n    componentDidUpdate = async (oldProps) => {\n        \n        if (oldProps.disabled !== this.props.disabled) this.enableDisableLists()\n\n        //No need to update for maxScope; this should not change unless the admin user has changed\n\n        //In the future, this can be updated to also change the user shown\n        //when the prop changes to allow React to persist a LocationSelector\n        //in the DOM, but this is tricky because it also requires LocationSelector\n        //to revert the selected location when editing is cancelled.\n    }\n\n    componentWillMount = () =>{\n        this.setLocations()\n    }\n\n    findIndexForLocationType = (locationType) =>{\n        return hierarchyLevels.findIndex((el) => {\n            return el === locationType\n        })\n    }\n\n    setLocations = async () =>{\n        /**\n         * Preconditions:\n         *  - initialLocation is within maxScope\n         *  - maxScope must be higher or equal to initialLocation\n         */\n        let maxScope = {\n            Type:  this.props.maxScope ? this.props.maxScope.Type : \"National\",\n            Id:     this.props.maxScope ? this.props.maxScope.Id : \"1\",\n        }\n        console.log(this.props.initialLocation);\n        let initialLocation = {\n            Type:  this.props.initialLocation.Type ? this.props.initialLocation.Type : maxScope.Type,\n            Id:     this.props.initialLocation.Id ? this.props.initialLocation.Id : maxScope.Id,\n        }\n\n        this.setState({\n            maxScope: maxScope,\n            initialLocation: initialLocation\n\n        }, () =>{\n            console.log(this.state);\n            let initLocationIndex = this.findIndexForLocationType(initialLocation.Type)\n\n            //Work backwards to define all the locations that the initial location belongs to\n    \n            let locations = {\n                \"National\"  : \"1|Nigeria|National\",\n                \"State\"     : undefined,\n                \"LGA\"       : undefined,\n                \"Ward\"      : undefined,\n                \"Facility\"  : undefined\n            }\n            \n            this.getLocationHierarchyForInitLocation(initLocationIndex, initialLocation.Id, this.setLocationState, locations)\n        })\n\n\n    }\n\n    getLocationHierarchyForInitLocation = async (currentIndex, currentLocationId,completionCallback, locations) =>{\n        if (currentIndex === 0){\n            completionCallback(locations)\n            return\n        }else{\n            console.log(currentLocationId)\n            let location = await (this.findLocationByQuery(hierarchyLevels[currentIndex], {Id:currentLocationId}))\n            console.log(location)\n            location = location[0]\n            locations[hierarchyLevels[currentIndex]] = `${location.Id}|${location.Name}|${hierarchyLevels[currentIndex]}`\n            this.getLocationHierarchyForInitLocation(currentIndex-1, location.parentId, completionCallback, locations)\n        }\n    }\n\n    setLocationState = (data) =>{\n        this.setState({...data}, () =>{\n            this.notifyParent()\n            //Then update lists for each level that is defined, plus the first undefined level\n            for (let i = 0; i < hierarchyLevels.length; i++){\n                this.updateList(hierarchyLevels[i], i, () =>{})\n            }\n            this.enableDisableLists()\n        })\n    }\n\n    enableDisableLists = () =>{\n\n        let maxScope = this.state.maxScope\n        let enabledDisabledLists = {}\n\n        //Disable all fields if global state is disabled\n        if (this.props.disabled === true){\n            for (let i = 0; i < hierarchyLevels.length; i++){\n                enabledDisabledLists[hierarchyLevels[i]] = true\n            }\n        }else{\n            let disabled = true\n            for (let i = 0; i < hierarchyLevels.length; i++){\n                //Disable all levels above maxScope.Level, including maxScope\n                enabledDisabledLists[hierarchyLevels[i]] = disabled\n    \n                //Enable all levels after maxScope.Level\n                if (hierarchyLevels[i] === maxScope.Type) disabled = false\n            }\n        }\n        this.setState({enabledDisabledLists: enabledDisabledLists})\n    }\n\n    handleChange = (level, value) =>{\n        //Find Current Level\n        let currentLevelIndex = this.findIndexForLocationType(level)\n        let currentLevel = level\n\n        //If value is undefined, then Select was cleared so the current Level is one above this level\n        if (value === undefined || this.parseLocation(value).Id === \"-1\"){\n            currentLevel = hierarchyLevels[currentLevelIndex - 1]  \n            this.setState({[level]: undefined, selectedLocation:this.state[currentLevel]}, () =>{\n                this.notifyParent()\n            })\n        }else{\n            //Update Select\n            this.setState({[level]: value, selectedLocation:value},  () =>{\n                this.notifyParent()\n            })\n        }\n        \n        //Whenever the value has changed, all the subordinate options have been invalidated \n        for (let i = currentLevelIndex + 1; i < hierarchyLevels.length; i++){\n            let statePropertyName = hierarchyLevels[i]\n            const x = i\n            this.setState({[statePropertyName]: undefined}, () =>{\n                this.updateList(statePropertyName, x)\n            })\n        }\n    }\n\n    updateList = async (level, levelIndex, callBack) => {\n        \n        let list = []\n        let listName = `${level}List`                       //E.g. We will be updating this.state.FacilityList\n        let queryProperty = hierarchyLevels[levelIndex]      //eg level = lga but we need 'LGA' for data.LGA\n\n        //States are special because they don't require a nation lookup\n        if (level === \"State\"){\n            list = await this.findAllLocations(level)\n        }else{\n            levelIndex = hierarchyLevels.findIndex((el) => {return el === level})\n\n            queryProperty = hierarchyLevels[levelIndex] //eg level = lga, queryProperty = LGA\n            let aboveLevel = hierarchyLevels[levelIndex-1]\n            if (this.state[aboveLevel] === undefined){\n                //Short circuit if the above level is undefined\n                this.setState({[listName]: []})\n                return\n            }else{\n                let aboveLevelId = this.parseLocation(this.state[aboveLevel]).Id\n                list = await this.findLocationByQuery(queryProperty,{parentId: aboveLevelId})\n            }\n        }\n\n        let optionsList = []\n         //Add a clear option to the front of the array (mobile users won't see the clear button)\n\n        optionsList.push(\n            <Option key = {-1} value = \"-1||\"><em>Clear Selection</em></Option>\n        )\n\n        //Add the remaining objects\n        list.forEach((el)=>{\n            optionsList.push(\n                <Option key = {el.Id} value = {`${el.Id}|${el.Name}|${level}`}>{el.Name}</Option>\n            )\n        })\n        \n        if (optionsList.length > 0){\n            this.setState({[listName]: optionsList})\n        }\n\n        if (callBack) callBack()\n    }\n\n    parseLocation (value) {\n        if (value === undefined) return {\n            Id:\"\",Name:\"\",Type:\"\"\n        }\n        let valueArr = value.split(\"|\")\n        return{\n            Id:     valueArr[0],\n            Name:   valueArr[1],\n            Type:  valueArr[2]\n        }\n    }\n\n    notifyParent = () =>{\n        if (this.props.parentHandler !== undefined && this.props.parentHandler !== null){\n            let location = undefined\n            for (let i = hierarchyLevels.length-1; i >=0 ; i--){\n                if (this.state[hierarchyLevels[i]] !== undefined){\n                    location = this.state[hierarchyLevels[i]]\n                    break\n                }\n            }\n            this.props.parentHandler(this.parseLocation(location))\n        }\n    }\n\n    render() {\n        return (\n           <div>\n               <Select\n                    style={style}\n                    placeholder=\"Country\"\n                    optionFilterProp=\"children\"\n                    defaultValue = \"Nigeria\"\n                    disabled\n                >\n                    <Option value=\"Nigeria\">Nigeria</Option>\n                </Select>\n                <br/>\n                <Select\n                    showSearch\n                    style={style}\n                    placeholder=\"State\"\n                    optionFilterProp=\"children\"\n                    value = {this.state.State}\n                    onChange={(value) => {this.handleChange(\"State\", value)}}\n                    disabled = {this.state.enabledDisabledLists.State}\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >\n                    {this.state.StateList}\n                </Select>\n                <br/>\n                <Select\n                    showSearch\n                    style={style}\n                    placeholder=\"LGA\"\n                    optionFilterProp=\"children\"\n                    value = {this.state.LGA}\n                    onChange={(value) => {this.handleChange(\"LGA\", value)}}\n                    disabled = {this.state.enabledDisabledLists.LGA}\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >\n                    {this.state.LGAList}\n                </Select>\n                <br/>\n                <Select\n                    showSearch\n                    style={style}\n                    placeholder=\"Ward\"\n                    optionFilterProp=\"children\"\n                    value = {this.state.Ward}\n                    onChange={(value) => {this.handleChange(\"Ward\", value)}}\n                    disabled = {this.state.enabledDisabledLists.Ward}\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >\n                    {this.state.WardList}\n                </Select>\n                <br/>\n                <Select\n                    showSearch\n                    style={style}\n                    placeholder=\"Facility\"\n                    optionFilterProp=\"children\"\n                    value = {this.state.Facility}\n                    onChange={(value) => {this.handleChange(\"Facility\", value)}}\n                    disabled = {this.state.enabledDisabledLists.Facility}\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >\n                    {this.state.FacilityList}\n                </Select>\n                <br/>\n                <div hidden = {!this.props.showLocation}>\n                    <p>\n                        Selected Location: {`${this.parseLocation(this.state.selectedLocation).Name} (${this.parseLocation(this.state.selectedLocation).Type})`}\n                    </p>\n                </div>\n               \n           </div>\n        );\n    }\n}\n\nexport default LocationSelector;\n","import React, { Component } from 'react';\n\nimport {Select} from 'antd'\n\nimport db from '../Database/database'\n\nconst hierarchyLevels = [\n    \"Group\",\n    \"Set\",\n    \"Metric\",\n]\n\nconst Option = Select.Option;\n\nconst style = {\n    width: \"100%\"\n}\n\n/**\n * Selects a loction in Nigeria\n * @param {parentHandler} - Function passed in by the parent that takes a LocationObject with props {Id, Name, Type} and updates the parent UI\n * @param {showData} - Boolean that shows or hides LocationSelector's built-in selected location text\n * @param {initialData} = {GroupValue, SetValue, MetricValue}\n */\nclass MetricSelector extends Component {\n\n    findAll = (type) => {\n        return new Promise((resolve) =>{\n            //Cannot access type via db[type], so we have to do it manually\n            let callback = (data) => {\n                resolve (data) \n            }\n\n            switch(type){\n                case \"Metric\":\n                    db.Metrics.toArray(callback)\n                break\n                case \"Set\":\n                    db.Sets.toArray(callback)\n                break\n                case \"Group\":\n                    db.Groups.toArray(callback)\n                break\n                default:\n                    //\n                break;\n            }\n        })\n    }\n\n    findByQuery(type, queryParams){\n        return new Promise((resolve) =>{\n            //Cannot access type via db[type], so we have to do it manually\n            let callback = (data) => {\n                resolve (data) \n            }\n            switch(type){\n                case \"Metric\":\n                    db.Metrics.where(queryParams).toArray(callback)\n                break\n                case \"Set\":\n                    db.Sets.where(queryParams).toArray(callback)\n                break\n                case \"Group\":\n                    db.Groups.where(queryParams).toArray(callback)\n                break\n                default:\n                    //\n                break;\n            }\n        })\n    }\n\n    state = {\n\n        //Selected values at each level\n        Group:undefined,\n        Set:undefined,\n        Metric:undefined,\n\n        //Selection lists to show at each level\n        GroupList: undefined,\n        SetList: undefined,\n        MetricList:undefined,      \n\n        //Enables / disables each list\n        enabledDisabledLists:{\n            \"Group\"  : false,\n            \"Set\"     : false,\n            \"Metric\"       : false,\n        },\n\n        selectedData: undefined\n    }\n\n    componentDidUpdate = async (oldProps) => {\n        \n        if (oldProps.disabled !== this.props.disabled) this.enableDisableLists()\n\n        //No need to update for maxScope; this should not change unless the admin user has changed\n\n        //In the future, this can be updated to also change the user shown\n        //when the prop changes to allow React to persist a LocationSelector\n        //in the DOM, but this is tricky because it also requires LocationSelector\n        //to revert the selected location when editing is cancelled.\n    }\n\n    componentDidMount = () =>{\n        this.setInitialDataState()\n    }\n\n    findIndexForLocationType = (locationType) =>{\n        return hierarchyLevels.findIndex((el) => {\n            return el === locationType\n        })\n    }\n\n    setInitialDataState = () =>{\n        this.enableDisableLists()\n        if (this.props.initialData === undefined){\n            //If undefined, then only update Group List\n            this.updateList(\"Group\", 0, null)\n            this.notifyParent()\n        }else{\n            this.setState({\n                Group:  this.props.initialData.GroupValue.length > 0    ? this.props.initialData.GroupValue     : undefined,\n                Set:    this.props.initialData.SetValue.length > 0      ? this.props.initialData.SetValue       : undefined,\n                Metric: this.props.initialData.MetricValue.length > 0   ? this.props.initialData.MetricValue    : undefined,\n            }, () =>{\n                this.notifyParent()\n                this.updateList(\"Group\", 0, null)\n                this.updateList(\"Set\", 0, null)\n                this.updateList(\"Metric\", 0, null)\n            })\n        }\n    }\n\n    enableDisableLists = () =>{\n\n        let enabledDisabledLists = {}\n\n        let disabled = this.props.disabled !== undefined ? this.props.disabled : false\n        //Disable all fields if global state is disabled\n        for (let i = 0; i < hierarchyLevels.length; i++){\n            enabledDisabledLists[hierarchyLevels[i]] = disabled\n        }\n        this.setState({enabledDisabledLists: enabledDisabledLists})\n    }\n\n    handleChange = (level, value) =>{\n        //Find Current Level\n        let currentLevelIndex = this.findIndexForLocationType(level)    \n\n        //If value is undefined, then Select was cleared so the current Level is one above this level\n        if (value === undefined || this.parseData(value).Id === \"-1\"){\n            this.setState({[level]: undefined}, () =>{\n                this.createLocationObject()\n                this.notifyParent()\n            })\n        }else{\n            //Update Select\n            this.setState({[level]: value, selectedData:value},  () =>{\n                this.createLocationObject()\n                this.notifyParent()\n            })\n        }\n        \n        //Whenever the value has changed, all the subordinate options have been invalidated \n        for (let i = currentLevelIndex + 1; i < hierarchyLevels.length; i++){\n            let statePropertyName = hierarchyLevels[i]\n            const x = i\n            this.setState({[statePropertyName]: undefined}, () =>{\n                this.updateList(statePropertyName, x)\n                this.createLocationObject()\n            })\n        }\n\n    }\n\n    createLocationObject = () =>{\n\n        let type = undefined, name = undefined, split = undefined\n\n        if (this.state.Metric !== undefined){\n            split = this.state.Metric.split(\"|\")\n            type = split[2]\n            name = split[1]\n        }else if (this.state.Set !== undefined){\n            split = this.state.Set.split(\"|\")\n            type = split[2]\n            name = split[1]\n        }else if (this.state.Group !== undefined){\n            split = this.state.Group.split(\"|\")\n            type = split[2]\n            name = split[1]\n        }\n        \n        let typeID = type !== undefined ? split[0] : undefined\n\n        let totalOrDistribution = \"total\" // Default to total\n\n        if (type !== \"Metric\"){\n            //If this is not a metric and has a total or distribution, we need to find out which one it is\n            let nextType = hierarchyLevels[this.findIndexForLocationType(type) + 1]\n\n            if (this.state[nextType] !== undefined){\n                let nextType = typeID.split(\"-\")\n                typeID = nextType[2]            //Get the ID of the above Set or Group without the -# prefix\n                if (nextType[1] === \"2\"){\n                    totalOrDistribution = \"total\"\n                }else{\n                    totalOrDistribution = \"distribution\"\n                }\n            }\n        }else{\n            totalOrDistribution = \"none\"\n        }\n\n        let result = {\n            Type: type,\n            Id: typeID,\n            Name: name,\n            TotalOrDistribution: totalOrDistribution,\n            GroupValue: this.state.Group,\n            SetValue: this.state.Set,\n            MetricValue: this.state.Metric\n        }\n        \n        return result\n    }\n\n    updateList = async (level, levelIndex, callBack) => {\n        \n        let list = []\n        let listName = `${level}List`                       //E.g. We will be updating this.state.FacilityList\n        let queryProperty = hierarchyLevels[levelIndex]      //eg level = lga but we need 'LGA' for data.LGA\\\n        let aboveLevel = undefined\n\n        //States are special because they don't require a nation lookup\n        if (level === \"Group\"){\n            list = await this.findAll(level)\n        }else{\n            levelIndex = hierarchyLevels.findIndex((el) => {return el === level})\n            queryProperty = hierarchyLevels[levelIndex] //eg level = lga, queryProperty = LGA\n            aboveLevel = hierarchyLevels[levelIndex-1]\n            if (this.state[aboveLevel] === undefined){\n                //Short circuit if the above level is undefined\n                this.setState({[listName]: []})\n                return\n            }else{\n                let aboveLevelId = this.parseData(this.state[aboveLevel]).Id\n                list = await this.findByQuery(queryProperty,{parentId: aboveLevelId})\n            }\n        }\n\n        let optionsList = []\n\n         //Add a clear option to the front of the array (mobile users won't see the clear button)\n        optionsList.push(\n            <Option key = {-1} value = \"-1||\"><em>Clear Selection</em></Option>\n        )\n\n        //Add total and distribution of the above group or set\n        if (level === \"Set\" || level === \"Metric\"){\n            let totalString = `All ${this.state[aboveLevel].split(\"|\")[1]} (Total)`\n            optionsList.push(\n                <Option key = {-1} value = {`-2-${this.state[aboveLevel].split(\"|\")[0]}|${totalString}|${aboveLevel}`}>{totalString}</Option>\n            )\n            let distributionString = `All ${this.state[aboveLevel].split(\"|\")[1]} (Distribution)`\n            optionsList.push(\n                <Option key = {-1} value = {`-3-${this.state[aboveLevel].split(\"|\")[0]}|${distributionString}|${aboveLevel}`}>{distributionString}</Option>\n            )\n        }\n\n        //If the Set Above includes a Total or Distribution, then there are no metrics to show\n        if (level === \"Metric\"){\n            if (this.state[aboveLevel].split(\"|\")[0].charAt(0)  === \"-\"){\n                this.setState({\n                    [listName]: []\n                })\n                return\n            }\n        }\n\n        let aboveName = aboveLevel === undefined ? null : this.state[aboveLevel].split(\"|\")[1]\n        //Add the remaining objects\n        list.forEach((el)=>{\n            //Add to list unless the name is the same as the one above\n            if (aboveName !== el.Name){\n                optionsList.push(\n                    <Option key = {el.Id} value = {`${el.Id}|${el.Name}|${level}`}>{el.Name}</Option>\n                )\n            }\n\n        })\n        \n        if (optionsList.length > 0){\n            this.setState({[listName]: optionsList})\n        }\n\n        if (callBack) callBack()\n    }\n\n    parseData (value) {\n        if (value === undefined) return {\n            Id:\"\",Name:\"\",Type:\"\"\n        }\n        let valueArr = value.split(\"|\")\n        return{\n            Id:     valueArr[0],\n            Name:   valueArr[1],\n            Type:  valueArr[2]\n        }\n    }\n\n    notifyParent = () =>{\n        if (this.props.parentHandler !== undefined && this.props.parentHandler !== null){\n            this.props.parentHandler(this.createLocationObject())\n        }\n    }\n\n    render() {\n        return (\n           <div>\n                <Select\n                    showSearch\n                    style={style}\n                    placeholder=\"Group\"\n                    optionFilterProp=\"children\"\n                    value = {this.state.Group}\n                    onChange={(value) => {this.handleChange(\"Group\", value)}}\n                    disabled = {this.state.enabledDisabledLists.Group}\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >\n                    {this.state.GroupList}\n                </Select>\n                <br/>\n                <Select\n                    showSearch\n                    style={style}\n                    placeholder=\"Set\"\n                    optionFilterProp=\"children\"\n                    value = {this.state.Set}\n                    onChange={(value) => {this.handleChange(\"Set\", value)}}\n                    disabled = {this.state.enabledDisabledLists.Set}\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >\n                    {this.state.SetList}\n                </Select>\n                <br/>\n                <Select\n                    showSearch\n                    style={style}\n                    placeholder=\"Metric\"\n                    optionFilterProp=\"children\"\n                    value = {this.state.Metric}\n                    onChange={(value) => {this.handleChange(\"Metric\", value)}}\n                    disabled = {this.state.enabledDisabledLists.Metric}\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >\n                    {this.state.MetricList}\n                </Select>\n            \n                <br/>\n                <div hidden = {this.props.showLabel !== undefined ? !this.props.showLabel : false}>\n                    <p>\n                        Selected Data: {`${this.createLocationObject().Name} (${this.createLocationObject().Type})`}\n                    </p>\n                </div>\n               \n           </div>\n        );\n    }\n}\n\nexport default MetricSelector;\n","import db from '../Database/database'\n\nconst userService = {\n    login,\n    logout,\n    user,\n}\n\nfunction login(email, password){\n    return new Promise ((resolve, reject) =>{\n        var loginApiRoute = `${process.env.REACT_APP_API_URL}${process.env.REACT_APP_LOGIN_ROUTE}`;\n        fetch(loginApiRoute, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({Email: email, Password: password})\n        })\n        .then((result) => {\n            return result.json();      \n        })\n        .then((userJsonObj) => {\n            if(userJsonObj.success){\n                //Successfully logined, so store in user info LocalUser and resolve promise to true\n                db.LocalUser.clear().then(\n                    db.LocalUser.add(userJsonObj.user).then(() =>{\n                        console.log(\"Auth Login Success\");\n                        resolve (true)\n                    })\n                ).catch((e) =>{\n                    //failed to save to LocalUser\n                    console.log(e);\n                    resolve(false);\n                });\n            }\n            else{\n                //failed to login, so resolve promise to false\n                resolve(false);\n            }\n        });\n    });\n}\n\nfunction logout(){\n    return new Promise ((resolve, reject) =>{\n        db.Dashboard.clear().then(()=>{\n            \n        })\n        db.LocalUser.clear().then(() => {\n            resolve (true)\n        }).catch((e) =>{\n            console.log(e)\n            resolve(false)\n        })\n\n\n    })\n}\n\n/**\n * Determines if there is a user logged in. \n * Returns null if no user; returns the user if logged in.\n */\nfunction user(){\n    return new Promise ((resolve, reject) =>{\n        db.LocalUser.toArray(arr =>{\n            if (arr.length !== 1) resolve(null)\n            else{\n                let result = arr[0]\n                //result.UserType = \"admin\" //hard code for now\n                resolve(result)\n            }\n        })\n    })\n}   \n\n/**\n * Drop-in authenticated replacement for fetch.\n * Includes required auth tokens.\n * TODO\n */\n/*\nfunction fetch(url, args){\n    return new Promise ((resolve, reject) =>{\n\n        //Get Auth Token\n\n        //Append auth token to args headers (if we choose to do auth this way)\n\n        //Send fetch request with args provided and auth token\n        \n        //Resolve fetch request\n\n        resolve(true)\n    })\n}*/\n\nexport default userService;","import React, { Component } from 'react'\nimport {Button, message} from 'antd'\n\nimport db from '../Database/database'\nimport user from '../Services/User'\n\nclass SaveGraph extends Component{\n\n    //For a graph:\n\n    /**\n     * \n     * Locations[associativearray] of Location\n     * Data\n     * Dates: {StartDate, EndDate}\n     * RawData\n     */\n\n    saveGraph = () =>{\n        //Get Number of Dashboards Currently\n        db.Dashboard.toCollection().last().then(object =>{\n            let key = 0\n            if (object){\n                key = object.Id + 1\n            }\n            //Prepare Save Object\n            let newGraph = {\n                Id:key,\n                Title: this.props.Title,\n                \n                Locations: this.props.Locations,\n                Dates: this.props.Dates,\n                Data: this.props.Data,\n                RawData: this.props.RawData\n                \n            }\n\n            db.Dashboard.put(newGraph).then(() =>{\n                message.success(\"Successfully saved to dashboard.\")\n                if (this.props.ParentHandler) this.props.ParentHandler()\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Button icon=\"save\" onClick={this.saveGraph}>Save Graph</Button>\n            </div>\n        )\n    }\n\n}\n\nexport default SaveGraph","import React, { Component } from 'react';\nimport { DatePicker} from 'antd';\nimport moment from 'moment';\n\nconst {MonthPicker} = DatePicker\n\nclass RangeSelector extends Component {\n\n    state = {\n        Dates: {\n            StartDate: this.props.initialData.Dates.StartDate,\n            EndDate: this.props.initialData.Dates.EndDate\n        }\n    }\n\n    startDateOnChange(date, dateString) {\n        var endDate = this.state.Dates.EndDate;\n        this.setState({\n            Dates: { StartDate: new Date(`${dateString}T00:00:00.000Z`), EndDate: endDate }\n        }, () => { \n            this.notifyParent();\n        })\n    }\n\n    endDateOnChage(date, dateString) {\n        var startDate = this.state.Dates.StartDate;\n        this.setState({\n            Dates: { StartDate: startDate, EndDate: new Date(`${dateString}T00:00:00.000Z`) }\n        }, () => { \n            this.notifyParent();\n        })\n    }\n    notifyParent = () =>{\n        if (this.props.parentHandler !== undefined && this.props.parentHandler !== null){\n            this.props.parentHandler(this.state.Dates);\n        }\n    }\n\n\n    plusOne = (num) => {\n        return num + 1;\n    }\n\n    dateToString = (date) => {\n        let str = date.getFullYear() + \"-\" +\n            this.plusOne(date.getMonth()) + \"-\" +\n            this.plusOne(date.getDay());\n        return str;\n    }\n\n    render() {\n        return (\n            <div className=\"center\">\n                <MonthPicker defaultValue={moment(this.dateToString(this.state.Dates.StartDate), 'YYYY-MM-DD')} placeholder=\"Start Date\" onChange={(date, dateString) => { this.startDateOnChange(date, dateString) }} />\n                <MonthPicker defaultValue={moment(this.dateToString(this.state.Dates.EndDate), 'YYYY-MM-DD')} placeholder=\"End Date\" onChange={(date, dateString) => { this.endDateOnChage(date, dateString) }} />\n                {/* <DatePicker defaultValue={moment(this.dateToString(this.state.Dates.StartDate), 'YYYY-MM-DD')} placeholder=\"Start Date\" onChange={(date, dateString) => { this.startDateOnChange(date, dateString) }} /> */}\n                {/* <DatePicker defaultValue={moment(this.dateToString(this.state.Dates.EndDate), 'YYYY-MM-DD')} placeholder=\"End Date\" onChange={(date, dateString) => { this.endDateOnChage(date, dateString) }} /> */}\n            </div>\n        )\n    };\n\n}\n\nexport default RangeSelector;\n","import React, { Component } from 'react';\nimport LocationSelector from '../LocationSelector/LocationSelector';\nimport MetricSelector from '../MetricSelector/MetricSelector';\nimport VisualizerManager from '../Visualizer/VisualizerManager';\nimport SaveGraph from '../Graph/SaveGraph'\nimport RangeSelector from '../RangeSelector/RangeSelector'\nimport { Card, Row, Col, Divider } from 'antd'\n\n\nclass CreateGraph extends Component {\n\n    state = {\n        Location: undefined,\n        Data: undefined,\n        Dates: { StartDate: new Date(\"2015-01-01T00:00:00.000Z\"), EndDate: new Date(\"2019-01-01T00:00:00.000Z\") }\n    }\n\n    updateRawData = (rawData) => {\n        this.setState({\n            RawData: rawData\n        })\n    }\n\n    updateLocation = (location) => {\n        this.setState({ Location: location })\n    }\n\n    updateData = (data) => {\n        this.setState({ Data: data })\n    }\n    updateDates = (dates) => {\n        this.setState({ Dates: dates });\n    }\n    createLocationObject = () => {\n        let loc = this.state.Location\n        let obj = {}\n        if (loc !== undefined) {\n            let name = `${loc.Type}-${loc.Id}`\n            obj[name] = loc\n        }\n        return obj\n    }\n\n    getTitle = () => {\n        if (this.state.Data !== undefined) {\n            return this.state.Data.Name.split(\"(\")[0]\n        }\n        return \"No title\"\n    }\n    render() {\n        return (\n            <div>\n                <Row className={``} gutter={16}>\n                    <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                        <Card className=\"left\" size=\"medium\" title=\"Create a Graph\">\n                            <Row className={``} gutter={16}>\n                                <h4>Select Location</h4>\n                                <LocationSelector\n                                    parentHandler={this.updateLocation}\n                                    initialLocation={\n                                        {\n                                            Id: \"1215\",\n                                            Type: \"Facility\"\n                                        }\n                                    }\n                                />\n                            </Row>\n                            <Divider/>\n                            <Row className={``} gutter={16}>\n\n                                <h4>Select Data</h4>\n                                <MetricSelector\n                                    parentHandler={this.updateData}\n                                    initialData={{\n                                        GroupValue: \"1191|Facility Attendance|Group\",\n                                        SetValue: \"-3-1191|All Facility Attendance (Distribution)|Group\",\n                                        MetricValue: \"\"\n                                    }}\n                                />\n                            </Row>\n                            <Divider/>\n                            <Row className={``} gutter={16}>\n                            <h4>Select Date Range</h4>\n\n                                <RangeSelector\n                                    parentHandler={this.updateDates}\n                                    initialData={\n                                        {\n                                            Dates: this.state.Dates\n                                        }\n                                    }\n                                />\n                            </Row>\n\n\n                        </Card>\n                    </Col>\n                </Row>\n                <Divider />\n                <Row className={``} gutter={16}>\n                    <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                        <Card className=\"left\" size=\"medium\" title=\"Your Graph\">\n                            <div>\n                                <VisualizerManager\n                                    Title={this.state.Data !== undefined && this.state.Data.Name !== undefined ? this.state.Data.Name.split(\"(\")[0] : \"\"}\n                                    Location={this.state.Location} //{Name, Id, Type}\n                                    Data={this.state.Data} // {Id, Type, TotalOrDistribution=\"total|none|distribution\"}\n                                    Dates={this.state.Dates}\n                                    ParentHandler={this.updateRawData}\n                                />\n\n                                <SaveGraph\n                                    Data={this.state.Data}\n                                    Dates={this.state.Dates}\n                                    Locations={this.createLocationObject()}\n                                    Title={this.getTitle()}\n                                    RawData={this.state.RawData}\n                                    ParentHandler={this.props.ParentHandler}\n                                />\n                            </div>\n\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default CreateGraph","import React, { Component } from 'react'\n\nimport { message, Icon, Table, Button, List, Card, Row, Col, Radio, Popconfirm } from 'antd'\n\nimport '../../node_modules/react-vis/dist/style.css'\nimport './Dashboard.css'\n\nimport VisualizerManager from '../Visualizer/VisualizerManager';\nimport CreateGraph from '../Graph/CreateGraph'\nimport db from '../Database/database';\nimport Visualizer from '../Visualizer/Visualizer';\n\nlet graphExamples = [\n    // {\n    //     Title: \"Facility Attendance Female, 29d-11 months\",\n    //     Location:{\n    //         Name: \"za Bagega Primary Health Centre\",\n    //         Id:  \"1215\",\n    //         Type: \"Facility\"\n    //     },\n    //     Data:{\n    //         Id: \"11729\",\n    //         Type: \"Metric\",\n    //     },\n    //     Dates:{\n    //         StartDate:new Date(\"2015-01-01T00:00:00.000Z\"),\n    //         EndDate: new Date(\"2015-12-01T00:00:00.000Z\"),\n    //     },\n    //     GraphId: 0\n    // },\n    // {\n    //     Title: \"Facility Attendance Outpatient Value\",\n    //     Location:{\n    //         Name: \"za Bagega Primary Health Centre\",\n    //         Id:  \"1215\",\n    //         Type: \"Facility\"\n    //     },\n    //     Data:{\n    //         Id: \"11493\",\n    //         Type: \"Metric\",\n    //     },\n    //     Dates:{\n    //         StartDate:new Date(\"2015-01-01T00:00:00.000Z\"),\n    //         EndDate: new Date(\"2015-12-01T00:00:00.000Z\"),\n    //     },\n    //     GraphId: 1\n    // },\n    // {\n    //     Title: \"Facility Attendance Outpatient\",\n    //     Location:{\n    //         Name: \"za Bagega Ward\",\n    //         Id:  \"386\",\n    //         Type: \"Ward\"\n    //     },\n    //     Data:{\n    //         Id: \"2094\",\n    //         Type: \"Set\",\n    //     },\n    //     Dates:{\n    //         StartDate:new Date(\"2015-01-01T00:00:00.000Z\"),\n    //         EndDate: new Date(\"2015-12-01T00:00:00.000Z\"),\n    //     },\n    //     GraphId: 2\n    // },\n    // {\n    //     Title: \"Facility Attendance Male\",\n    //     Location:{\n    //         Name: \"za Bagega Ward\",\n    //         Id:  \"386\",\n    //         Type: \"Ward\"\n    //     },\n    //     Data:{\n    //         Id: \"2094\",\n    //         Type: \"Set\",\n    //         TotalOrDistribution: \"distribution\"\n    //     },\n    //     Dates:{\n    //         StartDate:new Date(\"2015-01-01T00:00:00.000Z\"),\n    //         EndDate: new Date(\"2015-12-01T00:00:00.000Z\"),\n    //     },\n    //     GraphId: 3\n    // },\n    // {\n    //     Title: \"Facility Attendance Male\",\n    //     Location:{\n    //         Name: \"za Bagega Primary Health Centre\",\n    //         Id:  \"1215\",\n    //         Type: \"Facility\"\n    //     },\n    //     Data:{\n    //         Id: \"2094\",\n    //         Type: \"Set\",\n    //         TotalOrDistribution: \"distribution\"\n    //     },\n    //     Dates:{\n    //         StartDate:new Date(\"2015-01-01T00:00:00.000Z\"),\n    //         EndDate: new Date(\"2015-12-01T00:00:00.000Z\"),\n    //     },\n    //     GraphId: 4\n    // }\n]\n\nconst metricTableColumns = [\n    {\n        title: \"Metric Tracked\",\n        key: \"metricTracked\",\n        dataIndex: \"metric\",\n        defaultSortOrder: 'descend',\n        sorter: (a, b) => {\n            return b.metric.localeCompare(a.metric, \"en\")\n        },\n    },\n    {\n        title: \"Change\",\n        key: \"change\",\n        dataIndex: \"change\",\n        defaultSortOrder: 'descend',\n        sorter: (a, b) => {\n            return a.change - b.change\n        },\n        render: decimal => {\n            return `${Math.round(decimal * 100)}%`\n        }\n    },\n\n]\n\nconst metricData = [\n    {\n        key: '1',\n        metric: \"Malaria Vaccinations\",\n        change: 0.15\n    },\n    {\n        key: '2',\n        metric: \"Tetanus Vaccinations\",\n        change: -.13\n    },\n    {\n        key: '3',\n        metric: \"Measles Outbreaks\",\n        change: 0\n    },\n]\n\nclass Dashboard extends Component {\n\n    state = {\n        fullSize: true,\n        reportCard: false,\n        showGraphs: true,\n        graphOpenCloseState: null,\n        graphDataLoaded: false,\n        related: null,\n        relatedGraphs: []\n    }\n\n    fullSizeOrListChanged = (e) => {\n        this.setState({ fullSize: e.target.value === \"0\" ? false : true })\n    }\n\n    reportCardOrGraphsChanged = (e) => {\n        this.setState({ reportCard: e.target.value === \"0\" ? false : true }, () => {\n            window.dispatchEvent(new Event('resize'));\n        })\n    }\n\n    toggleGraph = (key) => {\n        //Update the open/close state for this graph\n        let copy = this.state.graphOpenCloseState\n        let newVal = !copy[key].open\n        copy[key] = { open: newVal }\n        let anyOpen = false\n        //Check if all graphs open\n        for (let i = 0; i < Object.keys(copy).length - 1; i++) {\n            if (i === key) continue\n            if (copy[i].open === true) {\n                anyOpen = true\n                break\n            }\n        }\n        if (anyOpen) {\n            copy[\"collapseOrExpandText\"] = { text: \"Collapse All\" }\n        } else {\n            copy[\"collapseOrExpandText\"] = { text: \"Expand All\" }\n        }\n\n        this.setState({ graphOpenCloseState: copy })\n    }\n\n    toggleAllGraphs = () => {\n        //Set future state depending on what the button says\n        //Probably not best practice but it works \n        let openState = this.state.graphOpenCloseState[\"collapseOrExpandText\"].text === \"Collapse All\" ? false : true\n        let copy = this.state.graphOpenCloseState\n        for (let i = 0; i < Object.keys(copy).length - 1; i++) {\n            copy[i].open = openState\n        }\n        copy[\"collapseOrExpandText\"].text = openState ? \"Collapse All\" : \"Expand All\"\n        this.setState({ graphOpenCloseState: copy })\n    }\n\n    createCollapseExpandButton = (key) => {\n        return (\n            <Button key={0} onClick={() => { this.toggleGraph(key) }}>{this.state.graphOpenCloseState[key].open ? \"Collapse\" : \"Expand\"}</Button>\n        )\n    }\n\n    getFirstLocation = (object) => {\n        let keys = Object.keys(object)\n        if (keys.length > 0) {\n            return object[keys[0]]\n        }\n    }\n\n    loadGraphsFromDB = () => {\n        db.Dashboard.toArray().then(arr => {\n            //Create a record of all open/close states for the graphs\n            let visibility = {}\n            for (let i = 0; i < arr.length; i++) {\n                visibility[i] = { open: true, showInFilter: true }\n            }\n\n            console.log(arr)\n\n            visibility[\"collapseOrExpandText\"] = { text: \"Collapse All\" }\n\n            this.setState({\n                graphData: arr,\n                graphDataLoaded: true,\n                graphOpenCloseState: visibility\n            })\n        })\n    }\n\n    componentDidMount() {\n        this.loadGraphsFromDB()\n    }\n\n\n    findAllGraphs = (item) => {\n        return new Promise((resolve) => {\n            let callback = (data) => {\n                resolve(data)\n            }\n\n            switch (item.Data.Type) {\n                case \"Metric\":\n                    db.Metrics.toArray(callback)\n                    break\n                case \"Set\":\n                    db.Sets.toArray(callback)\n                    break\n                case \"Group\":\n                    db.Sets.toArray(callback)\n                    break\n                default:\n                    //\n                    break;\n            }\n        })\n    }\n\n    findRelatedGraphs = (item) => {\n        return this.findAllGraphs(item).then((allData) => {\n            let relatedFound = [];\n            let parentId = \"\"\n            if (item.Data.Type === \"Group\") {\n                parentId = item.Data.Id\n            } else {\n                allData.forEach(function (metricData) {\n                    if (metricData.Id === item.Data.Id) {\n                        parentId = metricData.parentId\n                        return\n                    }\n                })\n            }\n\n            allData.forEach(function (metricData) {\n                if (metricData.parentId === parentId) {\n                    if (metricData.Id != item.Data.Id) {\n                        relatedFound.push(metricData)\n                    }\n                }\n            })\n            return relatedFound;\n        })\n    }\n\n    toggleViewRelated = async (item) => {\n        if (this.state.currentView === \"related\") {\n            this.setState({\n                currentView: \"\"\n            })\n        } else {\n            this.setState({\n                currentView: \"related\"\n            })\n\n            var relatedFound = await this.findRelatedGraphs(item);\n\n            this.processFoundData(relatedFound, item)\n\n        }\n    }\n\n    createViewRelatedButton = (item) => {\n        return (\n            <Button type = \"primary\" onClick={() => { this.toggleViewRelated(item) }}>View Related</Button>\n        )\n    }\n\n    createDeleteButton = (item) =>{\n        return(\n            <Popconfirm placement=\"topRight\" title = \"Are you sure want to delete this graph?\" okText=\"Delete\" cancelText=\"Cancel\"\n            onConfirm = {() => { this.deleteGraph(item) }}>\n                <Button type = \"danger\" icon = \"delete\">Delete</Button>\n            </Popconfirm>\n            \n        )\n\n    }\n\n    processFoundData = (relatedFound, item) => {\n        let processedRelatedData = []\n        console.log(item)\n        console.log(relatedFound)\n        relatedFound.forEach(function (data) {\n            var temp = JSON.parse(JSON.stringify(item))\n            temp.Title = data.Name\n            if (item.Data.Type === \"Set\" || item.Data.Type === \"Group\") {\n                temp.Title = \"All \" + data.Name\n            } else {\n                temp.Title = data.Name\n            }\n            if (item.Data.Type === \"Set\" || item.Data.Type === \"Group\") {\n                temp.Data.Name = \"All \" + data.Name + \" (Distribution)\"\n            } else {\n                temp.Data.Name = data.Name\n            }\n            temp.Data.Id = data.Id\n            temp.Dates.StartDate = item.Dates.StartDate\n            temp.Dates.EndDate = item.Dates.EndDate\n            temp.RawData = null\n            console.log(\"temp\")\n            console.log(temp)\n            processedRelatedData.push(temp)\n        })\n        this.setState({\n            relatedGraphs: processedRelatedData\n        }, () => { console.log(this.state.relatedGraphs) })\n    }\n\n    deleteGraph = (item) => {\n        db.Dashboard.delete(item.Id).then(() => {\n            db.Dashboard.toArray().then(arr => {\n                this.setState({\n                    graphData: arr\n                });\n                message.success(\"Graph successfully deleted.\");\n            });\n        });\n    }\n\n    renderRelated = () => {\n        return (\n            <List\n                itemLayout=\"vertical\"\n                dataSource={this.state.relatedGraphs}\n                renderItem={(item1, key) => (\n                    <List.Item >\n                        <List.Item.Meta\n                            title={item1.Title}\n                            description={item1.Locations.Name} />\n                        <VisualizerManager\n                            {...item1} //LocationId, Location, etc...\n                            Location={this.getFirstLocation(item1.Locations)}\n                            show = {true}\n                        />\n                    </List.Item>\n                )}>\n            </List>\n        )\n    }\n\n    itemHasCompare = (item) => {\n        return Object.keys(item).includes(\"Compare\")\n    }\n\n\n    renderGraphs = () => {\n        if (this.state.graphDataLoaded !== true) return null\n        return (\n            <List\n                itemLayout=\"vertical\"\n                dataSource={this.state.graphData}\n                renderItem={(item, key) => (\n                    <List.Item \n                    \n                    actions = {[\n                        this.createCollapseExpandButton(key),\n                        this.createViewRelatedButton(item),\n                        this.createDeleteButton(item)\n                    ]}>\n                        {!this.itemHasCompare(item) ? (\n                            <div>\n                                <List.Item.Meta\n                                    title={item.Title}\n                                    description={this.getFirstLocation(item.Locations).Name} />\n \n                                <VisualizerManager\n                                    {...item} //LocationId, Location, etc...\n                                    Location={this.getFirstLocation(item.Locations)}\n                                    show={this.state.graphOpenCloseState[key].open}\n                                />\n\n                            </div>) : (\n                                <div>\n                                    <List.Item.Meta\n                                        title={item.Title}\n                                        description={new Date(item.Dates.StartDate).toUTCString().substring(0, new Date(item.Dates.StartDate).toUTCString().length - 13) + \" - \" + new Date(item.Dates.EndDate).toUTCString().substring(0, new Date(item.Dates.EndDate).toUTCString().length - 13)} />\n                                    <Visualizer\n                                        type={item.GraphType}\n                                        show={true}\n                                        data={item.Data}>\n                                    </Visualizer>\n                                   \n                                </div>)}\n                    </List.Item>\n                )}>\n            </List>\n        )\n\n    }\n\n    showHideCreateGraphUI = () => {\n        this.setState({\n            showGraphs: !this.state.showGraphs\n        }, () => {\n            window.dispatchEvent(new Event('resize'));\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.state.currentView === \"related\" &&\n                    <div>\n                        <Row className=\"rowVMarginTopSm\" gutter={-1}>\n                            <Col className=\"left\" xs={{ span: 16, offset: 0 }} sm={{ span: 14, offset: 1 }} md={{ span: 10, offset: 3 }} lg={{ span: 8, offset: 4 }}>\n                                <h3>Related Graphs</h3>\n                            </Col>\n                            <Col className=\"right\" span={8}>\n                                <Button onClick={() => { this.toggleViewRelated() }}>Back</Button>\n                            </Col>\n                        </Row>\n                        <div className={this.state.showGraphs ? \"\" : \"displayNone\"}>\n                            <Row className={`rowVMarginSm`} gutter={16}>\n                                <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                                    <Card className=\"left\" size=\"small\">\n                                        {this.renderRelated()}\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </div>\n                    </div>\n\n                }\n                {\n                    this.state.currentView !== \"related\" &&\n                    <div className=\"center gutterOverflowMask\">\n                           \n                            {/* UI For Viewing Graphs */}\n                            {\n                                this.state.graphDataLoaded &&\n                                <div className={this.state.showGraphs ? \"\" : \"displayNone\"}>\n                                    <Row className={`rowVMarginSm rowVMarginTopSm`}>\n                                        <Col className=\"left\" xs={{ span: 12, offset: 0 }} sm={{ span: 11, offset: 1 }} md={{ span: 9, offset: 3 }} lg={{ span: 8, offset: 4 }}>\n                                            <Button onClick={this.toggleAllGraphs}>{this.state.graphOpenCloseState[\"collapseOrExpandText\"].text}</Button>\n                                        </Col>\n                                        <Col className=\"right\" xs={{ span: 12, offset: 0 }} sm={{ span: 11, offset: 0 }} md={{ span: 9, offset: 0 }} lg={{ span: 8, offset: 0 }}>\n                                            <Button icon=\"plus\" type=\"primary\" onClick={this.showHideCreateGraphUI}>Add Graph</Button>\n                                        </Col>\n                                    </Row>\n                                    <Row className={`rowVMarginSm`} gutter={16}>\n                                        <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                                            <Card className=\"left\" size=\"small\">\n                                                {this.renderGraphs()}\n                                            </Card>\n                                        </Col>\n                                    </Row>\n                                </div>\n                            }\n\n                            {/* UI For Creating Graphs */}\n                            <div className={this.state.showGraphs ? \"displayNone\" : \"\"}>\n                                <Row className=\"rowVMarginSm\">\n                                    <Col><Button icon=\"caret-left\" onClick={this.showHideCreateGraphUI}>Back</Button></Col>\n\n                                </Row>\n                                <Row className=\"rowVMarginSm\">\n                                    <CreateGraph\n                                        ParentHandler={this.loadGraphsFromDB}\n                                    />\n                                </Row>\n\n                            </div>\n    \n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;\n","import React, { Component } from 'react'\nimport {Row, Col, Input, Button} from 'antd'\nimport db from '../Database/database'\nimport UserService from '../Services/User';\nimport { withRouter } from 'react-router-dom'\n\nclass Login extends Component {\n\n    state = {\n        Email: null,\n        Password: null\n    }\n\n    handleInput = (value, property) =>{\n        this.setState({[property]: value})\n    }\n\n    preTab = (text) =>{\n        return(\n            <div style={{minWidth: \"90px\", textAlign:\"right\"}}>\n                {text}\n            </div>\n        )\n    }\n\n    login = () => {\n        UserService.login(this.state.Email,this.state.Password).then((success) => {\n            if(success){\n                //redirect\n                this.props.updateDrawer().then((result) => {\n                    this.props.history.push('/sync');\n                });\n            }\n            else{\n                //failed to login\n            }\n        })\n    }\n\n    render(){\n        return (\n            <div>\n                <Row>\n                    <Col>\n                        <Input \n                            addonBefore={this.preTab(\"Email\")}\n                            onChange = {(e) =>{\n                                this.handleInput(e.target.value, \"Email\")\n                            }}\n                            placeholder=\"Email\"/>\n\n                        <Input.Password\n                            addonBefore={this.preTab(\"Password\")}\n                            onChange = {(e) =>{\n                                this.handleInput(e.target.value, \"Password\")\n                            }}\n                            placeholder=\"Password\"/>\n                            \n                        <Button type=\"primary\"\n                            onClick = {this.login}>\n                            Login\n                        </Button>\n                    </Col>\n                    <Col>\n\n                    </Col>\n                </Row>\n\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Login);","import React, { Component } from 'react';\n\nimport {Row, Col} from 'antd'\nimport './SampleHome.css';\nimport MetricSelector from \"../MetricSelector/MetricSelector\"\nimport LocationSelector from \"../LocationSelector/LocationSelector\"\nimport Login from \"../Login/Login\"\nimport userService from '../Services/User'\nimport CreateGraph from '../Graph/CreateGraph';\n\nclass App extends Component {\n\n    state = {\n        location:null,\n        user: null\n    }\n\n    updateLocation = (location) =>{\n        console.log(location)\n        this.setState({location: location})\n    }\n\n    componentWillMount(){\n        userService.user().then((userObj) => {\n            this.setState({user: userObj});\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"sampleApp\">\n                {/* <header className=\"sampleApp-header\">\n                    <p>\n                        This is the Home Page\n                    </p>\n                    <h4>{this.state.location ? this.state.location.Name : \"\"}</h4>\n                    <LocationSelector parentHandler = {this.updateLocation} showLocation = {false}></LocationSelector>\n                </header> */}\n\n                {\n                    this.state.user == null? <Login updateDrawer = {this.props.updateDrawer}></Login> :  \n                    <React.Fragment>\n                        <MetricSelector \n                            parentHandler = {this.updateLocation} \n                            showLabel = {true}\n                            // disabled = {true}\n                            initialData = {{\n                                Type: \"Group\", \n                                Id: \"1191\",\n                                TotalOrDistribution:\"Total\", //Total | Distribution | None. Applicable if Type === Group or Set.\n                                GroupValue: \"1191|Facility Attendance|Group\",\n                                SetValue: \"2094|Facility Attendance Male|Set\",\n                                MetricValue:\"-3-2094|All Facility Attendance Male (Distribution)|Set\"\n                                //This means Group = 1191, and Total for Group\n                            }}>\n                        </MetricSelector>\n                        <Row> User Name is {this.state.user.FirstName} </Row>\n                        <Row>\n                            <Col>\n                            <h4>{this.state.location ? this.state.location.Name : \"\"}</h4>\n                            </Col>\n                        </Row>\n                    </React.Fragment>\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React, { Component } from 'react'\nimport { Button, Input, Row, Col, Divider, Popconfirm, message, Select } from 'antd'\n\nimport LocationSelector from \"../LocationSelector/LocationSelector\"\n\nimport db from '../Database/database'\nimport user from '../Services/User'\n\nconst userFields = [\n    \"FirstName\",\n    \"LastName\",\n    \"Phone\",\n    \"Email\",\n    \"Id\",\n    \"LocationId\",\n    \"LocationType\",\n    \"UserType\",\n    \"LocationName\"\n]\n\nclass CreateModifyDeleteUser extends Component {\n\n    componentDidMount() {\n        if (this.props.mode === \"new\")\n            this.enableEditing()\n        \n            user.user().then((result) => {\n                this.setState({\n                    ready: true,\n                    loggedInUser: result\n                })\n            })\n        \n    }\n\n    componentWillMount() {\n        this.setState({\n            userInfo: this.computedState(this.props.user),\n            passedUser: this.props.user\n        })\n    }\n    \n\n    componentDidUpdate(oldProps) {\n        const newProps = this.props\n        if (oldProps.user !== newProps.user) {\n            this.setState({\n                passedUser: this.props.user,\n                userInfo: this.computedState(newProps.user)\n            })\n        }\n\n    }\n\n    inputLabelTab = (text) => {\n        return (\n            <div style={{ minWidth: \"90px\", textAlign: \"right\" }}>\n                {text}\n            </div>\n        )\n    }\n\n    state = {\n        mode: this.props.mode ? this.props.mode : \"view\", //View (default unless overridden), create, or edit,\n        userChanged: false,\n        disabled: true,\n        locationDisabled: true,\n        loggedInUser: null\n        //userInfo holds current computed properties (including modifications)\n        //passedUser holds the original user information\n    }\n\n    computedState(user) {\n\n        let userState = {}\n\n        if (user == null) {\n            for (let i = 0; i < userFields.length; i++) {\n                userState[userFields[i]] = null\n            }\n        } else {\n            for (let i = 0; i < userFields.length; i++) {\n                if (userFields[i] in this.props.user) {\n                    userState[userFields[i]] = this.props.user[userFields[i]]\n                } else {\n                    userState[userFields[i]] = null\n                }\n            }\n        }\n        return userState\n    }\n\n    //If this is the user, then they can change the password.\n    //Otherwise, this is an admin, who can reset a password.\n    isUser = () => {\n        return true\n    }\n\n    confirmDelete = async () => {\n        let url = `https://essd-backend-dev.azurewebsites.net/api/users/deleteUser/${this.state.passedUser.Id}`\n        //Send Delete HTTP Request\n        let deleteRequest = await fetch(url, { method: \"delete\" })\n        deleteRequest.json().then((data) => {\n            db.User.delete(this.state.passedUser.Id).then(() => {\n                message.success(\"Successfully deleted user.\")\n                this.props.refreshUsers()\n                this.back();\n            })\n        })\n            .catch((error) => {\n                message.error(\"Sorry, something went wrong.\")\n            })\n    }\n\n    adminFeatures = () => {\n        //Only show delete this is a secondary view (ie showTable_f exists)\n        if (this.props.user != null && this.props.showTable_f !== null) return (\n            <div>\n                <Col className=\"right\">\n                    <Popconfirm placement=\"topRight\" title=\"Are you sure you want to delete this user? This action cannot be reverted.\" onConfirm={this.confirmDelete} okText=\"Delete\" cancelText=\"Cancel\">\n                        <Button type=\"danger\">Delete User</Button>\n                    </Popconfirm>\n                </Col>\n\n            </div>\n        )\n        return null\n    }\n\n    ///Todo: generate function to update state\n\n    inputChanged = (stateName, e) => {\n        let user = this.state.userInfo\n        user[stateName] = e.target.value\n        this.setState({ userInfo: user })\n        this.userInformationChanged()\n    }\n\n    handleUserTypeSelect(value) {\n        let user = this.state.userInfo\n        user[\"UserType\"] = value\n        this.setState({ userInfo: user },() => {console.log(this.state.userInfo)})\n        //this.userInformationChanged()\n    }\n\n    basicFeatures = () => {\n        console.log(this.state.mode);\n        let basicFeatures = [\n            \"First Name\",\n            \"Last Name\",\n            \"Phone\",\n            \"Email\"\n            \n        ]\n\n        let array = []\n\n        for (let i = 0; i < basicFeatures.length; i++) {\n            let featureName = basicFeatures[i]\n            let featureNameKey = featureName.replace(\" \", \"\")   //e.g. \"First Name\" -> user.FirstName\n            array.push(\n                <Input addonBefore={this.inputLabelTab(featureName)}\n                    value={this.state.userInfo ? this.state.userInfo[featureNameKey] : \"\"}\n                    disabled={this.state.disabled || (featureName == \"Email\" && this.state.mode == \"existing\")}\n                    key={i}\n                    onChange={(e) => { this.inputChanged(featureNameKey, e) }} />\n            )\n        }\n\n        let allUserTypeOptions = [];\n\n        switch (this.state.userInfo.UserType) {\n            case \"superadmin\":\n                allUserTypeOptions = [\n                    <Select.Option key={1} value=\"superadmin\">Super Admin</Select.Option>,\n                    <Select.Option key={2} value=\"admin\">Admin</Select.Option>,\n                    <Select.Option key={3} value=\"user\">User</Select.Option>\n                ];\n                break;\n            case \"admin\":\n                allUserTypeOptions = [\n                    <Select.Option key={2} value=\"admin\">Admin</Select.Option>,\n                    <Select.Option key={3} value=\"user\">User</Select.Option>\n                ];\n                break;\n            case \"user\":\n                allUserTypeOptions = [\n                    <Select.Option key={3} value=\"user\">User</Select.Option>\n                ];\n                break;\n        }\n\n        if(this.state.mode == \"new\"){\n            switch (this.state.loggedInUser.UserType) {\n                case \"superadmin\":\n                    allUserTypeOptions = [\n                        <Select.Option key={2} value=\"admin\">Admin</Select.Option>,\n                        <Select.Option key={3} value=\"user\">User</Select.Option>\n                    ];\n                    break;\n                case \"admin\":\n                    allUserTypeOptions = [\n                        <Select.Option key={3} value=\"user\">User</Select.Option>\n                    ];\n                    break;\n            }\n        }\n        \n\n        return (\n            <div>{this.state.ready && <Col>\n                <Divider />\n                {array}\n                <Select style={{ width: \"100%\" }} defaultValue={this.state.userInfo.UserType != null? this.state.userInfo.UserType : \"user\"} placeholder=\"User Type\" onChange={(e)=>{this.handleUserTypeSelect(e)}} disabled={this.state.loggedInUser.Id == this.state.userInfo.Id ? true : this.state.disabled}>\n                    {allUserTypeOptions}\n                </Select>\n                <Divider />\n                {/* Location */}\n                <p>Location</p>\n                {/* Todo: add max scope depending on admin rights*/}\n                <LocationSelector\n                    parentHandler={this.updateLocation}\n                    showLocation={true}\n                    initialLocation={{ Id: this.state.userInfo.LocationId, Type: this.state.userInfo.LocationType }}\n                    disabled={this.state.loggedInUser.Id == this.state.userInfo.Id ? true : this.state.disabled}\n                    maxScope={{Type: this.state.loggedInUser.LocationType, Id: this.state.loggedInUser.LocationId}}/>\n            </Col>\n            }\n            </div>\n        )\n\n    }\n\n    updateLocation = (location) => {\n        let userInfo = this.state.userInfo\n        userInfo.LocationId = location.Id\n        userInfo.LocationType = location.Type\n        this.setState({\n            userInfo: userInfo\n        })\n    }\n\n    modifyControls = () => {\n        if (this.state.disabled) return (\n            <div>\n                <Button onClick={this.enableEditing}>Edit</Button>\n            </div>\n        );\n        else return (\n            <div>\n                <Button hidden={this.state.mode === \"new\"} onClick={this.cancelEditing}>Cancel</Button>\n                <Button disabled={!this.state.userChanged} onClick={this.save}>Save</Button>\n            </div>\n        )\n    }\n\n    cancelEditing = () => {\n        let user = this.computedState(this.state.passedUser)\n        this.setState({\n            userInfo: user,\n            disabled: true,\n            locationDisabled: true,\n        })\n        this.userInformationChanged()\n    }\n\n    enableEditing = () => {\n        user.user().then(u => {\n            if (u.userType === \"admin\") {\n                this.setState({\n                    disabled: false,\n                    locationDisabled: false,\n                })\n            } else {\n                this.setState({\n                    disabled: false,\n                    locationDisabled: true,\n                })\n            }\n            this.userInformationChanged()\n        })\n    }\n\n    userInformationChanged = () => {\n        //Todo: error checking here for valid inputs\n        let changed = false\n        if (this.props.mode === \"new\") {\n            changed = true\n        } else {\n            for (let i = 0; i < userFields.length; i++) {\n                if (this.state.userInfo[userFields[i]] !== this.state.passedUser[userFields[i]]) {\n                    changed = true\n                    break\n                }\n            }\n        }\n        this.setState({ userChanged: changed })\n    }\n\n    save = async () => {\n        let url, successMessage, errorMessage, method = \"\"\n        let successHandler = () => { }\n        let userObject = this.state.userInfo\n\n        if(userObject.UserType == null) \n            userObject.UserType = \"user\"\n\n        if (this.state.mode === \"new\") {\n            //Create User\n            //userObject.UserType = \"user\" //hardCode for now\n            delete userObject.Id\n            url = \"https://essd-backend-dev.azurewebsites.net/api/users/register\"\n            successMessage = \"Successfully added user.\"\n            errorMessage = \"Failed to create user. Please try again later.\"\n            method = \"POST\"\n            successHandler = (result) => {\n                if (\"Id\" in result) {\n                    userObject.Id = result.Id;\n                    userObject.LocationName = result.LocationName;\n                    db.User.add(userObject).then(() => {\n                        message.success(successMessage)\n                        this.props.refreshUsers()\n                        this.back();\n                    })\n                } else {\n                    console.log('throwing an error')\n                    throw new Error(result.error)\n                }\n\n            }\n        } else {\n\n            //Update User\n            //userObject.UserType = \"user\" //hardCode for now\n            url = \"https://essd-backend-dev.azurewebsites.net/api/users/updateUser\"\n            successMessage = \"Successfully updated user.\"\n            errorMessage = \"Failed to update user. Please try again later.\"\n            method = \"PUT\"\n            successHandler = (result) => {\n                if (result.result === \"Update successful\") {\n                    if(this.state.loggedInUser.Id == userObject.Id){\n                        db.LocalUser.put(userObject).then(() => {\n                            message.success(successMessage)\n                            this.props.refreshUsers()\n                            //this.cancelEditing()\n                            this.setState({\n                                user: userObject,\n                                disabled: true,\n                                locationDisabled: true,\n                            })\n                        })\n                    }\n                    else{\n                        db.User.put(userObject).then(() => {\n                            message.success(successMessage)\n                            this.props.refreshUsers()\n                            //this.cancelEditing()\n                            this.setState({\n                                user: userObject,\n                                disabled: true,\n                                locationDisabled: true,\n                            })\n                            this.passedUser = userObject;\n                        })\n                    }\n                    \n                }\n            }\n        }\n\n        let request = await fetch(url, {\n            method: method,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(userObject),\n        })\n\n        request.json().then(successHandler)\n            .catch((error) => {\n                console.log(error)\n                message.error(errorMessage)\n            })\n\n    }\n\n    back = () => {\n        //Remove any changes before executing callback\n        this.cancelEditing()\n        this.props.showTable_f()\n    }\n    /**\n     * Always render basic elements (first name, last name, etc)\n     * If current user == user viewed => allow changing password\n     * else if currentUser.type == admin || == superAdmin allow resetting password\n     * TODO: implement this when auth starts to work.\n     */\n    render() {\n        return (\n            <div>\n                {\n                    this.state.ready &&\n                    <div>\n                        {\n                            this.props.showTable_f &&\n                            <Row className=\"rowVMarginSm \">\n                                <Col>\n                                    <Button onClick={this.back} icon=\"caret-left\">Back</Button>\n                                </Col>\n                            </Row>\n                        }\n                        <Row className=\"rowVMarginSm\">\n                            <h3>User Details</h3>\n                            {this.modifyControls()}\n                            {this.basicFeatures()}\n                            <Divider />\n                            {this.adminFeatures()}\n                        </Row>\n\n                    </div>\n                }\n\n\n            </div>\n        )\n    }\n}\n\nexport default CreateModifyDeleteUser;","import React, { Component } from 'react'\nimport CreateModifyDeleteUser from '../Users/CreateModifyDeleteUser'\nimport user from '../Services/User'\nimport { Card, Row, Col } from 'antd'\n\nclass Account extends Component {\n\n    state = {\n        user: null\n    }\n\n    componentDidMount = () => {\n        user.user().then((u) => {\n            this.setState({\n                user: u\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.user &&\n                    <Row className=\"rowVMarginTopSm\" gutter={16}>\n                        <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                            <Card className=\"rowVMarginTopSm\" >\n\n                                <CreateModifyDeleteUser\n                                    showTable_f={null}\n                                    user={this.state.user}\n                                    mode=\"existing\"\n                                    refreshUsers={() => { }\n                                    }\n                                />\n                            </Card>\n\n                        </Col>\n                    </Row>\n                }\n            </div>\n\n\n        )\n    }\n}\n\nexport default Account;","import React, { Component } from 'react'\n\nimport { Card, Row, Col, Table, Spin, Button } from 'antd'\n\nimport CreateModifyDeleteUser from './CreateModifyDeleteUser'\n\nimport db from '../Database/database'\n\nlet dataSource = []\n\nclass User extends Component {\n\n    populateUsers = () => {\n        db.User.toArray((array) => {\n            array.forEach((element) => {\n                //Create additional properties as required\n                element.key = element.Id\n                element.name = `${element.FirstName} ${element.LastName}`\n                element.permissionLevel = element.LocationType.charAt(0).toUpperCase() + element.LocationType.slice(1)\n            })\n\n            dataSource = array.sort((a, b) => {\n                //Sort by last name, then first name\n                try {\n                    let lastNameCompare = a.LastName.localeCompare(b.LastName)\n                    if (lastNameCompare === 0) {\n                        return a.FirstName.localeCompare(b.FirstName)\n                    } else {\n                        return lastNameCompare\n                    }\n\n                } catch (e) {\n                    return -1\n                }\n            })\n            this.setState({ dataLoaded: true })\n            console.log(dataSource)\n\n        })\n\n\n    }\n\n    componentWillMount = () => {\n        this.populateUsers()\n    }\n\n    state = {\n        showTable: true,\n        selectedUser: null,\n        dataLoaded: false,\n        currentView: \"table\"\n    }\n\n    columns = [{\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        defaultSortOrder: 'descend',\n        sorter: (a, b) => { return a.name.localeCompare(b.name, 'en') }\n    }, {\n        title: 'Scope',\n        dataIndex: 'permissionLevel',\n        filters: [{\n            text: 'Ward',\n            value: 'Ward',\n        }, {\n            text: 'Facility',\n            value: 'Facility',\n        }, {\n            text: 'LGA',\n            value: 'LGA',\n        }, {\n            text: 'State',\n            value: 'State',\n        }, {\n            text: 'National',\n            value: 'National',\n        }],\n        onFilter: (value, record) => record.permissionLevel === value,\n        filterMultiple: true,\n\n        key: 'permissionLevel',\n    }, {\n        title: \"Location\",\n        dataIndex: \"LocationName\",\n        key: \"LocationName\",\n        defaultSortOrder: 'descend',\n        sorter: (a, b) => { return a.LocationName.localeCompare(b.LocationName, 'en') }\n    }, {\n        title: \"Action\",\n        key: \"action\",\n        render: (text, record) => <Button onClick={() => { this.editUser(record.key) }}>View</Button>\n\n    }];\n\n    editUser = (id) => {\n        let newUser = dataSource.find(object => {\n            return object.Id === id\n        })\n\n        this.setState({\n            currentView: \"existing\",\n            selectedUser: newUser\n        })\n\n    }\n\n    showHideTableClass = () => {\n        return this.state.currentView === \"table\" ? \"\" : \"displayNone\"\n    }\n\n    showHideViewClass = () => {\n        return this.state.currentView === \"existing\" ? \"\" : \"displayNone\"\n    }\n\n    showTable = () => {\n        this.setState(\n            { currentView: \"table\" }\n        )\n    }\n\n    addUser = () => {\n        this.setState({\n            currentView: \"new\"\n        })\n    }\n\n    tableHidden = () => {\n        return this.state.currentView !== \"table\"\n    }\n\n    colStyle = {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 22, offset: 1 },\n        md: { span: 18, offset: 3 },\n        lg: { span: 16, offset: 4 }\n    }\n\n    render() {\n\n        return (\n            <div>\n                {/* Data not yet loaded  */}\n                <Row className=\"rowVMarginSm\" hidden={this.state.dataLoaded}>\n                    <Col {...this.colStyle}>\n\n                        <div className=\"spacing\" >\n                            <Spin size=\"large\" />\n                        </div>\n                    </Col>\n                </Row>\n\n                {/* Data loaded  */}\n                {\n                    this.state.currentView === \"table\" &&\n                    <div class=\"rowVMarginTopSm\">\n\n                        <Row className=\"rowVMarginTopSm\" gutter={16}>\n                            <Col className=\"left\" xs={{ span: 16, offset: 0 }} sm={{ span: 14, offset: 1 }} md={{ span: 10, offset: 3 }} lg={{ span: 8, offset: 4 }}>\n                            </Col>\n                            <Col className=\"right\" span={8}>\n                                <Button\n                                    onClick={this.addUser}\n                                    className={this.showHideTableClass()}\n                                    icon=\"user-add\"\n                                    type=\"primary\"\n                                >\n                                    Add User\n                            </Button>\n                            </Col>\n\n                        </Row>\n                    </div>\n\n                }\n\n                <Row className=\"rowVMarginTopSm\" gutter={16}>\n                    <Col {...this.colStyle}>\n                        <Card className=\"rowVMarginTopSm\" >\n\n                            <div className=\"rowVMarginTopSm\">\n                                <Table\n                                    dataSource={dataSource}\n                                    columns={this.columns}\n                                    className={this.showHideTableClass()}\n                                />\n\n                            </div>\n\n                            {/* Render new component to create a user as required */}\n                            {this.state.currentView !== \"new\" ?\n                                null :\n                                <div className=\"rowVMarginTopSm\">\n                                    <CreateModifyDeleteUser\n                                        showTable_f={this.showTable}\n                                        user={null}\n                                        mode=\"new\"\n                                        refreshUsers={this.populateUsers}\n                                    />\n                                </div>\n                            }\n\n                            {/* Render new component to create a user as required */}\n                            {this.state.currentView !== \"existing\" ?\n                                null :\n                                <div className=\"rowVMarginTopSm\">\n                                    <CreateModifyDeleteUser\n                                        showTable_f={this.showTable}\n                                        user={this.state.selectedUser}\n                                        mode=\"existing\"\n                                        refreshUsers={this.populateUsers}\n                                    />\n                                </div>\n                            }\n                        </Card>\n\n                    </Col>\n                </Row>\n\n            </div>\n\n        )\n    }\n}\n\nexport default User;","import React, { Component } from 'react';\n\n//antd for ui components\nimport { Card, Button, Icon, Row, Col, Timeline } from 'antd'\n\n//db\nimport db from '../Database/database'\nimport user from '../Services/User'\n\nclass Sync extends Component {\n\n    state = {\n        showProgress: false,\n        DataDownloads: []\n    }\n\n    startDownload = () => {\n        let rootURL = \"https://essd-backend-dev.azurewebsites.net/api\"\n        //let rootURL = \"http://localhost:9000/api\"\n        let downloads = [\n            {\n                //Todo: scope the user requests as per the user's roles\n                dataName: \"user\",\n                callback: (data) => {\n                    return new Promise((resolve) => {\n                        db.User.clear().then(() => {\n                            db.User.bulkAdd(data.users).then(() => {\n                                resolve(true)\n                            }).catch((e) => {\n                                console.log(e)\n                                resolve(false)\n                            })\n                        })\n                    })\n                },\n                url: `${rootURL}/users/getAllUsers/${this.state.user.Id}`\n            },\n            {\n                //Todo: Scope the location request as per the user's authorized locations\n                dataName: \"location\",\n                callback: (data) => {\n                    return new Promise((resolve) => {\n                        Promise.all([db.State.clear(), db.LGA.clear(), db.Ward.clear(), db.Facility.clear()]).then(\n                            Promise.all([\n                                db.State.bulkAdd(data.State),\n                                db.LGA.bulkAdd(data.LGA),\n                                db.Ward.bulkAdd(data.Ward),\n                                db.Facility.bulkAdd(data.Facility),\n                            ]).then(\n                                resolve(true)\n                            ).catch(\n                                resolve(false)\n                            )\n                        ).catch(\n                            resolve(false)\n                        )\n                    })\n                },\n                url: `${rootURL}/locationsHierarchy`\n            },\n            {\n                dataName: \"metric values\",\n                callback: (data) => {\n                    return new Promise((resolve) => {\n                        Promise.all([db.Data.clear()]).then(\n                            Promise.all([\n                                db.Data.bulkAdd(data.Data)\n                            ]).then(\n                                resolve(true)\n                            ).catch(\n                                resolve(false)\n                            )\n                        ).catch(\n                            resolve(false)\n                        )\n                    })\n                },\n                //TODO: Scope URL to user \n                url: `${rootURL}/data/location?state=Zamfara&lga=Anka&ward=Bagega`\n            },\n            {\n                dataName: \"metric names\",\n                callback: (data) => {\n                    return new Promise((resolve) => {\n                        Promise.all([db.Groups.clear(), db.Sets.clear(), db.Metrics.clear()]).then(\n                            Promise.all([\n                                db.Groups.bulkAdd(data.Groups),\n                                db.Sets.bulkAdd(data.Sets),\n                                db.Metrics.bulkAdd(data.Metrics),\n                            ]).then(\n                                resolve(true)\n                            ).catch(\n                                resolve(false)\n                            )\n                        ).catch(\n                            resolve(false)\n                        )\n                    })\n                },\n                url: `${rootURL}/data/hierarchy`\n            }\n        ]\n        let dl = []\n        for (let i = 0; i < downloads.length; i++) {\n            let dl_i = downloads[i]\n            dl.push(\n                <DataProgress key={i} dataName={dl_i.dataName} url={dl_i.url} callback={dl_i.callback}></DataProgress>\n            )\n        }\n\n        //Download or upload dashboard data\n        if (!this.state.downloadDashboard) {\n            let url = `${rootURL}/dashboard/updateDashboard`\n            let params = {\n                method: \"PUT\",\n                // body:JSON.stringify({\n                //     UserId: this.state.user.Id,\n                //     DashboardJson: this.state.dashboardData\n                // })\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({\n                    UserId: this.state.user.Id,\n                    DashboardJson: JSON.stringify(this.state.dashboardData)\n                })\n            }\n            console.log(params.body)\n            let callback = (info) => {\n                return new Promise(resolve => {\n                    console.log(info)\n                    resolve(true)\n                })\n            }\n            dl.push(\n                <DataProgress key={dl.length} dataName=\"dashboard information\" url={url} callback={callback} params={params} />\n            )\n        } else {\n            let url = `${rootURL}/dashboard/${this.state.user.Id}`\n            let callback = (_dashboard) => {\n                return new Promise(resolve => {\n                    //The naming scheme needs to be cleaned up a bit here...\n                    let dashboard = _dashboard.dashboard\n                    db.Dashboard.clear().then(() => {\n                        if (!dashboard.hasOwnProperty(\"error\")) {\n                            let data = JSON.parse(dashboard.DashboardJson)\n                            db.Dashboard.bulkAdd(data.dashboards).then(() => {\n                                resolve(true)\n                            })\n                        } else {\n                            //User has no dashboard\n                            resolve(true)\n                        }\n                    })\n                })\n\n            }\n            dl.push(\n                <DataProgress key={dl.length} dataName=\"dashboard information\" url={url} callback={callback} />\n            )\n        }\n\n        this.setState({\n            DataDownloads: dl,\n            showProgress: true\n        })\n    }\n\n    componentDidMount() {\n        db.Dashboard.toArray().then(dashboards => {\n            if (dashboards.length === 0) {\n                user.user().then(u => {\n                    this.setState({\n                        user: u,\n                        ready: true,\n                        downloadDashboard: true\n                    })\n                })\n            } else {\n                user.user().then(u => {\n                    this.setState({\n                        user: u,\n                        ready: true,\n                        downloadDashboard: false,\n                        dashboardData: {\n                            dashboards: dashboards\n                        }\n                    })\n                })\n            }\n\n        })\n\n    }\n\n    render() {\n        return (\n            <div className=\"center\">\n                <Card className=\"rowVMarginTopSm\" >\n\n                    <Row className=\"rowVMarginTopSm\">\n                        <Col xs={24} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 2 }} lg={{ span: 16, offset: 4 }} xl={{ span: 16, offset: 4 }}>\n                            <p>\n                                <Icon\n                                    type=\"wifi\" />&nbsp;\n                    Please note: you must have an internet connection.\n                        </p>\n                            {\n                                this.state.ready &&\n                                <Button type=\"primary\" onClick={this.startDownload}>Start Sync</Button>\n                            }\n\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col hidden={!this.state.showProgress} xs={{ span: 22, offset: 1 }} sm={{ span: 20, offset: 2 }} md={{ span: 12, offset: 6 }} lg={{ span: 10, offset: 7 }} xl={{ span: 8, offset: 8 }}>\n                            <Timeline className=\"rowVMarginTopSm\">\n                                {this.state.DataDownloads}\n                            </Timeline>\n                        </Col>\n\n                    </Row>\n                </Card>\n            </div>\n        )\n    }\n}\n\n/**\n * Pass a callback that returns a promise that resolves to true or false\n * so the dataProgress knows if it succeeded or failed\n */\nclass DataProgress extends Component {\n\n    state = {\n        pending: true,\n        failed: false\n    }\n\n    Icon = () => {\n        if (this.state.pending === true) return this.pendingIcon\n        if (this.state.failed === true) return this.failedIcon\n        return this.completeIcon\n    }\n\n    pendingIcon = <Icon type=\"sync\" spin />\n\n    completeIcon = <Icon type=\"check-circle\" className=\"override-background\" />\n\n    failedIcon = <Icon type=\"close-circle\" />\n\n    Message = () => {\n        if (this.state.pending === true) return this.pendingMessage\n        if (this.state.failed === true) return this.failedMessage\n        return this.completeMessage\n    }\n\n    pendingMessage = `Downloading ${this.props.dataName} data`\n\n    failedMessage = `Failed to download ${this.props.dataName} data. Please try again later`\n\n    completeMessage = `Successfully updated ${this.props.dataName} data`\n\n    componentDidMount() {\n        if (this.props.params) {\n            this.get(this.props.url, this.props.callback, this.props.params)\n        } else {\n            this.get(this.props.url, this.props.callback)\n        }\n\n    }\n\n    get = async (url, callback, params) => {\n        let promise = await fetch(url, params)\n        promise.json().then(data => {\n            callback(data).then((result => {\n                if (result) {\n                    this.setState({\n                        pending: false,\n                        failed: false\n                    })\n                } else {\n                    this.setState({\n                        pending: false,\n                        failed: true\n                    })\n                }\n            }))\n        })\n    }\n\n    render() {\n        return (\n            <Timeline.Item\n                dot={this.Icon()}\n            >\n                {this.Message()}\n            </Timeline.Item>)\n    }\n}\nexport default Sync;\n","import React, { Component } from 'react';\n\nimport { Select, Button, Divider } from 'antd'\nimport LocationSelector from \"../LocationSelector/LocationSelector\"\n\n\n\n/**\n * Saves the the location selected\n * @param {parentHandler} - Function passed in by the parent that takes a LocationObject with props {Id, Name, Type} and updates the parent UI\n * @param {initialLocation}\n */\n\nclass LocationWrapper extends Component {\n\n    state = {\n        location: this.props.initialLocation\n    }\n    componnentDidMount = () => {\n        this.setState({\n            location: this.props.initialLocation\n        });\n    }\n    notifyParent = (save) => {\n        if (this.props.parentHandler !== undefined && this.props.parentHandler !== null) {\n            this.props.parentHandler(this.state.location, save);\n        }\n    }\n    updateLocation = (location) => {\n        this.setState({ location: location })\n    }\n    saveLocation = () => {\n        this.notifyParent(true);\n    }\n    cancelLocation = () => {\n        this.notifyParent(false);\n    }\n\n    render() {\n        return (\n            <div>\n                <LocationSelector parentHandler={this.updateLocation} showLocation={false} initialLocation={\n                    {\n                        Id: \"1215\",\n                        Type: \"Facility\"\n                    }\n                }//this.state.location}>\n                ></LocationSelector>\n                <Divider />\n\n                <Button onClick={this.saveLocation}>Save</Button>\n                <Button onClick={this.cancelLocation}>Cancel</Button>\n\n            </div>\n        )\n    }\n}\nexport default LocationWrapper;\n","import React, { Component } from 'react';\nimport { Button, List, Card, Row, Col, Select, Divider, Avatar, Menu, Icon, Dropdown, message, DatePicker } from 'antd'\n\nimport './Analysis.css';\nimport LocationSelector from \"../LocationSelector/LocationSelector\"\nimport LocationWrapper from \"../Analysis/LocationWrapper\"\nimport MetricSelector from \"../MetricSelector/MetricSelector\"\nimport Visualizer from '../Visualizer/Visualizer';\nimport VisualizerManager from '../Visualizer/VisualizerManager'\nimport db from '../Database/database';\nimport moment from 'moment';\nimport RangeSelector from '../RangeSelector/RangeSelector'\n\nvar initialMetric = {\n    GroupValue: \"1191|Facility Attendance|Group\",\n    SetValue: \"-3-1191|All Facility Attendance (Distribution)|Group\",\n    MetricValue: \"\"\n};\nclass Analysis extends Component {\n\n    state = {\n        metricData: {\n            GroupValue: \"1191|Facility Attendance|Group\",\n            SetValue: \"-3-1191|All Facility Attendance (Distribution)|Group\",\n            MetricValue: \"\"\n        },\n        initLoading: false,\n        loading: false,\n        locationData: {\n        },//locationData,\n        showTable: true,\n        selectedUser: null,\n        dataLoaded: false,\n        currentView: \"table\",\n        selectedLocation: null,\n        addingLocation: false,\n        Dates: { StartDate: new Date(\"2015-01-01T00:00:00.000Z\"), EndDate: new Date(\"2019-01-01T00:00:00.000Z\") },\n        arr: null,\n        dataForSingleLocation: [],\n        dataForAllLocations: [],\n        showGraph: false,\n        graphType: \"Group\",\n        data: null\n    }\n    generateGraph = () => {\n        var locationData = [];\n        //convert to array\n        for (var key in this.state.locationData) {\n            locationData.push(this.state.locationData[key]);\n        }\n        if (this.state.metricData.Type == \"Metric\") {\n            this.createMetricGraph(locationData);\n\n        } else if (this.state.metricData.Type == \"Set\") {\n            this.createSetGraph(locationData);\n\n        } else if (this.state.metricData.Type == \"Group\") {\n\n        }\n\n        this.setState({\n            currentView: \"graph\"\n        })\n    }\n    formatDate = (date) => {\n        //Format into YYYY-MM-DDT:00:00:00.000Z\n        let dateString = `${date.getUTCFullYear()}-${(\"0\" + (date.getUTCMonth() + 1)).slice(-2)}-${(\"0\" + date.getUTCDate()).slice(-2)}T00:00:00.000Z`\n        return dateString\n    }\n    createMetricGraph = (locationData) => {\n        var dataForAllLocations = [];\n\n        let context = {\n            dataForAllLocations: dataForAllLocations\n        };\n\n        this.forEachPromise(locationData, this.getDataPromiseByLocation, context).then(() => {\n            console.log(this.state.metricData.Name);\n            this.setState({\n                showGraph: true,\n                currentView: \"graph\",\n                graphType: \"Set\",\n                data: {\n                    name: this.state.metricData.Name,\n                    data: context.dataForAllLocations,\n                }\n            });\n        });\n    }\n    createSetGraph = (locationData) => {\n        var dataForAllLocations = [];\n        var legend = [];\n\n        this.getMetricsPromise(this.state.metricData.Id).then((metrics) => {\n            let context = {\n                dataForAllLocations: dataForAllLocations,\n                metrics: metrics,\n                locations: legend\n            };\n            this.forEachPromise(locationData, this.getLocationPromise, context).then(() => {\n                console.log(context.locations);\n                console.log(context.dataForAllLocations);\n                this.setState({\n                    showGraph: true,\n                    currentView: \"graph\",\n                    graphType: \"Group\",\n                    data: {\n                        data: context.dataForAllLocations,\n                        legendTitles: context.locations\n                    }\n                });\n                console.log(\"donezo\");\n            })\n        })\n\n    }\n\n    forEachPromise = (items, fn, context) => {\n        return items.reduce(function (promise, item) {\n            return promise.then(function () {\n                return fn(item, context);\n            });\n        }, Promise.resolve());\n    }\n\n    getLocationPromise = (location, context) => {\n        return new Promise((resolve, reject) => {\n            let context2 = {\n                location: location,\n                dataForAllLocations: context.dataForAllLocations,\n                dataForSingleLocation: []\n            }\n            this.forEachPromise(context.metrics, this.getDataPromise, context2).then(() => {\n                context.dataForAllLocations.push(context2.dataForSingleLocation);\n                context.locations.push(context2.location.Name)\n            }).then(() => {\n                resolve(true);\n            });\n        })\n    }\n    getMetricsPromise = (setId) => {\n        return db.Metrics.where(\"parentId\").equalsIgnoreCase(setId).toArray();\n    }\n    getDataPromise = (metric, context) => {\n        return new Promise((resolve, reject) => {\n            db.Data.where(\n                [\"FacilityId\", \"MetricId\", 'Time']\n            ).between(\n                [context.location.Id, metric.Id, this.formatDate(this.state.Dates.StartDate)],\n                [context.location.Id, metric.Id, this.formatDate(this.state.Dates.EndDate)],\n                true,\n                true\n            ).toArray().then((arr) => {\n                let sum = 0;\n                arr.forEach((point) => {\n                    sum += parseInt(point.Value);\n                })\n                context.dataForSingleLocation.push({\n                    Value: sum,\n                    Metric: metric.Name\n                });\n                console.log(\"Adding Data from current Metric: \" + metric.Id + \", value: \" + sum);\n                resolve(true);\n            })\n        })\n    }\n    getDataPromiseByLocation = (location, context) => {\n        return new Promise((resolve, reject) => {\n            db.Data.where(\n                [\"FacilityId\", \"MetricId\", 'Time']\n            ).between(\n                [location.Id, this.state.metricData.Id, this.formatDate(this.state.Dates.StartDate)],\n                [location.Id, this.state.metricData.Id, this.formatDate(this.state.Dates.EndDate)],\n                true,\n                true\n            ).toArray().then((arr) => {\n                let sum = 0;\n                arr.forEach((point) => {\n                    sum += parseInt(point.Value);\n                })\n                context.dataForAllLocations.push({\n                    Value: sum,\n                    Metric: location.Name\n                });\n\n                console.log(\"Adding Data from current Location: \" + location.Id + \", value: \" + sum);\n                resolve(true);\n            })\n\n        })\n    }\n    saveGraph = () => {\n        //Get Number of Dashboards Currently\n        db.Dashboard.toCollection().last().then(object => {\n            let key = 0\n            if (object) {\n                key = object.Id + 1\n            }\n            //Prepare Save Object\n            let newGraph = {\n                Id: key,\n                Title: \"Compare - \" + this.state.metricData.Name,\n                Locations: this.state.locationData,\n                Dates: this.state.Dates,\n                Data: this.state.data,\n                MetricData: this.state.metricData,\n                Compare: true,\n                GraphType: this.state.graphType\n            }\n\n            db.Dashboard.put(newGraph).then(() => {\n                console.log(newGraph);\n                message.success(\"Successfully saved to dashboard.\")\n            })\n        })\n    }\n\n    updateRawData = (rawData) => {\n        this.setState({\n            RawData: rawData\n        })\n    }\n\n    updateData = (data) => {\n        this.setState({ metricData: data })\n    }\n    updateLocation = (location, save) => {\n        if (save) {\n            let tempData = this.state.locationData;\n            if (!this.state.addingLocation) {\n                delete tempData[this.state.selectedLocation.Type + \"-\" + this.state.selectedLocation.Id];\n            }\n            tempData[location.Type + \"-\" + location.Id] = location;\n            this.setState({ selectedLocation: location });\n\n            message.success('Location Saved');\n            this.setState({ locationData: tempData });\n        } else {\n            message.warning('Location Not Saved');\n        }\n        this.setState({\n            currentView: \"table\"\n        })\n    }\n    addLocation = () => {\n        this.state.selectedLocation = null;\n        this.setState({\n            addingLocation: true,\n            currentView: \"existing\"\n        })\n    }\n    deleteLocation = (location) => {\n        let locationData = this.state.locationData;\n        delete locationData[location.Type + \"-\" + location.Id]; //might have to edit\n        this.setState({\n            locationData: locationData,\n            selectedLocation: null,\n            currentView: \"table\"\n        });\n\n        message.success(\"Location Deleted\");\n    }\n    editLocation = (location) => {\n        this.setState({\n            addingLocation: false,\n            selectedLocation: location,\n            currentView: \"existing\"\n        })\n\n    }\n    showTable = () => {\n        this.setState(\n            { currentView: \"table\" }\n        )\n    }\n    showHideTableClass = () => {\n        return this.state.currentView === \"table\" ? \"\" : \"displayNone\"\n    }\n\n    updateDates =(dates)=>{\n        this.setState({Dates: dates});\n    }\n    render() {\n        const { initLoading, loading, list } = this.state;\n        const loadMore = !initLoading && !loading ? (\n            <div className=\"center\" >\n                <Button onClick={this.addLocation}>Add Location</Button>\n            </div>\n        ) : null;\n\n        return (\n            <div>\n                {\n                    this.state.currentView === \"table\" &&\n                    <div className=\"center\">\n                        <Row className={``} gutter={16}>\n                            <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                                <Card className=\"left\" size=\"medium\" title=\"Select Metric\">\n                                    <MetricSelector parentHandler={this.updateData}\n                                        initialData={this.state.metricData}\n                                    ></MetricSelector>\n\n                                </Card>\n                            </Col>\n                        </Row>\n                        <Divider />\n                        <Row className={``} gutter={16}>\n                            <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                                <Card className=\"left\" size=\"medium\" title=\"Select Date\">\n                                    <RangeSelector\n                                        parentHandler={this.updateDates}\n                                        initialData={\n                                            {\n                                                Dates: this.state.Dates\n                                            }\n                                        } />\n                                </Card>\n                            </Col>\n                        </Row>\n\n                        <Divider />\n                        <Row className={``} gutter={16}>\n                            <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                                <Card className=\"left\" size=\"medium\" title=\"Select Location\">\n                                    <div className=\"center\" >\n                                        <Button type=\"primary\" block onClick={this.addLocation}>Add Location</Button>\n                                    </div>\n                                    {this.state.locationData &&\n                                        <List\n                                            itemLayout=\"horizontal\"\n                                            size=\"large\"\n                                            pagination={{\n                                                onChange: (page) => {\n                                                    console.log(page);\n                                                },\n                                                pageSize: 4,\n                                            }}\n                                            dataSource={Object.values(this.state.locationData)}\n                                            renderItem={item => (\n                                                <List.Item\n                                                    key={item.facility}\n                                                    actions={[\n                                                        <Button onClick={() => { this.editLocation(item) }} style={{ marginLeft: 8 }}>\n                                                            Edit <Icon type=\"edit\" />\n                                                        </Button>,\n                                                        <Button onClick={() => { this.deleteLocation(item) }} style={{ marginLeft: 8 }}>\n                                                            Delete <Icon type=\"delete\" />\n                                                        </Button>\n                                                    ]}>\n                                                    <List.Item.Meta\n                                                        title={<a href=\"https://ant.design\">{item.Name}</a>}\n                                                        description={\n                                                            \"Location Type: \" + item.Type\n                                                        }\n                                                    />\n                                                </List.Item>\n                                            )}\n                                        />\n                                    }\n                                </Card>\n                            </Col>\n                        </Row>\n\n                        <Divider />\n                        <Row>\n                            <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                                <div className=\"center\" >\n                                    <Button type=\"primary\" block onClick={this.generateGraph}>Generate Graph</Button>\n                                </div>\n                            </Col>\n\n                        </Row>\n                        <Divider />\n\n\n                    </div>\n                }\n\n                {this.state.currentView !== \"existing\" ?\n                    null :\n                    <div className=\"\">\n                        <Row className={``} gutter={16}>\n                            <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                                <Card className=\"left\" size=\"medium\" title=\"Select Location\">\n                                    <LocationWrapper\n                                        parentHandler={this.updateLocation} initialLocation={this.state.selectedLocation}\n                                    />\n                                </Card>\n                            </Col>\n                        </Row>\n\n                    </div>\n                }\n                {this.state.currentView !== \"graph\" ?\n                    null :\n                    <div className=\"\">\n\n                        <Card className=\"left\" size=\"medium\" title=\"Graph\">\n                            <Button onClick={this.showTable}>\n                                Back\n                            </Button>\n                            <Divider />\n                            <Button onClick={this.saveGraph}>\n                                Save Graph <Icon type=\"save\" />\n                            </Button>\n\n                            <Visualizer\n                                type={this.state.graphType}\n                                show={this.state.showGraph}\n                                data={this.state.data}\n                            />\n                        </Card>\n\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Analysis;\n","import React, { Component } from 'react';\nimport { Row, Col, Table, Card, Alert,Divider } from 'antd'\nimport LocationSelector from '../LocationSelector/LocationSelector';\nimport db from '../Database/database'\n\nconst columns = [{\n    title: 'Location',\n    dataIndex: 'Name',\n    key: 'Location',\n    defaultSortOrder: 'ascend',\n    sorter: (a, b) => { return a.Name.localeCompare(b.Name, 'en') }\n}, {\n    title: 'Data Points',\n    dataIndex: 'MetricsReportedInLastYear',\n    key: 'Reports',\n    sorter: (a, b) => { return a.MetricsReportedInLastYear - b.MetricsReportedInLastYear }\n}, {\n    title: 'Percent',\n    dataIndex: 'Score',\n    key: 'Score',\n    sorter: (a, b) => { return a.MetricsReportedInLastYear - b.MetricsReportedInLastYear }\n}];\n\n\nclass DataQuality extends Component {\n\n    state = {\n        ready: false\n    }\n\n    setLocation = (locationData) => {\n        this.setState({ location: locationData })\n        if (locationData.Type === \"Ward\") this.getQualityOfData(locationData.Id)\n    }\n\n    getQualityOfData = (id) => {\n        db.Facility.where({\n            parentId: id\n        }).toArray().then(arr => {\n            const divisor = 512 * 12\n            arr.forEach(el => {\n                el.Score = `${(el.MetricsReportedInLastYear / divisor * 100).toFixed(0)}%`\n                el.key = el.Id\n            })\n            this.setState({\n                data: arr,\n                ready: true\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Alert message=\"This tool reports the amount of data reported in the last year by each facility in a given ward. Use this to identify the facilities that need the most support in the monthly data collection process.\" banner closable />\n\n                <Row className=\"rowVMarginTopSm\" gutter={16}>\n                    <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                        <Card className=\"rowVMarginTopSm\" >\n                            <h3>\n                                Select Location\n                        </h3>\n                        <Divider/>\n                            <LocationSelector\n                                parentHandler={this.setLocation}\n                                initialLocation={{\n                                    Type: \"Ward\",\n                                    Id: \"386\"\n                                }}\n                            />\n\n                        </Card></Col></Row>\n\n                <Row className=\"rowVMarginTopSm\" gutter={16}>\n                <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                        {this.state.ready &&\n                                <Table dataSource={this.state.data} columns={columns}></Table>\n}\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default DataQuality","import React, { Component } from 'react';\n\n//Routing\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\"\n\n//antd for ui components\nimport { Drawer, Icon, Layout, Menu, Divider } from 'antd'\n\n//Nav Bar\nimport NavigationMenu from './NavigationMenu/NavigationMenu'\n\n//pages\nimport Dashboard from './Dashboard/Dashboard'\nimport SampleHome from './SampleHome/SampleHome'\nimport Account from './Account/Account'\nimport User from './Users/Users'\nimport Sync from './Sync/Sync'\nimport Analysis from './Analysis/Analysis'\nimport DataQuality from './DataQuality/DataQuality'\n\nimport userService from './Services/User'\n\nimport './App.css';\n\nconst {\n\tHeader, Footer, Content,\n} = Layout;\n\nconst pathNamesAndTitles = {\n\t\"/\": \"Home\",\n\t\"/account\": \"Account\",\n\t\"/dashboard\": \"Dashboard\",\n\t\"/analysis\": \"Analysis\",\n\t\"/users\": \"Users\",\n\t\"/sync\": \"Synchronize Data\",\n\t\"/health\": \"Data Health\"\n}\n\nclass App extends Component {\n\n\tgetTitle = () => {\n\t\tlet pathName = window.location.pathname\n\t\tif (pathName in pathNamesAndTitles) return pathNamesAndTitles[pathName]\n\t\treturn \"Hmm...this page has no title\"\n\t}\n\n\tstate = {\n\t\tdrawerOpen: false,\n\t\tuser: null\n\t}\n\n\topenDrawer = () => {\n\t\tthis.setState({\n\t\t\tdrawerOpen: true,\n\t\t})\n\t}\n\n\tcloserDrawer = () => {\n\t\tthis.setState({\n\t\t\tdrawerOpen: false,\n\t\t})\n\t}\n\n\tcomponentWillMount() {\n\t\tuserService.user().then((userObj) => {\n\t\t\tthis.setState({\n\t\t\t\tuser: userObj\n\t\t\t})\n\t\t\tconsole.log(this.state.user);\n\t\t});\n\t}\n\n\tupdateDrawer = () => {\n\t\treturn userService.user().then((result) => {\n\t\t\tthis.setState({\n\t\t\t\tuser: result\n\t\t\t})\n\t\t});\n\t}\n\n\tlogout = async () => {\n\t\tthis.setState({\n\t\t\tuser: null\n\t\t});\n\t\tawait userService.logout();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<Layout>\n\t\t\t\t\t{this.state.user == null ? \"\" :\n\t\t\t\t\t\t<Drawer\n\t\t\t\t\t\t\ttitle=\"Menu\"\n\t\t\t\t\t\t\tplacement=\"left\"\n\t\t\t\t\t\t\tclosable={true}\n\t\t\t\t\t\t\tonClose={this.closerDrawer}\n\t\t\t\t\t\t\tvisible={this.state.drawerOpen}>\n\t\t\t\t\t\t\t<Menu\n\t\t\t\t\t\t\t\tonClick={this.closerDrawer}>\n\t\t\t\t\t\t\t\t{/* <Menu.Item key=\"1\">\n\t\t\t\t\t\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t\t\t\t\t\t<Icon type=\"home\" />Home\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Menu.Item> */}\n\t\t\t\t\t\t\t\t<Menu.Item key=\"2\">\n\t\t\t\t\t\t\t\t\t<Link to=\"/dashboard\">\n\t\t\t\t\t\t\t\t\t\t<Icon type=\"area-chart\" />Dashboard\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t<Menu.Item key=\"3\">\n\t\t\t\t\t\t\t\t\t<Link to=\"/analysis\">\n\t\t\t\t\t\t\t\t\t\t<Icon type=\"stock\" />Analysis\n\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t<Menu.Item key=\"4\">\n\t\t\t\t\t\t\t\t\t<Link to=\"/health\">\n\t\t\t\t\t\t\t\t\t\t<Icon type=\"heart\" />Data Health\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t<Menu.Item key=\"5\">\n\t\t\t\t\t\t\t\t\t<Link to=\"/account\">\n\t\t\t\t\t\t\t\t\t\t<Icon type=\"user\" />Account\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.state.user !== null && this.state.user.UserType !== \"admin\" ? \"\" :\n\t\t\t\t\t\t\t\t\t\t<Menu.Item key=\"6\">\n\t\t\t\t\t\t\t\t\t\t\t<Link to=\"/users\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Icon type=\"team\" />Users\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t<Menu.Item key=\"7\">\n\t\t\t\t\t\t\t\t\t<Link to=\"/sync\">\n\t\t\t\t\t\t\t\t\t\t<Icon type=\"sync\" />Synchronize Data\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t{this.state.user == null ? \"\" :\n\t\t\t\t\t\t\t\t\t<Menu.Item key=\"8\" onClick={this.logout}>\n\t\t\t\t\t\t\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t\t\t\t\t\t\t<Icon type=\"poweroff\" />Logout\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Menu>\n\t\t\t\t\t\t</Drawer>\n\t\t\t\t\t}\n\t\t\t\t\t<Header style={{ padding: 0 }}>\n\t\t\t\t\t\t<NavigationMenu\n\t\t\t\t\t\t\tdrawerOpen={this.state.drawerOpen}\n\t\t\t\t\t\t\topenDrawer_f={this.openDrawer}\n\t\t\t\t\t\t\ttitle={this.getTitle()}>\n\t\t\t\t\t\t</NavigationMenu>\n\t\t\t\t\t</Header>\n\t\t\t\t\t<Content className=\"min-height-wrapper\">\n\t\t\t\t\t\t<Route exact path=\"/\" render={(props) => <SampleHome {...props} updateDrawer={this.updateDrawer} />} />\n\t\t\t\t\t\t<Route path=\"/dashboard\" component={Dashboard} />\n\t\t\t\t\t\t<Route path=\"/analysis\" component={Analysis} />\n\t\t\t\t\t\t<Route path=\"/account\" component={Account} />\n\t\t\t\t\t\t<Route path=\"/users\" component={User} />\n\t\t\t\t\t\t<Route path=\"/sync\" component={Sync} />\n\t\t\t\t\t\t<Route path=\"/health\" component={DataQuality} />\n\t\t\t\t\t</Content>\n\t\t\t\t\t<Footer>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tESSD is an <a href = \"https://github.com/Epidemic-Surveillance-System-Dashboard/\" target = \"_blank\" rel=\"noopener noreferrer\">open source capstone project</a> by Aayush Bahendwar, Jackie Ngo, Laban Lin, and Patrick Lee.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tIt is built with components by \n\t\t\t\t\t\t\t<a href = \"https://ant.design/\" target = \"_blank\" rel=\"noopener noreferrer\"> Ant Financial </a>\n\t\t\t\t\t\t\tand powered by \n\t\t\t\t\t\t\t<a href = \"https://reactjs.org/\" target = \"_blank\" rel=\"noopener noreferrer\"> React </a>.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</Footer>\n\t\t\t\t</Layout>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nserviceWorker.register();\n"],"sourceRoot":""}