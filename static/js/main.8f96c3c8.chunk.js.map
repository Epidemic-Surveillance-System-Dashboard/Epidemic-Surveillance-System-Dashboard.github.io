{"version":3,"sources":["NavigationMenu/NavigationMenu.js","Visualizer/Visualizer.js","Database/database.js","Visualizer/VisualizerManager.js","LocationSelector/LocationSelector.js","MetricSelector/MetricSelector.js","Graph/SaveGraph.js","RangeSelector/RangeSelector.js","Graph/CreateGraph.js","Dashboard/Dashboard.js","Services/User.js","Login/Login.js","SampleHome/SampleHome.js","Users/CreateModifyDeleteUser.js","Account/Account.js","Users/Users.js","Sync/Sync.js","Analysis/LocationWrapper.js","Analysis/Analysis.js","DataQuality/DataQuality.js","App.js","serviceWorker.js","index.js"],"names":["App","rightButtonRenderer","_this","props","rightButtonAction","rightButtonType","react_default","a","createElement","es_button","type","onClick","className","icon","row","col","span","this","openDrawer_f","title","Component","strokeColors","averageColor","colorCounter","monthNames","Visualizer","getNextColor","color","length","resetColor","startDate","mockMetric","name","location","state","lga","ward","facility","data","Month","Year","Value","Math","floor","random","mockSet","endDate","Metric","mockGroup","legendTitles","createBarSeriesData","rawData","map","filter","element","y","x","barSeries","es","legend","orientation","items","createBarSeriesAverage","sum","count","forEach","el","average","lineData","strokeDasharray","renderGraph","graph","MultipleBar","Histogram","Line","defaults","width","height","xDistance","barChartLeftMargin","maxLength","i","j","round","result","group","push","key","createMultipleBarSeries","yType","margin","left","redundantTitle","replace","trim","concat","barSeriesData","averageLine","createHistogramData","elements","series","dataForYear","hasOwnProperty","Date","Time","Number","parseInt","sort","b","currentYear","blankData","blankDataSeries","colorType","getUTCFullYear","getUTCMonth","marks","legendElement","createLineSeriesWithLegend","empty","description","xType","_this2","show","Object","keys","undefined","db","Dexie","version","stores","Facility","Ward","LGA","State","Groups","Sets","Metrics","Data","User","LocalUser","Dashboard","DashboardData","VisualizerManager","ready","checkInputs","valid","validInputs","LocationId","value","LocationType","includes","DataId","DataType","StartDate","prototype","toString","call","EndDate","isSimpleData","formatDate","date","slice","getUTCDate","getSimpleData","where","between","toArray","arr","setState","graphType","getComplexData","RawData","MetricValue","charAt","SetValue","Title","queryComplexData","formatDateForRemoteQuery","period","url","rootURL","DataPresentation","console","log","fetch","then","stream","json","parseFloat","Total","titleIndex","d","setUTCMonth","splice","ParentHandler","setStateFromProps","callback","LocationName","Location","Name","Id","Type","TotalOrDistribution","Dates","run","prevProps","spin","src_Visualizer_Visualizer","hierarchyLevels","Option","es_select","style","LocationSelector","findAllLocations","Promise","resolve","National","StateList","LGAList","WardList","FacilityList","enabledDisabledLists","selectedLocation","componentDidUpdate","_callee","oldProps","regenerator_default","wrap","_context","prev","next","disabled","enableDisableLists","stop","componentWillMount","setLocations","findIndexForLocationType","locationType","findIndex","_callee2","maxScope","initialLocation","_context2","initLocationIndex","locations","getLocationHierarchyForInitLocation","setLocationState","_callee3","currentIndex","currentLocationId","completionCallback","_context3","abrupt","findLocationByQuery","sent","parentId","objectSpread","notifyParent","updateList","handleChange","level","_this$setState","_this$setState2","currentLevelIndex","currentLevel","parseLocation","defineProperty","_loop","statePropertyName","_callee4","levelIndex","callBack","list","listName","queryProperty","aboveLevel","aboveLevelId","optionsList","_context4","parentHandler","queryParams","valueArr","split","placeholder","optionFilterProp","defaultValue","showSearch","onChange","hidden","showLocation","MetricSelector","findAll","Group","Set","GroupList","SetList","MetricList","selectedData","componentDidMount","setInitialDataState","initialData","getValueForInitialDataProperty","propName","p","parseData","createLocationObject","typeID","totalOrDistribution","nextType","GroupValue","totalString","distributionString","aboveName","findByQuery","MetricSelector_Option","showLabel","SaveGraph","saveGraph","toCollection","last","object","newGraph","Locations","put","message","success","MonthPicker","RangeSelector","plusOne","num","dateToString","getFullYear","getMonth","getDay","dateString","_this3","_this4","moment","startDateOnChange","endDateOnChage","CreateGraph","updateRawData","updateLocation","updateData","updateDates","dates","loc","obj","getTitle","card","size","gutter","src_LocationSelector_LocationSelector","divider","src_MetricSelector_MetricSelector","src_RangeSelector_RangeSelector","Visualizer_VisualizerManager","Graph_SaveGraph","fullSize","graphOpenCloseState","graphDataLoaded","related","relatedGraphs","prevScollPos","currentView","fullSizeOrListChanged","e","target","toggleGraph","copy","newVal","open","anyOpen","text","toggleAllGraphs","openState","createCollapseExpandButton","getFirstLocation","loadGraphsFromDB","visibility","showInFilter","graphData","findAllGraphs","item","findRelatedGraphs","allData","relatedFound","metricData","toggleViewRelated","window","scrollTo","dispatchEvent","Event","pageYOffset","processFoundData","createViewRelatedButton","createDeleteButton","popconfirm","placement","okText","cancelText","onConfirm","deleteGraph","processedRelatedData","temp","JSON","parse","stringify","delete","renderRelated","es_list","itemLayout","dataSource","renderItem","item1","Item","Meta","assign","itemHasCompare","showWhenCurrentViewIs","viewType","classNames","showWhenCurrentViewIsNot","renderGraphs","actions","toUTCString","substring","GraphType","setView","viewName","xs","offset","sm","md","lg","Graph_CreateGraph","userService","login","email","password","reject","loginApiRoute","process","method","headers","Content-Type","body","Email","Password","userJsonObj","clear","add","user","catch","logout","Login","handleInput","property","preTab","minWidth","textAlign","UserService","updateDrawer","history","colStyle","input","addonBefore","withRouter","userObj","src_Login_Login","userFields","CreateModifyDeleteUser","inputLabelTab","mode","userChanged","locationDisabled","loggedInUser","isUser","confirmDelete","passedUser","refreshUsers","back","error","adminFeatures","showTable_f","inputChanged","stateName","userInfo","userInformationChanged","basicFeatures","array","featureName","featureNameKey","allUserTypeOptions","UserType","handleUserTypeSelect","modifyControls","enableEditing","cancelEditing","save","computedState","u","userType","changed","successMessage","errorMessage","successHandler","userObject","Error","newProps","userState","Account","Users_CreateModifyDeleteUser","populateUsers","FirstName","LastName","permissionLevel","toUpperCase","lastNameCompare","localeCompare","showTable","selectedUser","columns","dataIndex","defaultSortOrder","sorter","filters","onFilter","record","filterMultiple","render","editUser","id","newUser","find","showHideTableClass","showHideViewClass","addUser","tableHidden","table","Sync","showProgress","DataDownloads","startDownload","downloads","dataName","bulkAdd","users","all","dl","dl_i","Sync_DataProgress","downloadDashboard","_dashboard","dashboard","DashboardJson","dashboards","params","UserId","dashboardData","info","xl","timeline","DataProgress","pending","failed","Icon","pendingIcon","failedIcon","completeIcon","Message","pendingMessage","failedMessage","completeMessage","get","dot","LocationWrapper","componnentDidMount","saveLocation","cancelLocation","Analysis","initLoading","loading","locationData","dataLoaded","addingLocation","dataForSingleLocation","dataForAllLocations","showGraph","generateGraph","createMetricGraph","createSetGraph","context","forEachPromise","getDataPromiseByLocation","getMetricsPromise","metrics","getLocationPromise","fn","reduce","promise","context2","getDataPromise","setId","equalsIgnoreCase","metric","point","MetricData","Compare","tempData","addLocation","deleteLocation","editLocation","block","pagination","page","pageSize","values","marginLeft","href","Analysis_LocationWrapper","MetricsReportedInLastYear","DataQuality","setLocation","getQualityOfData","Score","toFixed","es_alert","banner","closable","Header","Footer","Content","pathNamesAndTitles","/","/account","/dashboard","/analysis","/users","/sync","/health","pathName","pathname","drawerOpen","openDrawer","closeDrawer","BrowserRouter","layout","drawer","onClose","visible","menu","Link","to","padding","NavigationMenu_NavigationMenu","Route","exact","path","SampleHome_SampleHome","component","rel","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","src_App_0","document","getElementById","URL","origin","addEventListener","response","contentType","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8f96c3c8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Button, Icon } from 'antd';\n\nimport './NavigationMenu.css';\n\n/**\n * Navigation Menu Component\n * \n * Accepts up to three props:\n *  - title\n *  - rightButtonType\n *  - rightButtonAction\n */\n\nclass App extends Component {\n\n    rightButtonRenderer = () =>{\n        if (this.props.rightButtonAction != null && this.props.rightButtonType != null){\n            return (\n                <Button type=\"default\" onClick={this.props.rightButtonAction} className=\"ghost-button\">\n                    <Icon\n                        className=\"trigger\"\n                        type={this.props.rightButtonType ? this.props.rightButtonType : \"menu-fold\"}\n                        />\n                </Button>\n            )\n        }else{\n            return null\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"navMenu\">\n            <Row>\n                {/* This button opens and closes the drawer */}\n                <Col span= {4}>\n                    <Button type=\"default\" onClick={this.props.openDrawer_f} className=\"ghost-button\">\n                        <Icon\n                            className=\"trigger\"\n                            type='menu-unfold'\n                            />\n                    </Button>\n                </Col>\n                <Col span = {16}>\n                    <h2 className = \"nowrap center\">\n                        {this.props.title}\n                    </h2>\n                </Col>\n                <Col span= {4}>\n                    {this.rightButtonRenderer()}\n                </Col>\n\n\n            </Row>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\n//react-vis for graphs\nimport '../../node_modules/react-vis/dist/style.css';\nimport {Empty} from 'antd'\nimport { FlexibleWidthXYPlot, XAxis, YAxis, HorizontalGridLines, LineSeries, LineMarkSeries, DiscreteColorLegend, VerticalGridLines, HorizontalBarSeries} from 'react-vis';\n\nconst strokeColors = [\n    \"#2980b9\",\n    \"#27ae60\",\n    \"#ef8717\",\n    \"#7f8c8d\"\n]\n\nconst averageColor = \"#e74c3c\"\n\nlet colorCounter = 0\n\nconst monthNames = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\",\n\"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"\n]\n\nconst averageCharacterWidth = 5.5\nconst constantCharacterPadding = 20\n\nclass Visualizer extends Component {\n\n    getNextColor = () => {\n        let color = strokeColors[colorCounter]\n        colorCounter = (colorCounter + 1) % strokeColors.length\n        return color\n    }\n\n    resetColor = () => {\n        colorCounter = 0\n    }\n\n    startDate = null\n\n    mockMetric = {\n        name: \"Male Vaccinations Ages 0-19\",\n        location: {\n            state: \"Ex\",\n            lga: \"Ex\",\n            ward: \"Ex\",\n            facility: \"Ex\",\n        },\n        data: [\n            {\n                Month: 'JAN',\n                Year: 2017,\n                Value: Math.floor(Math.random() * 10)\n            },\n            { Month: 'FEB', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'MAR', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'APR', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'MAY', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'JUN', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'JUL', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'AUG', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'SEP', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'OCT', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'NOV', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'DEC', Year: 2017, Value: Math.floor(Math.random() * 10) },\n            { Month: 'JAN', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'FEB', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'MAR', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'APR', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'MAY', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'JUN', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'JUL', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'AUG', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'SEP', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'OCT', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'NOV', Year: 2018, Value: Math.floor(Math.random() * 10) },\n            { Month: 'DEC', Year: 2018, Value: Math.floor(Math.random() * 10) },\n        ]\n    }\n\n    mockSet = {\n        name: \"Male Vaccinations\",\n        startDate: \"\",\n        endDate: \"\",\n        location: {\n            state: \"Ex\",\n            lga: \"Ex\",\n            ward: \"Ex\",\n            facility: \"Ex\",\n        },\n        data: [\n            {\n                Value: Math.floor(Math.random() * 10),\n                Metric: \"Male Vaccinations 0-10\"\n            },\n            { Value: Math.floor(Math.random() * 10), Metric: \"Male Vaccinations 10-40\" },\n            { Value: Math.floor(Math.random() * 10), Metric: \"Male Vaccinations 40-80\" },\n            { Value: Math.floor(Math.random() * 10), Metric: \"Male Vaccinations 80+\" },\n        ]\n    }\n\n    mockGroup = {\n        data:[\n            [\n                { Value: 1, Metric: \"Metric1\" },\n                { Value: 2, Metric: \"Metric2\" },\n                { Value: 3, Metric: \"Metric3\" },\n                { Value: 4, Metric: \"Metric4\" },\n            ],\n            [\n                { Value: 2, Metric: \"Metric1\" },\n                { Value: 3, Metric: \"Metric2\" },\n                { Value: 4, Metric: \"Metric3\" },\n                { Value: 5, Metric: \"Metric4\" },\n            ],\n            [\n                { Value: 3, Metric: \"Metric1\" },\n                { Value: 4, Metric: \"Metric2\" },\n                { Value: 5, Metric: \"Metric3\" },\n                { Value: 6, Metric: \"Metric4\" },\n            ],\n        ],\n        legendTitles:[\n            \"Location 1\",\n            \"Location 2\",\n            \"Location 3\"\n        ]\n    }\n\n    createMultipleBarSeries() {\n        let data = this.props.data.data || this.mockGroup.data \n\n        //Update Default Padding\n        let maxLength = 0\n        for (let i = 0; i < data.length; i++) {\n            for (let j = 0; j < data.length; j++) {\n                if (data[i][j].Metric.length > maxLength) maxLength = data[i][j].Metric.length\n            }\n        }\n        this.defaults.barChartLeftMargin = Math.round(maxLength * averageCharacterWidth + constantCharacterPadding, 0)\n\n        let result = {\n            barSeries: [],\n            legend: null,\n            lineData: null\n        }\n\n        for (let i = 0; i < data.length; i++){\n            //For each Location:\n            \n            //Create the bars in each of the same metric\n            let group = []\n            for (let j = 0; j < data[i].length; j++){\n                group.push({\n                    y: data[0][j].Metric, x: data[i][j].Value\n                })\n            }\n\n            result.barSeries.push(\n                <HorizontalBarSeries key={i} data={group} color={this.getNextColor()} />\n            )\n\n        }\n\n        //Push all the legend names in\n        this.resetColor()\n        \n        var legend = [];//this.props.data.legendTitles;\n        for (let i = 0; i < this.props.data.legendTitles.length; i++){\n            legend.push({ title: this.props.data.legendTitles[i], color: this.getNextColor() })\n        }\n\n        result.legend = <DiscreteColorLegend orientation=\"horizontal\" items={legend} />\n        return result\n\n    }\n\n    MultipleBar() {\n        let data = this.createMultipleBarSeries()\n\n        return (\n            <div className=\"center\">\n                <FlexibleWidthXYPlot yType=\"ordinal\" height={this.defaults.height} margin={{ left: this.defaults.barChartLeftMargin }}>\n                    <HorizontalGridLines />\n                    <XAxis />\n                    <YAxis />\n                    {data.barSeries}\n                </FlexibleWidthXYPlot>\n                {data.legend}\n            </div>\n\n        )\n    }\n\n    createHistogramData(){\n        let rawData = this.props.data\n        \n        if (rawData.length === 0){\n            return null\n        }\n\n        let redundantTitle = rawData.name.replace(\"All \", \"\").trim()\n    \n        rawData.data.forEach(el => {\n            if (typeof el.Metric === 'string'){\n                //Remove 'Facility Attendance' from Facility Attendance Outpatient and Facility Attendance Male\n                el.Metric = el.Metric.replace(`${redundantTitle}, `,\"\")\n                //Remove 'Facility Attendance Male from 'Facility Attendance Male, 20 years and above'\n                el.Metric = el.Metric.replace(`${redundantTitle}`,\"\").trim()\n            }\n        })\n\n        //Update Default Padding\n        let maxLength = 0\n        for (let i = 0; i < rawData.data.length; i++){\n            if ((\"\"+rawData.data[i].Metric).length > maxLength) maxLength = (\"\"+rawData.data[i].Metric).length\n        }\n        this.defaults.barChartLeftMargin = Math.round(maxLength * averageCharacterWidth + constantCharacterPadding,0)\n        let barSeriesData = this.createBarSeriesData(rawData)\n        return {\n            barSeries: barSeriesData.barSeries,\n            legend: barSeriesData.legend,\n            averageLine: this.createBarSeriesAverage(rawData)\n        }\n    }\n\n    createBarSeriesData = (rawData) => {\n        let color = this.getNextColor()\n        let map = rawData.data.filter(element => {\n            return !(typeof element.Metric === 'string' && element.Metric.length === 0)\n        }).map(element => {\n            return { y: element.Metric, x: element.Value }\n        })\n\n        return ({\n            barSeries: <HorizontalBarSeries data={map} color={color} />,\n            legend: <DiscreteColorLegend orientation=\"horizontal\" items={[{ title: rawData.name, color: color }, { title: \"Average\", color: averageColor }]} />\n        })\n    }\n\n    createBarSeriesAverage = (rawData) => {\n        let data = rawData.data.filter(element => {\n            return !(typeof element.Metric === 'string' && element.Metric.length === 0)\n        })\n\n        let sum = 0\n        let count = 0\n\n        data.forEach(el => {\n            sum += el.Value\n            count++\n        })\n       \n        let average = count > 0 ? sum / count : 0\n        let lineData = data.map(element => {\n            return { y: element.Metric, x: average }\n        })\n        return (<LineSeries data={lineData} strokeDasharray={[7, 5]} color={averageColor} />)\n    }\n\n    Histogram() {\n        let data = this.createHistogramData()\n        if (data === null){\n            return(\n                <div>\n                    empty\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"center\">\n                <FlexibleWidthXYPlot yType=\"ordinal\" height={this.defaults.height} margin={{ left: this.defaults.barChartLeftMargin }}>\n                    <HorizontalGridLines />\n                    <VerticalGridLines />\n                    <XAxis />\n                    <YAxis />\n                    {data.barSeries}\n                    {data.averageLine}\n                </FlexibleWidthXYPlot>\n                {data.legend}\n            </div>\n        )\n    }\n\n    /**\n     * Return an object containing an array of LineSeries (max 12 months)\n     * and one legend \n     */\n    createLineSeriesWithLegend() {\n\n        let elements = {\n            legend: null,\n            series: []\n        }\n\n        let dataForYear = []\n        let legend = []\n        let sum = 0\n        let count = 0\n\n        let data = this.props.data.data || this.mockMetric.data\n        \n        if (data.length === 0) return null\n        if (data[0].hasOwnProperty(\"Date\") === false){\n            data.forEach(el =>{\n                el.Date = new Date(el.Time)\n                el.Value = Number.parseInt(el.Value)\n            })\n\n            data.sort((a,b)=>{\n                return a.Date - b.Date\n            })\n        }\n\n        let currentYear = null \n\n        //Create a transparent line series with the correct month order\n        //to initialize the x-axis. This is necessary because sometimes\n        // the data has no values for consecutive months.\n\n        let blankData = []\n        for (let i = 0; i < monthNames.length; i++){\n            blankData.push({\n                x: monthNames[i],\n                y: 0\n            })\n        }\n        let blankDataSeries =  <LineMarkSeries key={-1} data={blankData} color=\"transparent\" colorType=\"literal\"/>\n        elements.series.push(blankDataSeries)\n\n        //Create a LineMarkSeries for each year.\n\n        for (let i = 0; i < data.length; i++) {\n\n            if (currentYear === null){\n                currentYear = data[i].Date.getUTCFullYear()\n            }\n\n            //Create data for the year\n            dataForYear.push({\n                x: monthNames[data[i].Date.getUTCMonth()],\n                y: data[i].Value\n            })\n\n            //Add to Average Calculation\n            sum += data[i].Value\n            count++\n\n            //With 12 data points OR at end of data set, create a LineMarkSeries\n            if (i === (data.length - 1) || data[(i + 1)].Date.getUTCFullYear() !== currentYear) {\n                let color = this.getNextColor()\n\n                elements.series.push(\n                    <LineMarkSeries key={i} data={dataForYear} color={color} colorType=\"literal\"/>\n                )\n\n                let title = `${currentYear}`\n\n                //Add legend entry for LineMarkSeries\n                legend.push({\n                    title: title,\n                    color: color\n                })\n\n                //Reset\n                dataForYear = []\n                if (i !== (data.length -1)) currentYear = data[(i + 1)].Date.getUTCFullYear()\n            }\n        }\n\n        //Add Average line\n        let marks = []\n        let average = count > 0 ? sum / count : 0\n        for (let i = 0; i < monthNames.length; i++){\n            marks.push({\n                x: monthNames[i],\n                y: average\n            })\n        }\n        \n        //Add legend entry for Average\n        legend.push({\n            title: \"Average\",\n            color: averageColor\n        })\n\n        elements.series.push(<LineSeries key={elements.length + 1} data={marks} strokeDasharray={[7, 5]} color={averageColor} colorType=\"literal\" />)\n\n        //Create legend\n        let legendElement = <DiscreteColorLegend orientation=\"horizontal\" items={legend}/>\n        elements.legend = legendElement\n\n        return elements\n\n    }\n\n    Line() {\n\n        let elements = this.createLineSeriesWithLegend()\n\n        if (elements === null){\n            return(\n                <div className=\"graphPlaceholder\">\n                    <Empty\n                        description=\"Hmm.. we can't find any data\"\n                    />\n                </div>\n            )\n        }else{\n            return (\n                <div className=\"center\">\n                    <FlexibleWidthXYPlot xType=\"ordinal\" height={this.defaults.height} >\n                        <HorizontalGridLines />\n                        <VerticalGridLines />\n                        <XAxis />\n                        <YAxis />\n                        {elements.series}\n                    </FlexibleWidthXYPlot>\n                    {elements.legend}\n                </div>\n            )\n        }\n\n\n    }\n\n    renderGraph = () =>{\n\n        let graph = null\n        switch (this.props.type) {\n            case \"Group\":\n                graph = this.MultipleBar()\n                break\n            case \"Set\":\n                graph = this.Histogram()\n                break\n            case \"Metric\":\n                graph = this.Line()\n                break\n            default:\n                graph = null\n                break\n        }\n        return graph\n    }\n\n    defaults = {\n        width: 350,\n        height: 350,\n        xDistance: 100,\n        barChartLeftMargin: 175\n    }\n\n    render() {\n\n        \n        if (this.props.show === false) return null\n\n        colorCounter = 0\n        //Override Defaults where appropriate\n        Object.keys(this.defaults).forEach((key) => {\n            if (this.props[key] !== undefined) this.defaults[key] = this.props[key]\n        });\n\n\n        let graph = this.renderGraph()\n        if (graph !== null) {\n            return <div>{graph} <span></span></div>\n\n        } else {\n            return (\n                <div>\n                    Sorry, something went wrong.\n                </div>\n            )\n        }\n\n    }\n}\n\nexport default Visualizer;\n","import Dexie from 'dexie'\n\nconst db = new Dexie('ESSD_DB')\n\ndb.version(1).stores({\n    //Locations\n    Facility:\"Id,parentId\",\n    Ward:\"Id,parentId\",\n    LGA:\"Id,parentId\",\n    State:\"Id\",\n\n    //Data\n    Groups:\"Id\",\n    Sets:\"Id,parentId\",\n    Metrics:\"Id,parentId\",\n    Data:\"Id,Time,MetricId,FacilityId,[FacilityId+MetricId+Time]\", //Index everything here\n\n    //Users (all of ESSD)\n    User:\"Id\",   // only store non-essential information\n\n    //User (local)\n    LocalUser: \"Id\",\n    Dashboard:\"Id\",\n    DashboardData: \"Id\"\n\n})\n\nexport default db;","import React, { Component } from 'react';\n\n//react-vis for graphs\nimport '../../node_modules/react-vis/dist/style.css';\n\nimport {Empty, Spin} from 'antd'\n\nimport Visualizer from './Visualizer'\n\nimport db from '../Database/database'\n\n/**\n * Types of Graphs Generated:\n * \n * Data: Metric\n * Location: Any (Note: Location is always ANY because we're not going to show breakdown by location; too many locations)\n * Time Period: Any\n *      -> Line Graph\n *      -> X-Axis is monthly if startDate.year == endDate.year; otherwise yearly\n * \n * Data: Set or Group\n * Location: Any\n * Time Period: Any\n * Period: Any\n * Type: Distribution\n *      -> Show Horizontal Bar Graph of the set or the group\n * \n * Data: Set or Group\n * Location: Any\n * Time Period: Any\n * Period: Any\n * Type: Total\n *      -> Show Line Graph of the Set or Group\n * \n */\n\n/**\n * PROPS:\n * @param LocationId: String\n * @param LocationType: String \"National\" | \"State\" | \"LGA\" | \"Ward\" | \"Facility\"\n * @param DataId: String\n * @param DataType: String \"Metric\" | \"Set\" | \"Group\"\n * @param StartDate: Date\n * @param EndDate: Date (if applicable)\n */\nclass VisualizerManager extends Component {\n\n    state = {\n        ready: false,\n        data: null,\n    }\n\n    checkInputs = () => {\n        let valid = true\n        let validInputs = {\n            \"LocationId\": value => {return value !== undefined && value !== null},\n            \"LocationType\": value => {return [\"National\", \"State\", \"LGA\", \"Ward\", \"Facility\"].includes(value)},\n            \"DataId\": value => {return value !== undefined && value !== null},\n            \"DataType\": value => {return [\"Metric\", \"Set\", \"Group\"].includes(value)},\n            \"StartDate\": value => {return Object.prototype.toString.call(value) === '[object Date]'},\n            \"EndDate\": value => {return Object.prototype.toString.call(value) === '[object Date]'}, \n        }\n\n        for (var key in validInputs){\n            if (validInputs[key](this.state[key]) === false){\n                valid = false\n                break\n            }\n        }\n    \n        return valid\n    }\n\n    isSimpleData = () =>{\n        //Simple data is only Facility, Metric \n        //All other data requires aggregation and therefore will be queried from the database.\n        if (this.state.LocationType !== \"Facility\") return false\n        if (this.state.DataType !== \"Metric\") return false\n        return true\n    }\n\n    /**\n     * @param date Date object\n     */\n    formatDate = (date) =>{\n        //Format into YYYY-MM-DDT:00:00:00.000Z\n        let dateString = `${date.getUTCFullYear()}-${(\"0\" + (date.getUTCMonth()+1)).slice(-2)}-${(\"0\" + date.getUTCDate()).slice(-2)}T00:00:00.000Z`\n        return dateString\n    }\n\n    /**\n     * Preconditions:\n     * locationType === \"Facility\"\n     * dataType === \"Metric\"\n     */\n    getSimpleData = () =>{\n        db.Data.where(\n            [\"FacilityId\", \"MetricId\", 'Time']\n        ).between(\n            [this.state.LocationId, this.state.DataId, this.formatDate(this.state.StartDate)],\n            [this.state.LocationId, this.state.DataId, this.formatDate(this.state.EndDate)],\n            true,\n            true\n        )\n        .toArray((arr) =>{\n            this.setState({\n                data: {\n                    data: arr\n                },\n                graphType :\"Metric\",\n                ready: true\n            })\n        })\n    }\n\n    /**\n     * 1. Try to find data from local store\n     * 2. If not possible, try to find data from internet\n     *     - If exists, cache\n     * 3. If not, some error message\n     */\n    getComplexData = () =>{\n        if (this.props.RawData){\n            let graphType = \"Metric\"\n            if (this.props.Data.MetricValue !== undefined && this.props.Data.MetricValue.charAt(0)!== \"-\") graphType = \"Metric\" \n            else if (this.props.Data.SetValue !== undefined) graphType = \"Set\"\n            else graphType = \"Group\"    \n            this.setState({\n                ready: true,\n                data:{\n                    data: this.props.RawData,\n                    name: this.props.Title\n                },\n                graphType: graphType\n            })\n        }else{\n            this.queryComplexData()\n        }\n    }\n\n    formatDateForRemoteQuery = (date) =>{\n        return `${date.getUTCFullYear()}-${(\"0\" + (date.getUTCMonth()+1)).slice(-2)}-${(\"0\" + date.getUTCDate()).slice(-2)}`\n    }\n\n    queryComplexData = () =>{\n    \n        //Build Query URL\n        let period = \"month\"\n        \n        if (this.state.StartDate.getUTCFullYear() !== this.state.EndDate.getUTCFullYear()) period = \"year\"\n        let rootURL = `https://essd-backend-dev.azurewebsites.net/api/data/query?`\n        let url = rootURL + \n                \"LocationId=\" + this.state.LocationId\n            +   \"&LocationType=\" + this.state.LocationType\n            +   \"&DataId=\" + this.state.DataId\n            +   \"&DataType=\" + this.state.DataType\n            +   \"&StartDate=\" + this.formatDateForRemoteQuery(this.state.StartDate)\n            +   \"&EndDate=\" + this.formatDateForRemoteQuery(this.state.EndDate)\n            +   \"&Period=\" + period\n            +   \"&Distribution=\" + this.state.DataPresentation\n\n        console.log(url)\n\n        //Data comes back as an array\n        fetch(url,{}).then(stream => stream.json().then(result =>{\n\n            if (period === \"year\"){\n\n                //TODO: Switch to vertical bar graph in the future\n                result.forEach(el =>{\n                    el.Value = Number.parseFloat(el.Total)\n                })\n\n                result.sort((a,b) =>{\n                    return a.Metric - b.Metric\n                })\n                \n                //If this spans multiple years, always display it as a bar chart\n                this.setState({\n                    ready: true,\n                    data: {\n                        data: result,\n                        name: this.state.Title\n                    },\n                    graphType: \"Set\",\n                })\n            }else{\n                //Period === month\n                let graphType = this.state.DataPresentation === \"distribution\" ? \"Set\" : \"Metric\"\n\n                let groupName = \"Metric\"\n                // if (result.length > 0) groupName = result[0].hasOwnProperty(\"MetricName\") ? \"MetricName\" : \"SetName\"\n\n                let titleIndex = undefined\n\n                for (let i = 0; i < result.length; i++){\n                    let d = new Date(this.state.StartDate)\n                    d.setUTCMonth(result[i].Month - 1)\n                    result[i].Date = d\n                    result[i].Value = Number.parseInt(result[i].Total)\n                    if (graphType === \"Set\"){\n                        if (result[i][groupName] === this.state.Title) titleIndex = i\n                        result[i].Metric = result[i][groupName].replace(`${this.state.Title}, `, \"\")\n                    }else{\n                        result[i].Metric = result[i][groupName]\n                    }\n                }\n\n                if (titleIndex !== undefined){\n                    result.splice(titleIndex,1)\n                }\n \n                this.setState({\n                    ready: true,\n                    graphType: graphType,\n                    data: {\n                        data: result,\n                        name: this.state.Title\n                    }\n                })\n\n            }\n\n            if (this.props.ParentHandler) this.props.ParentHandler(result)\n\n            //TODO: store data locally\n        }))\n    \n    }\n\n    componentDidUpdate(prevProps){\n        if (prevProps.Location !== this.props.Location || prevProps.Data !== this.props.Data || prevProps.Dates !== this.props.Dates){\n            this.setStateFromProps(this.run)\n        }\n    }\n\n    setStateFromProps = (callback) =>{\n        if (this.props.Title){\n            this.setState({\n                Title: this.props.Title,\n                LocationName: this.props.Location ? this.props.Location.Name : undefined,\n                LocationId: this.props.Location ? this.props.Location.Id : undefined,\n                LocationType: this.props.Location ? this.props.Location.Type : undefined,\n                DataId: this.props.Data ? this.props.Data.Id : undefined,\n                DataType: this.props.Data ? this.props.Data.Type : undefined,\n                DataPresentation: this.props.Data ? this.props.Data.TotalOrDistribution : undefined,\n                StartDate: this.props.Dates ? new Date(this.props.Dates.StartDate) : undefined,\n                EndDate: this.props.Dates ? new Date(this.props.Dates.EndDate) : undefined,\n            }, () =>{\n                if (callback) callback()\n            })\n        }else{\n            if (callback) callback()\n        }\n\n    }\n\n    run = () => {\n        if (this.checkInputs()){\n            if (this.isSimpleData()){\n                this.getSimpleData()\n            }else{\n                this.getComplexData()\n            }\n        }\n    }   \n\n    componentDidMount(){\n        this.setStateFromProps(this.run)\n    }\n\n    render() {\n        if (this.checkInputs()){\n            return (\n                <div>\n                    {\n                        this.state.ready === false && \n                        <div className=\"graphPlaceholder\">\n                            <Spin></Spin>\n                        </div>\n                        \n                    }\n                    {\n                        this.state.ready === true && \n                        <div>\n                            <Visualizer \n                                type = {this.state.graphType}\n                                show = {this.props.show}\n                                data = {this.state.data}\n                            />\n\n                        </div>\n\n                    }\n                </div>\n            )\n        }else{\n            return(\n                <div className=\"graphPlaceholder\">\n                    <Empty\n                        description=\"We can't display a graph with these inputs.\"\n                    />\n                </div>)\n        }\n    }\n}\n\nexport default VisualizerManager;\n","import React, { Component } from 'react';\n\nimport {Select} from 'antd'\n\nimport db from '../Database/database'\n\nconst hierarchyLevels = [\n    \"National\",\n    \"State\",\n    \"LGA\",\n    \"Ward\",\n    \"Facility\"\n]\n\nconst Option = Select.Option;\n\nconst style = {\n    width: \"100%\"\n}\n\n/**\n * Selects a loction in Nigeria\n * @param {parentHandler} - Function passed in by the parent that takes a LocationObject with props {Id, Name, Type} and updates the parent UI\n * @param {showLocation} - Boolean that shows or hides LocationSelector's built-in selected location text\n * @param {maxScope}: optional - {Id: \"188\", Level: \"State\"}\n * @param {initialLocation}\n */\nclass LocationSelector extends Component {\n\n    findAllLocations = (type) => {\n        return new Promise((resolve) =>{\n            //Cannot access type via db[type], so we have to do it manually\n            let callback = (data) => {\n                resolve (data) \n            }\n\n            switch(type){\n                case \"Facility\":\n                    db.Facility.toArray(callback)\n                break\n                case \"Ward\":\n                    db.Ward.toArray(callback)\n                break\n                case \"LGA\":\n                    db.LGA.toArray(callback)\n                break\n                case \"State\":\n                    db.State.toArray(callback)\n                break\n                default:\n                    //\n                break;\n            }\n        })\n    }\n\n    findLocationByQuery(type, queryParams){\n        return new Promise((resolve) =>{\n            //Cannot access type via db[type], so we have to do it manually\n            let callback = (data) => {\n                resolve (data) \n            }\n            switch(type){\n                case \"Facility\":\n                    db.Facility.where(queryParams).toArray(callback)\n                break\n                case \"Ward\":\n                    db.Ward.where(queryParams).toArray(callback)\n                break\n                case \"LGA\":\n                    db.LGA.where(queryParams).toArray(callback)\n                break\n                case \"State\":\n                    db.State.where(queryParams).toArray(callback)\n                break\n                default:\n                    //\n                break;\n            }\n        })\n    }\n\n    state = {\n\n        //Selected locations at each level\n        National: \"1|Nigeria|National\" ,\n        State:undefined,\n        LGA:undefined,\n        Ward:undefined,\n        Facility:undefined,\n\n        //Selection lists to show at each level\n        StateList: undefined,\n        LGAList: undefined,\n        WardList:undefined,\n        FacilityList:undefined,\n\n        //Enables / disables each list\n        enabledDisabledLists:{\n            \"National\"  : false,\n            \"State\"     : false,\n            \"LGA\"       : false,\n            \"Ward\"      : false,\n            \"Facility\"  : false\n        },\n\n        selectedLocation: \"1|Nigeria|National\"\n    }\n\n    componentDidUpdate = async (oldProps) => {\n        \n        if (oldProps.disabled !== this.props.disabled) this.enableDisableLists()\n\n        //No need to update for maxScope; this should not change unless the admin user has changed\n\n        //In the future, this can be updated to also change the user shown\n        //when the prop changes to allow React to persist a LocationSelector\n        //in the DOM, but this is tricky because it also requires LocationSelector\n        //to revert the selected location when editing is cancelled.\n    }\n\n    componentWillMount = () =>{\n        this.setLocations()\n    }\n\n    findIndexForLocationType = (locationType) =>{\n        return hierarchyLevels.findIndex((el) => {\n            return el === locationType\n        })\n    }\n\n    setLocations = async () =>{\n        /**\n         * Preconditions:\n         *  - initialLocation is within maxScope\n         *  - maxScope must be higher or equal to initialLocation\n         */\n        let maxScope = {\n            Type:  this.props.maxScope ? this.props.maxScope.Type : \"National\",\n            Id:     this.props.maxScope ? this.props.maxScope.Id : \"1\",\n        }\n        \n        let initialLocation = {\n            Type:  this.props.initialLocation.Type ? this.props.initialLocation.Type : maxScope.Type,\n            Id:     this.props.initialLocation.Id ? this.props.initialLocation.Id : maxScope.Id,\n        }\n\n        this.setState({\n            maxScope: maxScope,\n            initialLocation: initialLocation\n\n        }, () =>{\n            \n            let initLocationIndex = this.findIndexForLocationType(initialLocation.Type)\n\n            //Work backwards to define all the locations that the initial location belongs to\n    \n            let locations = {\n                \"National\"  : \"1|Nigeria|National\",\n                \"State\"     : undefined,\n                \"LGA\"       : undefined,\n                \"Ward\"      : undefined,\n                \"Facility\"  : undefined\n            }\n            \n            this.getLocationHierarchyForInitLocation(initLocationIndex, initialLocation.Id, this.setLocationState, locations)\n        })\n\n\n    }\n\n    getLocationHierarchyForInitLocation = async (currentIndex, currentLocationId,completionCallback, locations) =>{\n        if (currentIndex === 0){\n            completionCallback(locations)\n            return\n        }else{\n            let location = await (this.findLocationByQuery(hierarchyLevels[currentIndex], {Id:currentLocationId}))\n            location = location[0]\n            locations[hierarchyLevels[currentIndex]] = `${location.Id}|${location.Name}|${hierarchyLevels[currentIndex]}`\n            this.getLocationHierarchyForInitLocation(currentIndex-1, location.parentId, completionCallback, locations)\n        }\n    }\n\n    setLocationState = (data) =>{\n        this.setState({...data}, () =>{\n            this.notifyParent()\n            //Then update lists for each level that is defined, plus the first undefined level\n            for (let i = 0; i < hierarchyLevels.length; i++){\n                this.updateList(hierarchyLevels[i], i, () =>{})\n            }\n            this.enableDisableLists()\n        })\n    }\n\n    enableDisableLists = () =>{\n\n        let maxScope = this.state.maxScope\n        let enabledDisabledLists = {}\n\n        //Disable all fields if global state is disabled\n        if (this.props.disabled === true){\n            for (let i = 0; i < hierarchyLevels.length; i++){\n                enabledDisabledLists[hierarchyLevels[i]] = true\n            }\n        }else{\n            let disabled = true\n            for (let i = 0; i < hierarchyLevels.length; i++){\n                //Disable all levels above maxScope.Level, including maxScope\n                enabledDisabledLists[hierarchyLevels[i]] = disabled\n    \n                //Enable all levels after maxScope.Level\n                if (hierarchyLevels[i] === maxScope.Type) disabled = false\n            }\n        }\n        this.setState({enabledDisabledLists: enabledDisabledLists})\n    }\n\n    handleChange = (level, value) =>{\n        //Find Current Level\n        let currentLevelIndex = this.findIndexForLocationType(level)\n        let currentLevel = level\n\n        //If value is undefined, then Select was cleared so the current Level is one above this level\n        if (value === undefined || this.parseLocation(value).Id === \"-1\"){\n            currentLevel = hierarchyLevels[currentLevelIndex - 1]  \n            this.setState({[level]: undefined, selectedLocation:this.state[currentLevel]}, () =>{\n                this.notifyParent()\n            })\n        }else{\n            //Update Select\n            this.setState({[level]: value, selectedLocation:value},  () =>{\n                this.notifyParent()\n            })\n        }\n        \n        //Whenever the value has changed, all the subordinate options have been invalidated \n        for (let i = currentLevelIndex + 1; i < hierarchyLevels.length; i++){\n            let statePropertyName = hierarchyLevels[i]\n            const x = i\n            this.setState({[statePropertyName]: undefined}, () =>{\n                this.updateList(statePropertyName, x)\n            })\n        }\n    }\n\n    updateList = async (level, levelIndex, callBack) => {\n        \n        let list = []\n        let listName = `${level}List`                       //E.g. We will be updating this.state.FacilityList\n        let queryProperty = hierarchyLevels[levelIndex]      //eg level = lga but we need 'LGA' for data.LGA\n\n        //States are special because they don't require a nation lookup\n        if (level === \"State\"){\n            list = await this.findAllLocations(level)\n        }else{\n            levelIndex = hierarchyLevels.findIndex((el) => {return el === level})\n\n            queryProperty = hierarchyLevels[levelIndex] //eg level = lga, queryProperty = LGA\n            let aboveLevel = hierarchyLevels[levelIndex-1]\n            if (this.state[aboveLevel] === undefined){\n                //Short circuit if the above level is undefined\n                this.setState({[listName]: []})\n                return\n            }else{\n                let aboveLevelId = this.parseLocation(this.state[aboveLevel]).Id\n                list = await this.findLocationByQuery(queryProperty,{parentId: aboveLevelId})\n            }\n        }\n\n        let optionsList = []\n         //Add a clear option to the front of the array (mobile users won't see the clear button)\n\n        optionsList.push(\n            <Option key = {-1} value = \"-1||\"><em>Clear Selection</em></Option>\n        )\n\n        //Add the remaining objects\n        list.forEach((el)=>{\n            optionsList.push(\n                <Option key = {el.Id} value = {`${el.Id}|${el.Name}|${level}`}>{el.Name}</Option>\n            )\n        })\n        \n        if (optionsList.length > 0){\n            this.setState({[listName]: optionsList})\n        }\n\n        if (callBack) callBack()\n    }\n\n    parseLocation (value) {\n        if (value === undefined) return {\n            Id:\"\",Name:\"\",Type:\"\"\n        }\n        let valueArr = value.split(\"|\")\n        return{\n            Id:     valueArr[0],\n            Name:   valueArr[1],\n            Type:  valueArr[2]\n        }\n    }\n\n    notifyParent = () =>{\n        if (this.props.parentHandler !== undefined && this.props.parentHandler !== null){\n            let location = undefined\n            for (let i = hierarchyLevels.length-1; i >=0 ; i--){\n                if (this.state[hierarchyLevels[i]] !== undefined){\n                    location = this.state[hierarchyLevels[i]]\n                    break\n                }\n            }\n            this.props.parentHandler(this.parseLocation(location))\n        }\n    }\n\n    render() {\n        return (\n           <div>\n               <Select\n                    style={style}\n                    placeholder=\"Country\"\n                    optionFilterProp=\"children\"\n                    defaultValue = \"Nigeria\"\n                    disabled\n                >\n                    <Option value=\"Nigeria\">Nigeria</Option>\n                </Select>\n                <br/>\n                <Select\n                    showSearch\n                    style={style}\n                    placeholder=\"State\"\n                    optionFilterProp=\"children\"\n                    value = {this.state.State}\n                    onChange={(value) => {this.handleChange(\"State\", value)}}\n                    disabled = {this.state.enabledDisabledLists.State}\n                    // filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >\n                    {this.state.StateList}\n                </Select>\n                <br/>\n                <Select\n                    // showSearch\n                    style={style}\n                    placeholder=\"LGA\"\n                    optionFilterProp=\"children\"\n                    value = {this.state.LGA}\n                    onChange={(value) => {this.handleChange(\"LGA\", value)}}\n                    disabled = {this.state.enabledDisabledLists.LGA}\n                    // filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >\n                    {this.state.LGAList}\n                </Select>\n                <br/>\n                <Select\n                    // showSearch\n                    style={style}\n                    placeholder=\"Ward\"\n                    optionFilterProp=\"children\"\n                    value = {this.state.Ward}\n                    onChange={(value) => {this.handleChange(\"Ward\", value)}}\n                    disabled = {this.state.enabledDisabledLists.Ward}\n                    // filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >\n                    {this.state.WardList}\n                </Select>\n                <br/>\n                <Select\n                    // showSearch\n                    style={style}\n                    placeholder=\"Facility\"\n                    optionFilterProp=\"children\"\n                    value = {this.state.Facility}\n                    onChange={(value) => {this.handleChange(\"Facility\", value)}}\n                    disabled = {this.state.enabledDisabledLists.Facility}\n                    // filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >\n                    {this.state.FacilityList}\n                </Select>\n                <br/>\n                <div hidden = {!this.props.showLocation}>\n                    <p>\n                        Selected Location: {`${this.parseLocation(this.state.selectedLocation).Name} (${this.parseLocation(this.state.selectedLocation).Type})`}\n                    </p>\n                </div>\n               \n           </div>\n        );\n    }\n}\n\nexport default LocationSelector;\n","import React, { Component } from 'react';\n\nimport {Select} from 'antd'\n\nimport db from '../Database/database'\n\nconst hierarchyLevels = [\n    \"Group\",\n    \"Set\",\n    \"Metric\",\n]\n\nconst Option = Select.Option;\n\nconst style = {\n    width: \"100%\"\n}\n\n/**\n * Selects a loction in Nigeria\n * @param {parentHandler} - Function passed in by the parent that takes a LocationObject with props {Id, Name, Type} and updates the parent UI\n * @param {showData} - Boolean that shows or hides LocationSelector's built-in selected location text\n * @param {initialData} = {GroupValue, SetValue, MetricValue}\n */\nclass MetricSelector extends Component {\n\n    findAll = (type) => {\n        return new Promise((resolve) =>{\n            //Cannot access type via db[type], so we have to do it manually\n            let callback = (data) => {\n                resolve (data) \n            }\n\n            switch(type){\n                case \"Metric\":\n                    db.Metrics.toArray(callback)\n                break\n                case \"Set\":\n                    db.Sets.toArray(callback)\n                break\n                case \"Group\":\n                    db.Groups.toArray(callback)\n                break\n                default:\n                    //\n                break;\n            }\n        })\n    }\n\n    findByQuery(type, queryParams){\n        return new Promise((resolve) =>{\n            //Cannot access type via db[type], so we have to do it manually\n            let callback = (data) => {\n                resolve (data) \n            }\n            switch(type){\n                case \"Metric\":\n                    db.Metrics.where(queryParams).toArray(callback)\n                break\n                case \"Set\":\n                    db.Sets.where(queryParams).toArray(callback)\n                break\n                case \"Group\":\n                    db.Groups.where(queryParams).toArray(callback)\n                break\n                default:\n                    //\n                break;\n            }\n        })\n    }\n\n    state = {\n\n        //Selected values at each level\n        Group:undefined,\n        Set:undefined,\n        Metric:undefined,\n\n        //Selection lists to show at each level\n        GroupList: undefined,\n        SetList: undefined,\n        MetricList:undefined,      \n\n        //Enables / disables each list\n        enabledDisabledLists:{\n            \"Group\"  : false,\n            \"Set\"     : false,\n            \"Metric\"       : false,\n        },\n\n        selectedData: undefined\n    }\n\n    componentDidUpdate = async (oldProps) => {\n        \n        if (oldProps.disabled !== this.props.disabled) this.enableDisableLists()\n\n        //No need to update for maxScope; this should not change unless the admin user has changed\n\n        //In the future, this can be updated to also change the user shown\n        //when the prop changes to allow React to persist a LocationSelector\n        //in the DOM, but this is tricky because it also requires LocationSelector\n        //to revert the selected location when editing is cancelled.\n    }\n\n    componentDidMount = () =>{\n        this.setInitialDataState()\n    }\n\n    findIndexForLocationType = (locationType) =>{\n        return hierarchyLevels.findIndex((el) => {\n            return el === locationType\n        })\n    }\n\n    setInitialDataState = () =>{\n        this.enableDisableLists()\n        if (this.props.initialData === undefined){\n            //If undefined, then only update Group List\n            this.updateList(\"Group\", 0, null)\n            this.notifyParent()\n        }else{\n            this.setState({\n                Group:  this.getValueForInitialDataProperty(\"GroupValue\"),\n                Set:    this.getValueForInitialDataProperty(\"SetValue\"),\n                Metric: this.getValueForInitialDataProperty(\"MetricValue\"),\n            }, () =>{\n                this.notifyParent()\n                this.updateList(\"Group\", 0, null)\n                this.updateList(\"Set\", 0, null)\n                this.updateList(\"Metric\", 0, null)\n            })\n        }\n    }\n\n    getValueForInitialDataProperty = (propName) => {\n        let p = this.props.initialData[propName]    \n        if (p === undefined) {\n            return undefined            \n        }\n        if (typeof p === \"string\"){\n            if (p.length === 0) return undefined\n            return p\n        }\n    }\n\n    enableDisableLists = () =>{\n\n        let enabledDisabledLists = {}\n\n        let disabled = this.props.disabled !== undefined ? this.props.disabled : false\n        //Disable all fields if global state is disabled\n        for (let i = 0; i < hierarchyLevels.length; i++){\n            enabledDisabledLists[hierarchyLevels[i]] = disabled\n        }\n        this.setState({enabledDisabledLists: enabledDisabledLists})\n    }\n\n    handleChange = (level, value) =>{\n        //Find Current Level\n        let currentLevelIndex = this.findIndexForLocationType(level)    \n\n        //If value is undefined, then Select was cleared so the current Level is one above this level\n        if (value === undefined || this.parseData(value).Id === \"-1\"){\n            this.setState({[level]: undefined}, () =>{\n                this.createLocationObject()\n                this.notifyParent()\n            })\n        }else{\n            //Update Select\n            this.setState({[level]: value, selectedData:value},  () =>{\n                this.createLocationObject()\n                this.notifyParent()\n            })\n        }\n        \n        //Whenever the value has changed, all the subordinate options have been invalidated \n        for (let i = currentLevelIndex + 1; i < hierarchyLevels.length; i++){\n            let statePropertyName = hierarchyLevels[i]\n            const x = i\n            this.setState({[statePropertyName]: undefined}, () =>{\n                this.updateList(statePropertyName, x)\n                this.createLocationObject()\n            })\n        }\n\n    }\n\n    createLocationObject = () =>{\n\n        let type = undefined, name = undefined, split = undefined\n\n        if (this.state.Metric !== undefined){\n            split = this.state.Metric.split(\"|\")\n            type = split[2]\n            name = split[1]\n        }else if (this.state.Set !== undefined){\n            split = this.state.Set.split(\"|\")\n            type = split[2]\n            name = split[1]\n        }else if (this.state.Group !== undefined){\n            split = this.state.Group.split(\"|\")\n            type = split[2]\n            name = split[1]\n        }\n        \n        let typeID = type !== undefined ? split[0] : undefined\n\n        let totalOrDistribution = \"total\" // Default to total\n\n        if (type !== \"Metric\"){\n            //If this is not a metric and has a total or distribution, we need to find out which one it is\n            let nextType = hierarchyLevels[this.findIndexForLocationType(type) + 1]\n\n            if (this.state[nextType] !== undefined){\n                let nextType = typeID.split(\"-\")\n                typeID = nextType[2]            //Get the ID of the above Set or Group without the -# prefix\n                if (nextType[1] === \"2\"){\n                    totalOrDistribution = \"total\"\n                }else{\n                    totalOrDistribution = \"distribution\"\n                }\n            }\n        }else{\n            totalOrDistribution = \"none\"\n        }\n\n        let result = {\n            Type: type,\n            Id: typeID,\n            Name: name,\n            TotalOrDistribution: totalOrDistribution,\n            GroupValue: this.state.Group,\n            SetValue: this.state.Set,\n            MetricValue: this.state.Metric\n        }\n        \n        return result\n    }\n\n    updateList = async (level, levelIndex, callBack) => {\n        \n        let list = []\n        let listName = `${level}List`                       //E.g. We will be updating this.state.FacilityList\n        let queryProperty = hierarchyLevels[levelIndex]      //eg level = lga but we need 'LGA' for data.LGA\\\n        let aboveLevel = undefined\n\n        //States are special because they don't require a nation lookup\n        if (level === \"Group\"){\n            list = await this.findAll(level)\n        }else{\n            levelIndex = hierarchyLevels.findIndex((el) => {return el === level})\n            queryProperty = hierarchyLevels[levelIndex] //eg level = lga, queryProperty = LGA\n            aboveLevel = hierarchyLevels[levelIndex-1]\n            if (this.state[aboveLevel] === undefined){\n                //Short circuit if the above level is undefined\n                this.setState({[listName]: []})\n                return\n            }else{\n                let aboveLevelId = this.parseData(this.state[aboveLevel]).Id\n                list = await this.findByQuery(queryProperty,{parentId: aboveLevelId})\n            }\n        }\n\n        let optionsList = []\n\n         //Add a clear option to the front of the array (mobile users won't see the clear button)\n        optionsList.push(\n            <Option key = {-1} value = \"-1||\"><em>Clear Selection</em></Option>\n        )\n\n        //Add total and distribution of the above group or set\n        if (level === \"Set\" || level === \"Metric\"){\n            let totalString = `All ${this.state[aboveLevel].split(\"|\")[1]} (Total)`\n            optionsList.push(\n                <Option key = {-1} value = {`-2-${this.state[aboveLevel].split(\"|\")[0]}|${totalString}|${aboveLevel}`}>{totalString}</Option>\n            )\n            let distributionString = `All ${this.state[aboveLevel].split(\"|\")[1]} (Distribution)`\n            optionsList.push(\n                <Option key = {-1} value = {`-3-${this.state[aboveLevel].split(\"|\")[0]}|${distributionString}|${aboveLevel}`}>{distributionString}</Option>\n            )\n        }\n\n        //If the Set Above includes a Total or Distribution, then there are no metrics to show\n        if (level === \"Metric\"){\n            if (this.state[aboveLevel].split(\"|\")[0].charAt(0)  === \"-\"){\n                this.setState({\n                    [listName]: []\n                })\n                return\n            }\n        }\n\n        let aboveName = aboveLevel === undefined ? null : this.state[aboveLevel].split(\"|\")[1]\n        //Add the remaining objects\n        list.forEach((el)=>{\n            //Add to list unless the name is the same as the one above\n            if (aboveName !== el.Name){\n                optionsList.push(\n                    <Option key = {el.Id} value = {`${el.Id}|${el.Name}|${level}`}>{el.Name}</Option>\n                )\n            }\n\n        })\n        \n        if (optionsList.length > 0){\n            this.setState({[listName]: optionsList})\n        }\n\n        if (callBack) callBack()\n    }\n\n    parseData (value) {\n        if (value === undefined) return {\n            Id:\"\",Name:\"\",Type:\"\"\n        }\n        let valueArr = value.split(\"|\")\n        return{\n            Id:     valueArr[0],\n            Name:   valueArr[1],\n            Type:  valueArr[2]\n        }\n    }\n\n    notifyParent = () =>{\n        if (this.props.parentHandler !== undefined && this.props.parentHandler !== null){\n            this.props.parentHandler(this.createLocationObject())\n        }\n    }\n\n    render() {\n        return (\n           <div>\n                <Select\n                    style={style}\n                    placeholder=\"Group\"\n                    optionFilterProp=\"children\"\n                    value = {this.state.Group}\n                    onChange={(value) => {this.handleChange(\"Group\", value)}}\n                    disabled = {this.state.enabledDisabledLists.Group}\n                >\n                    {this.state.GroupList}\n                </Select>\n                <br/>\n                <Select\n                    style={style}\n                    placeholder=\"Set\"\n                    optionFilterProp=\"children\"\n                    value = {this.state.Set}\n                    onChange={(value) => {this.handleChange(\"Set\", value)}}\n                    disabled = {this.state.enabledDisabledLists.Set}\n                >\n                    {this.state.SetList}\n                </Select>\n                <br/>\n                <Select\n                    style={style}\n                    placeholder=\"Metric\"\n                    optionFilterProp=\"children\"\n                    value = {this.state.Metric}\n                    onChange={(value) => {this.handleChange(\"Metric\", value)}}\n                    disabled = {this.state.enabledDisabledLists.Metric}\n                >\n                    {this.state.MetricList}\n                </Select>\n            \n                <br/>\n                <div hidden = {this.props.showLabel !== undefined ? !this.props.showLabel : false}>\n                    <p>\n                        Selected Data: {`${this.createLocationObject().Name} (${this.createLocationObject().Type})`}\n                    </p>\n                </div>\n               \n           </div>\n        );\n    }\n}\n\nexport default MetricSelector;\n","import React, { Component } from 'react'\nimport {Button, message} from 'antd'\n\nimport db from '../Database/database'\n\nclass SaveGraph extends Component{\n\n    //For a graph:\n\n    /**\n     * \n     * Locations[associativearray] of Location\n     * Data\n     * Dates: {StartDate, EndDate}\n     * RawData\n     */\n\n    saveGraph = () =>{\n        //Get Number of Dashboards Currently\n        db.Dashboard.toCollection().last().then(object =>{\n            let key = 0\n            if (object){\n                key = object.Id + 1\n            }\n            //Prepare Save Object\n            let newGraph = {\n                Id:key,\n                Title: this.props.Title,\n                \n                Locations: this.props.Locations,\n                Dates: this.props.Dates,\n                Data: this.props.Data,\n                RawData: this.props.RawData\n                \n            }\n\n            db.Dashboard.put(newGraph).then(() =>{\n                message.success(\"Successfully saved to dashboard.\")\n                if (this.props.ParentHandler) this.props.ParentHandler()\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Button icon=\"save\" onClick={this.saveGraph}>Save Graph</Button>\n            </div>\n        )\n    }\n\n}\n\nexport default SaveGraph","import React, { Component } from 'react';\nimport { DatePicker} from 'antd';\nimport moment from 'moment';\n\nconst {MonthPicker} = DatePicker\n\nclass RangeSelector extends Component {\n\n    state = {\n        Dates: {\n            StartDate: this.props.initialData.Dates.StartDate,\n            EndDate: this.props.initialData.Dates.EndDate\n        }\n    }\n\n    startDateOnChange(date, dateString) {\n        var endDate = this.state.Dates.EndDate;\n        this.setState({\n            Dates: { StartDate: new Date(`${dateString}T00:00:00.000Z`), EndDate: endDate }\n        }, () => { \n            this.notifyParent();\n        })\n    }\n\n    endDateOnChage(date, dateString) {\n        var startDate = this.state.Dates.StartDate;\n        this.setState({\n            Dates: { StartDate: startDate, EndDate: new Date(`${dateString}T00:00:00.000Z`) }\n        }, () => { \n            this.notifyParent();\n        })\n    }\n    notifyParent = () =>{\n        if (this.props.parentHandler !== undefined && this.props.parentHandler !== null){\n            this.props.parentHandler(this.state.Dates);\n        }\n    }\n\n\n    plusOne = (num) => {\n        return num + 1;\n    }\n\n    dateToString = (date) => {\n        let str = date.getFullYear() + \"-\" +\n            this.plusOne(date.getMonth()) + \"-\" +\n            this.plusOne(date.getDay());\n        return str;\n    }\n\n    render() {\n        return (\n            <div className=\"center\">\n                <MonthPicker defaultValue={moment(this.dateToString(this.state.Dates.StartDate), 'YYYY-MM-DD')} placeholder=\"Start Date\" onChange={(date, dateString) => { this.startDateOnChange(date, dateString) }} />\n                <MonthPicker defaultValue={moment(this.dateToString(this.state.Dates.EndDate), 'YYYY-MM-DD')} placeholder=\"End Date\" onChange={(date, dateString) => { this.endDateOnChage(date, dateString) }} />\n                {/* <DatePicker defaultValue={moment(this.dateToString(this.state.Dates.StartDate), 'YYYY-MM-DD')} placeholder=\"Start Date\" onChange={(date, dateString) => { this.startDateOnChange(date, dateString) }} /> */}\n                {/* <DatePicker defaultValue={moment(this.dateToString(this.state.Dates.EndDate), 'YYYY-MM-DD')} placeholder=\"End Date\" onChange={(date, dateString) => { this.endDateOnChage(date, dateString) }} /> */}\n            </div>\n        )\n    };\n\n}\n\nexport default RangeSelector;\n","import React, { Component } from 'react';\nimport LocationSelector from '../LocationSelector/LocationSelector';\nimport MetricSelector from '../MetricSelector/MetricSelector';\nimport VisualizerManager from '../Visualizer/VisualizerManager';\nimport SaveGraph from '../Graph/SaveGraph'\nimport RangeSelector from '../RangeSelector/RangeSelector'\nimport { Card, Row, Col, Divider } from 'antd'\n\n\nclass CreateGraph extends Component {\n\n    state = {\n        Location: undefined,\n        Data: undefined,\n        Dates: { StartDate: new Date(\"2015-01-01T00:00:00.000Z\"), EndDate: new Date(\"2019-01-01T00:00:00.000Z\") }\n    }\n\n    updateRawData = (rawData) => {\n        this.setState({\n            RawData: rawData\n        })\n    }\n\n    updateLocation = (location) => {\n        this.setState({ Location: location })\n    }\n\n    updateData = (data) => {\n        this.setState({ Data: data })\n    }\n    updateDates = (dates) => {\n        this.setState({ Dates: dates });\n    }\n    createLocationObject = () => {\n        let loc = this.state.Location\n        let obj = {}\n        if (loc !== undefined) {\n            let name = `${loc.Type}-${loc.Id}`\n            obj[name] = loc\n        }\n        return obj\n    }\n\n    getTitle = () => {\n        if (this.state.Data !== undefined) {\n            return this.state.Data.Name.split(\"(\")[0]\n        }\n        return \"No title\"\n    }\n    render() {\n        return (\n            <Card className=\"left\" size=\"medium\" title=\"Create a Graph\">\n                <Row className={``} gutter={16}>\n                    <Col>\n                        <h4>Select Location</h4>\n                        <LocationSelector\n                            parentHandler={this.updateLocation}\n                            initialLocation={{\n                                Id: \"1215\",\n                                Type: \"Facility\"\n                            }}\n                        />\n                    </Col>\n                </Row>\n                <Divider />\n                <Row className={``} gutter={16}>\n                    <Col>\n                        <h4>Select Data</h4>\n                        <MetricSelector\n                            parentHandler={this.updateData}\n                            initialData={{\n                                GroupValue: \"1191|Facility Attendance|Group\",\n                                SetValue: \"-3-1191|All Facility Attendance (Distribution)|Group\",\n                                MetricValue: \"\"\n                            }}\n                        />\n                    </Col>\n                </Row>\n                <Divider />\n                <Row className={``} gutter={16}>\n                    <Col>\n                        <h4>Select Date Range</h4>\n\n                        <RangeSelector\n                            parentHandler={this.updateDates}\n                            initialData={{\n                                Dates: this.state.Dates\n                            }}\n                        />\n                    </Col>\n                </Row>\n                <Divider />\n                <Row>\n                    <Col>\n                        <h4>Generated Graph</h4>\n                        <VisualizerManager\n                            Title={this.state.Data !== undefined && this.state.Data.Name !== undefined ? this.state.Data.Name.split(\"(\")[0] : \"\"}\n                            Location={this.state.Location} //{Name, Id, Type}\n                            Data={this.state.Data} // {Id, Type, TotalOrDistribution=\"total|none|distribution\"}\n                            Dates={this.state.Dates}\n                            ParentHandler={this.updateRawData}\n                        />\n\n                        <SaveGraph\n                            Data={this.state.Data}\n                            Dates={this.state.Dates}\n                            Locations={this.createLocationObject()}\n                            Title={this.getTitle()}\n                            RawData={this.state.RawData}\n                            ParentHandler={this.props.ParentHandler}\n                        />\n                    </Col>\n                </Row>\n            </Card>\n        )\n    }\n}\n\nexport default CreateGraph","import React, { Component } from 'react'\n\nimport { message, Button, List, Card, Row, Col, Popconfirm } from 'antd'\n\nimport '../../node_modules/react-vis/dist/style.css'\nimport './Dashboard.css'\n\nimport VisualizerManager from '../Visualizer/VisualizerManager';\nimport CreateGraph from '../Graph/CreateGraph'\nimport db from '../Database/database';\nimport Visualizer from '../Visualizer/Visualizer';\n\n// let graphExamples = [\n//     {\n//         Title: \"Facility Attendance Female, 29d-11 months\",\n//         Location:{\n//             Name: \"za Bagega Primary Health Centre\",\n//             Id:  \"1215\",\n//             Type: \"Facility\"\n//         },\n//         Data:{\n//             Id: \"11729\",\n//             Type: \"Metric\",\n//         },\n//         Dates:{\n//             StartDate:new Date(\"2015-01-01T00:00:00.000Z\"),\n//             EndDate: new Date(\"2015-12-01T00:00:00.000Z\"),\n//         },\n//         GraphId: 0\n//     },\n//     {\n//         Title: \"Facility Attendance Outpatient Value\",\n//         Location:{\n//             Name: \"za Bagega Primary Health Centre\",\n//             Id:  \"1215\",\n//             Type: \"Facility\"\n//         },\n//         Data:{\n//             Id: \"11493\",\n//             Type: \"Metric\",\n//         },\n//         Dates:{\n//             StartDate:new Date(\"2015-01-01T00:00:00.000Z\"),\n//             EndDate: new Date(\"2015-12-01T00:00:00.000Z\"),\n//         },\n//         GraphId: 1\n//     },\n//     {\n//         Title: \"Facility Attendance Outpatient\",\n//         Location:{\n//             Name: \"za Bagega Ward\",\n//             Id:  \"386\",\n//             Type: \"Ward\"\n//         },\n//         Data:{\n//             Id: \"2094\",\n//             Type: \"Set\",\n//         },\n//         Dates:{\n//             StartDate:new Date(\"2015-01-01T00:00:00.000Z\"),\n//             EndDate: new Date(\"2015-12-01T00:00:00.000Z\"),\n//         },\n//         GraphId: 2\n//     },\n//     {\n//         Title: \"Facility Attendance Male\",\n//         Location:{\n//             Name: \"za Bagega Ward\",\n//             Id:  \"386\",\n//             Type: \"Ward\"\n//         },\n//         Data:{\n//             Id: \"2094\",\n//             Type: \"Set\",\n//             TotalOrDistribution: \"distribution\"\n//         },\n//         Dates:{\n//             StartDate:new Date(\"2015-01-01T00:00:00.000Z\"),\n//             EndDate: new Date(\"2015-12-01T00:00:00.000Z\"),\n//         },\n//         GraphId: 3\n//     },\n//     {\n//         Title: \"Facility Attendance Male\",\n//         Location:{\n//             Name: \"za Bagega Primary Health Centre\",\n//             Id:  \"1215\",\n//             Type: \"Facility\"\n//         },\n//         Data:{\n//             Id: \"2094\",\n//             Type: \"Set\",\n//             TotalOrDistribution: \"distribution\"\n//         },\n//         Dates:{\n//             StartDate:new Date(\"2015-01-01T00:00:00.000Z\"),\n//             EndDate: new Date(\"2015-12-01T00:00:00.000Z\"),\n//         },\n//         GraphId: 4\n//     }\n// ]\n\n// const metricTableColumns = [\n//     {\n//         title: \"Metric Tracked\",\n//         key: \"metricTracked\",\n//         dataIndex: \"metric\",\n//         defaultSortOrder: 'descend',\n//         sorter: (a, b) => {\n//             return b.metric.localeCompare(a.metric, \"en\")\n//         },\n//     },\n//     {\n//         title: \"Change\",\n//         key: \"change\",\n//         dataIndex: \"change\",\n//         defaultSortOrder: 'descend',\n//         sorter: (a, b) => {\n//             return a.change - b.change\n//         },\n//         render: decimal => {\n//             return `${Math.round(decimal * 100)}%`\n//         }\n//     },\n\n// ]\n\n// const metricData = [\n//     {\n//         key: '1',\n//         metric: \"Malaria Vaccinations\",\n//         change: 0.15\n//     },\n//     {\n//         key: '2',\n//         metric: \"Tetanus Vaccinations\",\n//         change: -.13\n//     },\n//     {\n//         key: '3',\n//         metric: \"Measles Outbreaks\",\n//         change: 0\n//     },\n// ]\n\nclass Dashboard extends Component {\n\n    state = {\n        fullSize: true,\n        graphOpenCloseState: null,\n        graphDataLoaded: false,\n        related: null,\n        relatedGraphs: [],\n        prevScollPos: 0,\n        currentView: \"dashboard\" // \"dashboard\" || \"viewRelated\" || \"createGraph\"\n    }\n\n    fullSizeOrListChanged = (e) => {\n        this.setState({ fullSize: e.target.value === \"0\" ? false : true })\n    }\n\n    toggleGraph = (key) => {\n        //Update the open/close state for this graph\n        let copy = this.state.graphOpenCloseState\n        let newVal = !copy[key].open\n        copy[key] = { open: newVal }\n        let anyOpen = false\n        //Check if all graphs open\n        for (let i = 0; i < Object.keys(copy).length - 1; i++) {\n            if (i === key) continue\n            if (copy[i].open === true) {\n                anyOpen = true\n                break\n            }\n        }\n        if (anyOpen) {\n            copy[\"collapseOrExpandText\"] = { text: \"Collapse All\" }\n        } else {\n            copy[\"collapseOrExpandText\"] = { text: \"Expand All\" }\n        }\n\n        this.setState({ graphOpenCloseState: copy })\n    }\n\n    toggleAllGraphs = () => {\n        //Set future state depending on what the button says\n        //Probably not best practice but it works \n        let openState = this.state.graphOpenCloseState[\"collapseOrExpandText\"].text === \"Collapse All\" ? false : true\n        let copy = this.state.graphOpenCloseState\n        for (let i = 0; i < Object.keys(copy).length - 1; i++) {\n            copy[i].open = openState\n        }\n        copy[\"collapseOrExpandText\"].text = openState ? \"Collapse All\" : \"Expand All\"\n        this.setState({ graphOpenCloseState: copy })\n    }\n\n    createCollapseExpandButton = (key) => {\n        return (\n            <Button key={0} className=\"condensed\" onClick={() => { this.toggleGraph(key) }}>{this.state.graphOpenCloseState[key].open ? \"Collapse\" : \"Expand\"}</Button>\n        )\n    }\n\n    getFirstLocation = (object) => {\n        let keys = Object.keys(object)\n        if (keys.length > 0) {\n            return object[keys[0]]\n        }\n    }\n\n    loadGraphsFromDB = () => {\n        db.Dashboard.toArray().then(arr => {\n            //Create a record of all open/close states for the graphs\n            let visibility = {}\n            for (let i = 0; i < arr.length; i++) {\n                visibility[i] = { open: true, showInFilter: true }\n            }\n\n            visibility[\"collapseOrExpandText\"] = { text: \"Collapse All\" }\n\n            this.setState({\n                graphData: arr,\n                graphDataLoaded: true,\n                graphOpenCloseState: visibility\n            })\n        })\n    }\n\n    componentDidMount() {\n        this.loadGraphsFromDB()\n    }\n\n\n    findAllGraphs = (item) => {\n        return new Promise((resolve) => {\n            let callback = (data) => {\n                resolve(data)\n            }\n\n            switch (item.Data.Type) {\n                case \"Metric\":\n                    db.Metrics.toArray(callback)\n                    break\n                case \"Set\":\n                    db.Sets.toArray(callback)\n                    break\n                case \"Group\":\n                    db.Sets.toArray(callback)\n                    break\n                default:\n                    //\n                    break;\n            }\n        })\n    }\n\n    findRelatedGraphs = (item) => {\n        return this.findAllGraphs(item).then((allData) => {\n            let relatedFound = [];\n            let parentId = \"\"\n            if (item.Data.Type === \"Group\") {\n                parentId = item.Data.Id\n            } else {\n                allData.forEach(function (metricData) {\n                    if (metricData.Id === item.Data.Id) {\n                        parentId = metricData.parentId\n                        return\n                    }\n                })\n            }\n\n            allData.forEach(function (metricData) {\n                if (metricData.parentId === parentId) {\n                    if (metricData.Id !== item.Data.Id) {\n                        relatedFound.push(metricData)\n                    }\n                }\n            })\n            return relatedFound;\n        })\n    }\n\n    toggleViewRelated = async (item) => {\n\n        if (this.state.currentView === \"related\") {\n            this.setState({\n                currentView: \"dashboard\"\n            }, () => {\n                window.scrollTo(0, this.state.prevScollPos)\n                window.dispatchEvent(new Event('resize'))\n            })\n        } else {\n            this.setState({\n                currentView: \"related\",\n                prevScollPos: window.pageYOffset\n            }, () => {\n                window.scrollTo(0, 0)\n            })\n            var relatedFound = await this.findRelatedGraphs(item);\n            this.processFoundData(relatedFound, item)\n        }\n    }\n\n    createViewRelatedButton = (item) => {\n        return (\n            <Button type=\"primary\" className=\"condensed\" onClick={() => { this.toggleViewRelated(item) }}>View Related</Button>\n        )\n    }\n\n    createDeleteButton = (item) => {\n        return (\n            <Popconfirm placement=\"top\" title=\"Are you sure want to delete this graph?\" okText=\"Delete\" cancelText=\"Cancel\"\n                onConfirm={() => { this.deleteGraph(item) }}>\n                <Button className=\"condensed\" type=\"danger\" icon=\"delete\">Delete</Button>\n            </Popconfirm>\n\n        )\n\n    }\n\n    processFoundData = (relatedFound, item) => {\n        let processedRelatedData = []\n        relatedFound.forEach(function (data) {\n            var temp = JSON.parse(JSON.stringify(item))\n            temp.Title = data.Name\n            if (item.Data.Type === \"Set\" || item.Data.Type === \"Group\") {\n                temp.Title = \"All \" + data.Name\n            } else {\n                temp.Title = data.Name\n            }\n            if (item.Data.Type === \"Set\" || item.Data.Type === \"Group\") {\n                temp.Data.Name = \"All \" + data.Name + \" (Distribution)\"\n            } else {\n                temp.Data.Name = data.Name\n            }\n            temp.Data.Id = data.Id\n            temp.Dates.StartDate = item.Dates.StartDate\n            temp.Dates.EndDate = item.Dates.EndDate\n            temp.RawData = null\n            processedRelatedData.push(temp)\n        })\n        this.setState({\n            relatedGraphs: processedRelatedData\n        })\n    }\n\n    deleteGraph = (item) => {\n        db.Dashboard.delete(item.Id).then(() => {\n            db.Dashboard.toArray().then(arr => {\n                this.setState({\n                    graphData: arr\n                });\n                message.success(\"Graph successfully deleted.\");\n            });\n        });\n    }\n\n    renderRelated = () => {\n        return (\n            <List\n                itemLayout=\"vertical\"\n                dataSource={this.state.relatedGraphs}\n                renderItem={(item1, key) => (\n                    <List.Item >\n                        <List.Item.Meta\n                            title={item1.Title}\n                            description={item1.Locations.Name} />\n                        <VisualizerManager\n                            {...item1} //LocationId, Location, etc...\n                            Location={this.getFirstLocation(item1.Locations)}\n                            show={true}\n                        />\n                    </List.Item>\n                )}>\n            </List>\n        )\n    }\n\n    itemHasCompare = (item) => {\n        return Object.keys(item).includes(\"Compare\")\n    }\n\n    showWhenCurrentViewIs = (viewType, classNames) => {\n        //Hide this class when the current view matches the view type\n        if (this.state.currentView === viewType) return classNames\n        return `${classNames} displayNone`\n    }\n\n    showWhenCurrentViewIsNot = (viewType, classNames) => {\n        //Hide this class when the current view doesn't match the view type\n        if (this.state.currentView !== viewType) return classNames\n        return `${classNames} displayNone`\n    }\n\n    renderGraphs = () => {\n        if (this.state.graphDataLoaded !== true) return null\n        return (\n            <List\n                itemLayout=\"vertical\"\n                dataSource={this.state.graphData}\n                renderItem={(item, key) => (\n                    <List.Item\n\n                        actions={[\n                            this.createCollapseExpandButton(key),\n                            this.createViewRelatedButton(item),\n                            this.createDeleteButton(item)\n                        ]}>\n                        {!this.itemHasCompare(item) ? (\n                            <div>\n                                <List.Item.Meta\n                                    title={item.Title}\n                                    description={this.getFirstLocation(item.Locations).Name} />\n\n                                <VisualizerManager\n                                    {...item} //LocationId, Location, etc...\n                                    Location={this.getFirstLocation(item.Locations)}\n                                    show={this.state.graphOpenCloseState[key].open}\n                                />\n\n                            </div>) : (\n                                <div>\n                                    <List.Item.Meta\n                                        title={item.Title}\n                                        description={new Date(item.Dates.StartDate).toUTCString().substring(0, new Date(item.Dates.StartDate).toUTCString().length - 13) + \" - \" + new Date(item.Dates.EndDate).toUTCString().substring(0, new Date(item.Dates.EndDate).toUTCString().length - 13)} />\n                                    <Visualizer\n                                        type={item.GraphType}\n                                        show={true}\n                                        data={item.Data}>\n                                    </Visualizer>\n\n                                </div>)}\n                    </List.Item>\n                )}>\n            </List>\n        )\n\n    }\n\n\n    setView = (viewName) => {\n        this.setState({\n            currentView: viewName,\n        }, () => {\n            window.dispatchEvent(new Event('resize'))\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {/* UI For Related Graphs */}\n                <div className={this.showWhenCurrentViewIs(\"related\", \"center\")}>\n                    <Row className=\"rowVMarginSm rowVMarginTopSm left\">\n                        <Button icon=\"caret-left\" onClick={() => { this.toggleViewRelated() }}>Back</Button>\n                    </Row>\n\n                    <Row className={`rowVMarginSm rowVMarginTopSm`} gutter={16}>\n                        <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                            <Card className=\"left\" size=\"medium\" title=\"Related Graphs\">\n                                {this.renderRelated()}\n                            </Card>\n                        </Col>\n                    </Row>\n                </div>\n\n                <div className={this.showWhenCurrentViewIsNot(\"related\", \"center\")}>\n                    {/* UI For Viewing Graphs */}\n                    {\n                        this.state.graphDataLoaded &&\n                        <div className={this.showWhenCurrentViewIs(\"dashboard\", \"\")}>\n                            <Row className=\"rowVMarginSm rowVMarginTopSm\">\n                                <Col className=\"left\" xs={{ span: 12, offset: 0 }} sm={{ span: 11, offset: 1 }} md={{ span: 9, offset: 3 }} lg={{ span: 8, offset: 4 }}>\n                                    <Button onClick={this.toggleAllGraphs}>{this.state.graphOpenCloseState[\"collapseOrExpandText\"].text}</Button>\n                                </Col>\n                                <Col className=\"right\" xs={{ span: 12, offset: 0 }} sm={{ span: 11, offset: 0 }} md={{ span: 9, offset: 0 }} lg={{ span: 8, offset: 0 }}>\n                                    <Button icon=\"plus\" type=\"primary\" onClick={() => { this.setView(\"createGraph\") }}>Add Graph</Button>\n                                </Col>\n                            </Row>\n                            <Row className={`rowVMarginSm`} gutter={16}>\n                                <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                                    <Card className=\"left\" size=\"small\">\n                                        {this.renderGraphs()}\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </div>\n                    }\n\n                    {/* UI For Creating Graphs */}\n                    <div className={this.showWhenCurrentViewIs(\"createGraph\", \"\")}>\n                        <Row className=\"rowVMarginSm rowVMarginTopSm\">\n                            <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}\n                                className=\"left\">\n                                <Button icon=\"caret-left\" onClick={() => { this.setView(\"dashboard\") }}>Back</Button>\n                            </Col>\n                        </Row>\n                        <Row className=\"rowVMarginSm\">\n                            <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                                <CreateGraph\n                                    ParentHandler={this.loadGraphsFromDB}\n                                />\n                            </Col>\n                        </Row>\n\n                    </div>\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;\n","import db from '../Database/database'\n\nconst userService = {\n    login,\n    logout,\n    user,\n}\n\nfunction login(email, password){\n    return new Promise ((resolve, reject) =>{\n        var loginApiRoute = `${process.env.REACT_APP_API_URL}${process.env.REACT_APP_LOGIN_ROUTE}`;\n        fetch(loginApiRoute, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({Email: email, Password: password})\n        })\n        .then((result) => {\n            return result.json();      \n        })\n        .then((userJsonObj) => {\n            if(userJsonObj.success){\n                //Successfully logined, so store in user info LocalUser and resolve promise to true\n                db.LocalUser.clear().then(\n                    db.LocalUser.add(userJsonObj.user).then(() =>{\n                        console.log(\"Auth Login Success\");\n                        resolve (true)\n                    })\n                ).catch((e) =>{\n                    //failed to save to LocalUser\n                    console.log(e);\n                    resolve(false);\n                });\n            }\n            else{\n                //failed to login, so resolve promise to false\n                resolve(false);\n            }\n        });\n    });\n}\n\nfunction logout(){\n    return new Promise ((resolve, reject) =>{\n        db.Dashboard.clear().then(()=>{\n            \n        })\n        db.LocalUser.clear().then(() => {\n            resolve (true)\n        }).catch((e) =>{\n            console.log(e)\n            resolve(false)\n        })\n\n\n    })\n}\n\n/**\n * Determines if there is a user logged in. \n * Returns null if no user; returns the user if logged in.\n */\nfunction user(){\n    return new Promise ((resolve, reject) =>{\n        db.LocalUser.toArray(arr =>{\n            if (arr.length !== 1) resolve(null)\n            else{\n                let result = arr[0]\n                //result.UserType = \"admin\" //hard code for now\n                resolve(result)\n            }\n        })\n    })\n}   \n\n/**\n * Drop-in authenticated replacement for fetch.\n * Includes required auth tokens.\n * TODO\n */\n/*\nfunction fetch(url, args){\n    return new Promise ((resolve, reject) =>{\n\n        //Get Auth Token\n\n        //Append auth token to args headers (if we choose to do auth this way)\n\n        //Send fetch request with args provided and auth token\n        \n        //Resolve fetch request\n\n        resolve(true)\n    })\n}*/\n\nexport default userService;","import React, { Component } from 'react'\nimport { Row, Col, Input, Button, Card } from 'antd'\nimport UserService from '../Services/User';\nimport { withRouter } from 'react-router-dom'\n\nclass Login extends Component {\n\n    state = {\n        Email: null,\n        Password: null\n    }\n\n    handleInput = (value, property) => {\n        this.setState({ [property]: value })\n    }\n\n    preTab = (text) => {\n        return (\n            <div style={{ minWidth: \"90px\", textAlign: \"right\" }}>\n                {text}\n            </div>\n        )\n    }\n\n    login = () => {\n        UserService.login(this.state.Email, this.state.Password).then((success) => {\n            if (success) {\n                //redirect\n                this.props.updateDrawer().then((result) => {\n                    this.props.history.push('/sync');\n                });\n            }\n            else {\n                //failed to login\n            }\n        })\n    }\n\n    \n    colStyle = {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 22, offset: 1 },\n        md: { span: 16, offset: 4 },\n        lg: { span: 10, offset: 7 }\n    }\n\n\n    render() {\n        return (\n            <Card>\n                <Row>\n                    <Col {...this.colStyle}>\n                        <Input\n                            addonBefore={this.preTab(\"Email\")}\n                            type=\"email\"\n                            onChange={(e) => {\n                                this.handleInput(e.target.value, \"Email\")\n                            }}\n                            placeholder=\"Email\" />\n                        <Input.Password\n                            addonBefore={this.preTab(\"Password\")}\n                            onChange={(e) => {\n                                this.handleInput(e.target.value, \"Password\")\n                            }}\n                            placeholder=\"Password\" />\n                    </Col>\n                </Row>\n                <br/>\n                <Row>\n                    <Col {...this.colStyle} className = \"center\">\n                        <Button type=\"primary\"\n                            onClick={this.login}>\n                            Login\n                        </Button>\n                    </Col>\n                </Row>\n\n            </Card>\n        )\n    }\n}\n\nexport default withRouter(Login);","import React, { Component } from 'react';\n\nimport './SampleHome.css';\nimport Login from \"../Login/Login\"\nimport userService from '../Services/User'\n\nclass App extends Component {\n\n    componentWillMount(){\n        //If there is a user, automatically redirect to dashboard\n        userService.user().then((userObj) => {\n            if (userObj !== null){\n                this.props.history.replace('/dashboard')\n            }\n        });\n    }\n\n    render() {\n        return (\n            <Login updateDrawer = {this.props.updateDrawer}></Login>\n        );\n    }\n}\n\nexport default App;\n","import React, { Component } from 'react'\nimport { Button, Input, Row, Col, Divider, Popconfirm, message, Select, Card } from 'antd'\n\nimport LocationSelector from \"../LocationSelector/LocationSelector\"\n\nimport db from '../Database/database'\nimport user from '../Services/User'\n\nconst userFields = [\n    \"FirstName\",\n    \"LastName\",\n    \"Phone\",\n    \"Email\",\n    \"Id\",\n    \"LocationId\",\n    \"LocationType\",\n    \"UserType\",\n    \"LocationName\"\n]\n\nclass CreateModifyDeleteUser extends Component {\n\n    componentDidMount() {\n        if (this.props.mode === \"new\")\n            this.enableEditing()\n\n        user.user().then((result) => {\n            this.setState({\n                ready: true,\n                loggedInUser: result\n            })\n        })\n\n    }\n\n    componentWillMount() {\n        this.setState({\n            userInfo: this.computedState(this.props.user),\n            passedUser: this.props.user\n        })\n    }\n\n\n    componentDidUpdate(oldProps) {\n        const newProps = this.props\n        if (oldProps.user !== newProps.user) {\n            this.setState({\n                passedUser: this.props.user,\n                userInfo: this.computedState(newProps.user)\n            })\n        }\n\n    }\n\n    inputLabelTab = (text) => {\n        return (\n            <div style={{ minWidth: \"90px\", textAlign: \"right\" }}>\n                {text}\n            </div>\n        )\n    }\n\n    state = {\n        mode: this.props.mode ? this.props.mode : \"view\", //View (default unless overridden), create, or edit,\n        userChanged: false,\n        disabled: true,\n        locationDisabled: true,\n        loggedInUser: null\n        //userInfo holds current computed properties (including modifications)\n        //passedUser holds the original user information\n    }\n\n    computedState(user) {\n\n        let userState = {}\n\n        if (user == null) {\n            for (let i = 0; i < userFields.length; i++) {\n                userState[userFields[i]] = null\n            }\n        } else {\n            for (let i = 0; i < userFields.length; i++) {\n                if (userFields[i] in this.props.user) {\n                    userState[userFields[i]] = this.props.user[userFields[i]]\n                } else {\n                    userState[userFields[i]] = null\n                }\n            }\n        }\n        return userState\n    }\n\n    //If this is the user, then they can change the password.\n    //Otherwise, this is an admin, who can reset a password.\n    isUser = () => {\n        return true\n    }\n\n    confirmDelete = async () => {\n        let url = `https://essd-backend-dev.azurewebsites.net/api/users/deleteUser/${this.state.passedUser.Id}`\n        //Send Delete HTTP Request\n        let deleteRequest = await fetch(url, { method: \"delete\" })\n        deleteRequest.json().then((data) => {\n            db.User.delete(this.state.passedUser.Id).then(() => {\n                message.success(\"Successfully deleted user.\")\n                this.props.refreshUsers()\n                this.back();\n            })\n        })\n            .catch((error) => {\n                message.error(\"Sorry, something went wrong.\")\n            })\n    }\n\n    adminFeatures = () => {\n        //Only show delete this is a secondary view (ie showTable_f exists)\n        if (this.props.user != null && this.props.showTable_f !== null) return (\n            <div>\n                <Divider/>\n                <Col className=\"right\">\n                    <Popconfirm placement=\"topRight\" title=\"Are you sure you want to delete this user? This action cannot be reverted.\" onConfirm={this.confirmDelete} okText=\"Delete\" cancelText=\"Cancel\">\n                        <Button type=\"danger\">Delete User</Button>\n                    </Popconfirm>\n                </Col>\n\n            </div>\n        )\n        return null\n    }\n\n    ///Todo: generate function to update state\n\n    inputChanged = (stateName, e) => {\n        let user = this.state.userInfo\n        user[stateName] = e.target.value\n        this.setState({ userInfo: user })\n        this.userInformationChanged()\n    }\n\n    handleUserTypeSelect(value) {\n        let user = this.state.userInfo\n        user[\"UserType\"] = value\n        this.setState({ userInfo: user })\n        //this.userInformationChanged()\n    }\n\n    basicFeatures = () => {\n        let basicFeatures = [\n            \"First Name\",\n            \"Last Name\",\n            \"Phone\",\n            \"Email\"\n        ]\n\n        let array = []\n\n        for (let i = 0; i < basicFeatures.length; i++) {\n            let featureName = basicFeatures[i]\n            let featureNameKey = featureName.replace(\" \", \"\")   //e.g. \"First Name\" -> user.FirstName\n            array.push(\n                <Input addonBefore={this.inputLabelTab(featureName)}\n                    value={this.state.userInfo ? this.state.userInfo[featureNameKey] : \"\"}\n                    disabled={this.state.disabled || (featureName === \"Email\" && this.state.mode === \"existing\")}\n                    key={i}\n                    onChange={(e) => { this.inputChanged(featureNameKey, e) }} />\n            )\n        }\n\n        let allUserTypeOptions = [];\n\n        switch (this.state.userInfo.UserType) {\n            case \"superadmin\":\n                allUserTypeOptions = [\n                    <Select.Option key={1} value=\"superadmin\">Super Admin</Select.Option>,\n                    <Select.Option key={2} value=\"admin\">Admin</Select.Option>,\n                    <Select.Option key={3} value=\"user\">User</Select.Option>\n                ];\n                break;\n            case \"admin\":\n                allUserTypeOptions = [\n                    <Select.Option key={2} value=\"admin\">Admin</Select.Option>,\n                    <Select.Option key={3} value=\"user\">User</Select.Option>\n                ];\n                break;\n            case \"user\":\n                allUserTypeOptions = [\n                    <Select.Option key={3} value=\"user\">User</Select.Option>\n                ];\n                break;\n            default:\n                allUserTypeOptions = [\n                    <Select.Option key={3} value=\"user\">User</Select.Option>\n                ];\n                break;\n        }\n\n        if (this.state.mode === \"new\") {\n            switch (this.state.loggedInUser.UserType) {\n                case \"superadmin\":\n                    allUserTypeOptions = [\n                        <Select.Option key={2} value=\"admin\">Admin</Select.Option>,\n                        <Select.Option key={3} value=\"user\">User</Select.Option>\n                    ];\n                    break;\n                case \"admin\":\n                    allUserTypeOptions = [\n                        <Select.Option key={3} value=\"user\">User</Select.Option>\n                    ];\n                    break;\n                default:\n                    allUserTypeOptions = [\n                        <Select.Option key={3} value=\"user\">User</Select.Option>\n                    ];\n                    break;\n            }\n        }\n\n\n        return (\n            <div>{this.state.ready && <Col>\n                <Divider />\n                <p>Basic Information</p>\n                {array}\n                <Select\n                    style={{ width: \"100%\" }}\n                    defaultValue={this.state.userInfo.UserType != null ? this.state.userInfo.UserType : \"user\"}\n                    placeholder=\"User Type\"\n                    onChange={(e) => { this.handleUserTypeSelect(e) }}\n                    disabled={this.state.loggedInUser.Id === this.state.userInfo.Id ? true : this.state.disabled}>\n                    {allUserTypeOptions}\n                </Select>\n                <Divider />\n                {/* Location */}\n                <p>Location</p>\n                <LocationSelector\n                    parentHandler={this.updateLocation}\n                    showLocation={true}\n                    initialLocation={{ Id: this.state.userInfo.LocationId, Type: this.state.userInfo.LocationType }}\n                    disabled={this.state.loggedInUser.Id === this.state.userInfo.Id ? true : this.state.disabled}\n                    maxScope={{ Type: this.state.loggedInUser.LocationType, Id: this.state.loggedInUser.LocationId }} />\n            </Col>\n            }\n            </div>\n        )\n\n    }\n\n    updateLocation = (location) => {\n        let userInfo = this.state.userInfo\n        userInfo.LocationId = location.Id\n        userInfo.LocationType = location.Type\n        this.setState({\n            userInfo: userInfo\n        })\n    }\n\n    modifyControls = () => {\n        if (this.state.disabled) return (\n            <div>\n                <Button onClick={this.enableEditing}>Edit</Button>\n            </div>\n        );\n        else return (\n            \n            <Row>\n                <Col span = {12}><Button hidden={this.state.mode === \"new\"} onClick={this.cancelEditing}>Cancel</Button></Col>\n                <Col className = \"right\" span = {12}><Button type = \"primary\" disabled={!this.state.userChanged} onClick={this.save}>Save</Button></Col>\n            </Row>\n        )\n    }\n\n    cancelEditing = () => {\n        let user = this.computedState(this.state.passedUser)\n        this.setState({\n            userInfo: user,\n            disabled: true,\n            locationDisabled: true,\n        })\n        this.userInformationChanged()\n    }\n\n    enableEditing = () => {\n        user.user().then(u => {\n            if (u.userType === \"admin\") {\n                this.setState({\n                    disabled: false,\n                    locationDisabled: false,\n                })\n            } else {\n                this.setState({\n                    disabled: false,\n                    locationDisabled: true,\n                })\n            }\n            this.userInformationChanged()\n        })\n    }\n\n    userInformationChanged = () => {\n        //Todo: error checking here for valid inputs\n        let changed = false\n        if (this.props.mode === \"new\") {\n            changed = true\n        } else {\n            for (let i = 0; i < userFields.length; i++) {\n                if (this.state.userInfo[userFields[i]] !== this.state.passedUser[userFields[i]]) {\n                    changed = true\n                    break\n                }\n            }\n        }\n        this.setState({ userChanged: changed })\n    }\n\n    save = async () => {\n        let url, successMessage, errorMessage, method = \"\"\n        let successHandler = () => { }\n        let userObject = this.state.userInfo\n\n        if (userObject.UserType == null)\n            userObject.UserType = \"user\"\n\n        if (this.state.mode === \"new\") {\n            //Create User\n            //userObject.UserType = \"user\" //hardCode for now\n            delete userObject.Id\n            url = \"https://essd-backend-dev.azurewebsites.net/api/users/register\"\n            successMessage = \"Successfully added user.\"\n            errorMessage = \"Failed to create user. Please try again later.\"\n            method = \"POST\"\n            successHandler = (result) => {\n                if (\"Id\" in result) {\n                    userObject.Id = result.Id;\n                    userObject.LocationName = result.LocationName;\n                    db.User.add(userObject).then(() => {\n                        message.success(successMessage)\n                        this.props.refreshUsers()\n                        this.back();\n                    })\n                } else {\n                    console.log('throwing an error')\n                    throw new Error(result.error)\n                }\n\n            }\n        } else {\n\n            //Update User\n            //userObject.UserType = \"user\" //hardCode for now\n            url = \"https://essd-backend-dev.azurewebsites.net/api/users/updateUser\"\n            successMessage = \"Successfully updated user.\"\n            errorMessage = \"Failed to update user. Please try again later.\"\n            method = \"PUT\"\n            successHandler = (result) => {\n                if (result.result === \"Update successful\") {\n                    if (this.state.loggedInUser.Id === userObject.Id) {\n                        db.LocalUser.put(userObject).then(() => {\n                            message.success(successMessage)\n                            this.props.refreshUsers()\n                            //this.cancelEditing()\n                            this.setState({\n                                user: userObject,\n                                disabled: true,\n                                locationDisabled: true,\n                            })\n                        })\n                    }\n                    else {\n                        db.User.put(userObject).then(() => {\n                            message.success(successMessage)\n                            this.props.refreshUsers()\n                            //this.cancelEditing()\n                            this.setState({\n                                user: userObject,\n                                disabled: true,\n                                locationDisabled: true,\n                            })\n                            this.passedUser = userObject;\n                        })\n                    }\n\n                }\n            }\n        }\n\n        let request = await fetch(url, {\n            method: method,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(userObject),\n        })\n\n        request.json().then(successHandler)\n            .catch((error) => {\n                console.log(error)\n                message.error(errorMessage)\n            })\n\n    }\n\n    back = () => {\n        //Remove any changes before executing callback\n        this.cancelEditing()\n        this.props.showTable_f()\n    }\n    /**\n     * Always render basic elements (first name, last name, etc)\n     * If current user == user viewed => allow changing password\n     * else if currentUser.type == admin || == superAdmin allow resetting password\n     * TODO: implement this when auth starts to work.\n     */\n    render() {\n        return (\n            <div>\n                {\n                    this.state.ready &&\n                    <div>\n                        {\n                            this.props.showTable_f &&\n                            <Row className=\"rowVMarginSm \">\n                                <Col>\n                                    <Button onClick={this.back} icon=\"caret-left\">Back</Button>\n                                </Col>\n                            </Row>\n                        }\n                        <Row className=\"rowVMarginSm\">\n                            <Card size = \"medium\" title = \"User Details\">\n                                {this.modifyControls()}\n                                {this.basicFeatures()}\n                                {this.adminFeatures()}\n                            </Card>\n                        </Row>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default CreateModifyDeleteUser;","import React, { Component } from 'react'\nimport CreateModifyDeleteUser from '../Users/CreateModifyDeleteUser'\nimport user from '../Services/User'\nimport { Row, Col } from 'antd'\n\nclass Account extends Component {\n\n    state = {\n        user: null\n    }\n\n    componentDidMount = () => {\n        user.user().then((u) => {\n            this.setState({\n                user: u\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.user &&\n                    <Row className=\"rowVMarginTopSm\" gutter={16}>\n                        <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                            <CreateModifyDeleteUser\n                                showTable_f={null}\n                                user={this.state.user}\n                                mode=\"existing\"\n                                refreshUsers={() => { }\n                                }\n                            />\n                        </Col>\n                    </Row>\n                }\n            </div>\n\n\n        )\n    }\n}\n\nexport default Account;","import React, { Component } from 'react'\n\nimport { Row, Col, Table, Spin, Button } from 'antd'\n\nimport CreateModifyDeleteUser from './CreateModifyDeleteUser'\n\nimport db from '../Database/database'\n\nlet dataSource = []\n\nclass User extends Component {\n\n    populateUsers = () => {\n        db.User.toArray((array) => {\n            array.forEach((element) => {\n                //Create additional properties as required\n                element.key = element.Id\n                element.name = `${element.FirstName} ${element.LastName}`\n                element.permissionLevel = element.LocationType.charAt(0).toUpperCase() + element.LocationType.slice(1)\n            })\n\n            dataSource = array.sort((a, b) => {\n                //Sort by last name, then first name\n                try {\n                    let lastNameCompare = a.LastName.localeCompare(b.LastName)\n                    if (lastNameCompare === 0) {\n                        return a.FirstName.localeCompare(b.FirstName)\n                    } else {\n                        return lastNameCompare\n                    }\n\n                } catch (e) {\n                    return -1\n                }\n            })\n            //Show Table once data is loaded\n            this.setState({\n                currentView: \"table\"\n            })\n        })\n\n\n    }\n\n    componentWillMount = () => {\n        this.populateUsers()\n    }\n\n    state = {\n        showTable: true,\n        selectedUser: null,\n        currentView: \"loading\"\n    }\n\n    columns = [{\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        defaultSortOrder: 'descend',\n        sorter: (a, b) => { return a.name.localeCompare(b.name, 'en') }\n    }, {\n        title: 'Scope',\n        dataIndex: 'permissionLevel',\n        filters: [{\n            text: 'Ward',\n            value: 'Ward',\n        }, {\n            text: 'Facility',\n            value: 'Facility',\n        }, {\n            text: 'LGA',\n            value: 'LGA',\n        }, {\n            text: 'State',\n            value: 'State',\n        }, {\n            text: 'National',\n            value: 'National',\n        }],\n        onFilter: (value, record) => record.permissionLevel === value,\n        filterMultiple: true,\n\n        key: 'permissionLevel',\n    }, {\n        title: \"Location\",\n        dataIndex: \"LocationName\",\n        key: \"LocationName\",\n        defaultSortOrder: 'descend',\n        sorter: (a, b) => { return a.LocationName.localeCompare(b.LocationName, 'en') }\n    }, {\n        title: \"Action\",\n        key: \"action\",\n        render: (text, record) => <Button onClick={() => { this.editUser(record.key) }}>View</Button>\n\n    }];\n\n    editUser = (id) => {\n        let newUser = dataSource.find(object => {\n            return object.Id === id\n        })\n\n        this.setState({\n            currentView: \"existing\",\n            selectedUser: newUser\n        })\n\n    }\n\n    showWhenCurrentViewIs = (viewType, classNames) => {\n        //Hide this class when the current view matches the view type\n        if (this.state.currentView === viewType) return classNames\n        return `${classNames} displayNone`\n    }\n\n    showHideTableClass = () => {\n        return this.state.currentView === \"table\" ? \"\" : \"displayNone\"\n    }\n\n    showHideViewClass = () => {\n        return this.state.currentView === \"existing\" ? \"\" : \"displayNone\"\n    }\n\n    showTable = () => {\n        this.setState(\n            { currentView: \"table\" }\n        )\n    }\n\n    addUser = () => {\n        this.setState({\n            currentView: \"new\"\n        })\n    }\n\n    tableHidden = () => {\n        return this.state.currentView !== \"table\"\n    }\n\n    colStyle = {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 22, offset: 1 },\n        md: { span: 18, offset: 3 },\n        lg: { span: 16, offset: 4 }\n    }\n\n    render() {\n\n        return (\n            <div>\n                {/* Data not yet loaded  */}\n                <Row className={this.showWhenCurrentViewIs(\"loading\", \"rowVMarginSm\")}>\n                    <Col {...this.colStyle}>\n                        <div className=\"spacing\" >\n                            <Spin size=\"large\" />\n                        </div>\n                    </Col>\n                </Row>\n\n                {/* Data loaded  */}\n                <div className={this.showWhenCurrentViewIs(\"table\", \"\")}>\n                    <Row className=\"rowVMarginTopSm\" gutter={16}>\n                        <Col className=\"left\" xs={{ span: 16, offset: 0 }} sm={{ span: 14, offset: 1 }} md={{ span: 10, offset: 3 }} lg={{ span: 8, offset: 4 }}>\n                        </Col>\n                        <Col className=\"right\" span={8}>\n                            <Button\n                                onClick={this.addUser}\n                                icon=\"user-add\"\n                                type=\"primary\">\n                                Add User\n                            </Button>\n                        </Col>\n                    </Row>\n                    <Row className=\"rowVMarginTopSm\">\n                        <Col {...this.colStyle}>\n                            <Table\n                                dataSource={dataSource}\n                                columns={this.columns}\n                            />\n                        </Col>\n                    </Row>\n                </div>\n\n                {/* UI to create a new user */}\n                {\n                    this.state.currentView === \"new\" &&\n                    <Row className=\"rowVMarginTopSm\" gutter={16}>\n                        <Col {...this.colStyle}>\n                            <CreateModifyDeleteUser\n                                showTable_f={this.showTable}\n                                user={null}\n                                mode=\"new\"\n                                refreshUsers={this.populateUsers}\n                            />\n                        </Col>\n                    </Row>\n                }\n\n                {/* UI to edit an existing user */}\n                {\n                    this.state.currentView === \"existing\" &&\n                    <Row className=\"rowVMarginTopSm\" gutter={16}>\n                        <Col {...this.colStyle}>\n                            <CreateModifyDeleteUser\n                                showTable_f={this.showTable}\n                                user={this.state.selectedUser}\n                                mode=\"existing\"\n                                refreshUsers={this.populateUsers}\n                            />\n\n                        </Col>\n                    </Row>\n                }\n\n            </div>\n\n        )\n    }\n}\n\nexport default User;","import React, { Component } from 'react';\n\n//antd for ui components\nimport { Card, Button, Icon, Row, Col, Timeline } from 'antd'\n\n//db\nimport db from '../Database/database'\nimport user from '../Services/User'\n\nclass Sync extends Component {\n\n    state = {\n        showProgress: false,\n        DataDownloads: []\n    }\n\n    startDownload = () => {\n        let rootURL = \"https://essd-backend-dev.azurewebsites.net/api\"\n        //let rootURL = \"http://localhost:9000/api\"\n        let downloads = [\n            {\n                //Todo: scope the user requests as per the user's roles\n                dataName: \"user\",\n                callback: (data) => {\n                    return new Promise((resolve) => {\n                        db.User.clear().then(() => {\n                            db.User.bulkAdd(data.users).then(() => {\n                                resolve(true)\n                            }).catch((e) => {\n                                console.log(e)\n                                resolve(false)\n                            })\n                        })\n                    })\n                },\n                url: `${rootURL}/users/getAllUsers/${this.state.user.Id}`\n            },\n            {\n                //Todo: Scope the location request as per the user's authorized locations\n                dataName: \"location\",\n                callback: (data) => {\n                    return new Promise((resolve) => {\n                        Promise.all([db.State.clear(), db.LGA.clear(), db.Ward.clear(), db.Facility.clear()]).then(\n                            Promise.all([\n                                db.State.bulkAdd(data.State),\n                                db.LGA.bulkAdd(data.LGA),\n                                db.Ward.bulkAdd(data.Ward),\n                                db.Facility.bulkAdd(data.Facility),\n                            ]).then(\n                                resolve(true)\n                            ).catch(\n                                resolve(false)\n                            )\n                        ).catch(\n                            resolve(false)\n                        )\n                    })\n                },\n                url: `${rootURL}/locationsHierarchy`\n            },\n            {\n                dataName: \"metric values\",\n                callback: (data) => {\n                    return new Promise((resolve) => {\n                        Promise.all([db.Data.clear()]).then(\n                            Promise.all([\n                                db.Data.bulkAdd(data.Data)\n                            ]).then(\n                                resolve(true)\n                            ).catch(\n                                resolve(false)\n                            )\n                        ).catch(\n                            resolve(false)\n                        )\n                    })\n                },\n                //TODO: Scope URL to user \n                url: `${rootURL}/data/location?state=Zamfara&lga=Anka&ward=Bagega`\n            },\n            {\n                dataName: \"metric names\",\n                callback: (data) => {\n                    return new Promise((resolve) => {\n                        Promise.all([db.Groups.clear(), db.Sets.clear(), db.Metrics.clear()]).then(\n                            Promise.all([\n                                db.Groups.bulkAdd(data.Groups),\n                                db.Sets.bulkAdd(data.Sets),\n                                db.Metrics.bulkAdd(data.Metrics),\n                            ]).then(\n                                resolve(true)\n                            ).catch(\n                                resolve(false)\n                            )\n                        ).catch(\n                            resolve(false)\n                        )\n                    })\n                },\n                url: `${rootURL}/data/hierarchy`\n            }\n        ]\n        let dl = []\n        for (let i = 0; i < downloads.length; i++) {\n            let dl_i = downloads[i]\n            dl.push(\n                <DataProgress key={i} dataName={dl_i.dataName} url={dl_i.url} callback={dl_i.callback}></DataProgress>\n            )\n        }\n\n        //Download or upload dashboard data\n        if (!this.state.downloadDashboard) {\n            let url = `${rootURL}/dashboard/updateDashboard`\n            let params = {\n                method: \"PUT\",\n                // body:JSON.stringify({\n                //     UserId: this.state.user.Id,\n                //     DashboardJson: this.state.dashboardData\n                // })\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({\n                    UserId: this.state.user.Id,\n                    DashboardJson: JSON.stringify(this.state.dashboardData)\n                })\n            }\n            let callback = (info) => {\n                return new Promise(resolve => {\n                    resolve(true)\n                })\n            }\n            dl.push(\n                <DataProgress key={dl.length} dataName=\"dashboard information\" url={url} callback={callback} params={params} />\n            )\n        } else {\n            let url = `${rootURL}/dashboard/${this.state.user.Id}`\n            let callback = (_dashboard) => {\n                return new Promise(resolve => {\n                    //The naming scheme needs to be cleaned up a bit here...\n                    let dashboard = _dashboard.dashboard\n                    db.Dashboard.clear().then(() => {\n                        if (!dashboard.hasOwnProperty(\"error\")) {\n                            let data = JSON.parse(dashboard.DashboardJson)\n                            db.Dashboard.bulkAdd(data.dashboards).then(() => {\n                                resolve(true)\n                            })\n                        } else {\n                            //User has no dashboard\n                            resolve(true)\n                        }\n                    })\n                })\n\n            }\n            dl.push(\n                <DataProgress key={dl.length} dataName=\"dashboard information\" url={url} callback={callback} />\n            )\n        }\n\n        this.setState({\n            DataDownloads: dl,\n            showProgress: true\n        })\n    }\n\n    componentDidMount() {\n        db.Dashboard.toArray().then(dashboards => {\n            if (dashboards.length === 0) {\n                user.user().then(u => {\n                    this.setState({\n                        user: u,\n                        ready: true,\n                        downloadDashboard: true\n                    })\n                })\n            } else {\n                user.user().then(u => {\n                    this.setState({\n                        user: u,\n                        ready: true,\n                        downloadDashboard: false,\n                        dashboardData: {\n                            dashboards: dashboards\n                        }\n                    })\n                })\n            }\n\n        })\n\n    }\n\n    render() {\n        return (\n            <div className=\"center\">\n                <Card className=\"rowVMarginTopSm\" >\n                    <Row className=\"rowVMarginTopSm\">\n                        <Col xs={24} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 2 }} lg={{ span: 16, offset: 4 }} xl={{ span: 16, offset: 4 }}>\n                            <p>\n                                <Icon\n                                    type=\"wifi\" />&nbsp;\n                    Please note: you must have an internet connection.\n                        </p>\n                            {\n                                this.state.ready &&\n                                <Button type=\"primary\" onClick={this.startDownload}>Start Sync</Button>\n                            }\n\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col hidden={!this.state.showProgress} xs={{ span: 22, offset: 1 }} sm={{ span: 20, offset: 2 }} md={{ span: 12, offset: 6 }} lg={{ span: 10, offset: 7 }} xl={{ span: 8, offset: 8 }}>\n                            <Timeline className=\"rowVMarginTopSm\">\n                                {this.state.DataDownloads}\n                            </Timeline>\n                        </Col>\n\n                    </Row>\n                </Card>\n            </div>\n        )\n    }\n}\n\n/**\n * Pass a callback that returns a promise that resolves to true or false\n * so the dataProgress knows if it succeeded or failed\n */\nclass DataProgress extends Component {\n\n    state = {\n        pending: true,\n        failed: false\n    }\n\n    Icon = () => {\n        if (this.state.pending === true) return this.pendingIcon\n        if (this.state.failed === true) return this.failedIcon\n        return this.completeIcon\n    }\n\n    pendingIcon = <Icon type=\"sync\" spin />\n\n    completeIcon = <Icon type=\"check-circle\" className=\"override-background\" />\n\n    failedIcon = <Icon type=\"close-circle\" />\n\n    Message = () => {\n        if (this.state.pending === true) return this.pendingMessage\n        if (this.state.failed === true) return this.failedMessage\n        return this.completeMessage\n    }\n\n    pendingMessage = `Downloading ${this.props.dataName} data`\n\n    failedMessage = `Failed to download ${this.props.dataName} data. Please try again later`\n\n    completeMessage = `Successfully updated ${this.props.dataName} data`\n\n    componentDidMount() {\n        if (this.props.params) {\n            this.get(this.props.url, this.props.callback, this.props.params)\n        } else {\n            this.get(this.props.url, this.props.callback)\n        }\n\n    }\n\n    get = async (url, callback, params) => {\n        let promise = await fetch(url, params)\n        promise.json().then(data => {\n            callback(data).then((result => {\n                if (result) {\n                    this.setState({\n                        pending: false,\n                        failed: false\n                    })\n                } else {\n                    this.setState({\n                        pending: false,\n                        failed: true\n                    })\n                }\n            }))\n        })\n    }\n\n    render() {\n        return (\n            <Timeline.Item\n                dot={this.Icon()}\n            >\n                {this.Message()}\n            </Timeline.Item>)\n    }\n}\nexport default Sync;\n","import React, { Component } from 'react';\n\nimport {  Button, Divider, Row, Col } from 'antd'\nimport LocationSelector from \"../LocationSelector/LocationSelector\"\n\n\n\n/**\n * Saves the the location selected\n * @param {parentHandler} - Function passed in by the parent that takes a LocationObject with props {Id, Name, Type} and updates the parent UI\n * @param {initialLocation}\n */\n\nclass LocationWrapper extends Component {\n\n    state = {\n        location: this.props.initialLocation\n    }\n    componnentDidMount = () => {\n        this.setState({\n            location: this.props.initialLocation\n        });\n    }\n    notifyParent = (save) => {\n        if (this.props.parentHandler !== undefined && this.props.parentHandler !== null) {\n            this.props.parentHandler(this.state.location, save);\n        }\n    }\n    updateLocation = (location) => {\n        this.setState({ location: location })\n    }\n    saveLocation = () => {\n        this.notifyParent(true);\n    }\n    cancelLocation = () => {\n        this.notifyParent(false);\n    }\n\n    render() {\n        return (\n            <div>\n                <LocationSelector parentHandler={this.updateLocation} showLocation={false} initialLocation={\n                    {\n                        Id: \"1215\",\n                        Type: \"Facility\"\n                    }\n                }//this.state.location}>\n                ></LocationSelector>\n                <Divider />\n                <Row>\n                    <Col span = {12}> <Button type = \"primary\" onClick={this.saveLocation}>Add</Button></Col>\n                    <Col className = \"right\" span = {12}> <Button onClick={this.cancelLocation}>Cancel</Button></Col>\n                </Row>\n               \n                \n\n            </div>\n        )\n    }\n}\nexport default LocationWrapper;\n","import React, { Component } from 'react';\nimport { Button, List, Card, Row, Col, Divider, Icon, message } from 'antd'\n\nimport './Analysis.css';\nimport LocationWrapper from \"../Analysis/LocationWrapper\"\nimport MetricSelector from \"../MetricSelector/MetricSelector\"\nimport Visualizer from '../Visualizer/Visualizer';\nimport db from '../Database/database';\nimport RangeSelector from '../RangeSelector/RangeSelector'\n\n// var initialMetric = {\n//     GroupValue: \"1191|Facility Attendance|Group\",\n//     SetValue: \"-3-1191|All Facility Attendance (Distribution)|Group\",\n//     MetricValue: \"\"\n// };\nclass Analysis extends Component {\n\n    state = {\n        metricData: {\n            GroupValue: \"1191|Facility Attendance|Group\",\n            SetValue: \"-3-1191|All Facility Attendance (Distribution)|Group\",\n            MetricValue: \"\"\n        },\n        initLoading: false,\n        loading: false,\n        locationData: {\n        },//locationData,\n        showTable: true,\n        selectedUser: null,\n        dataLoaded: false,\n        currentView: \"table\",\n        selectedLocation: null,\n        addingLocation: false,\n        Dates: { StartDate: new Date(\"2015-01-01T00:00:00.000Z\"), EndDate: new Date(\"2019-01-01T00:00:00.000Z\") },\n        arr: null,\n        dataForSingleLocation: [],\n        dataForAllLocations: [],\n        showGraph: false,\n        graphType: \"Group\",\n        data: null\n    }\n    generateGraph = () => {\n        var locationData = [];\n        //convert to array\n        for (var key in this.state.locationData) {\n            locationData.push(this.state.locationData[key]);\n        }\n        if (this.state.metricData.Type === \"Metric\") {\n            this.createMetricGraph(locationData);\n\n        } else if (this.state.metricData.Type === \"Set\") {\n            this.createSetGraph(locationData);\n\n        } else if (this.state.metricData.Type === \"Group\") {\n\n        }\n\n        this.setState({\n            currentView: \"graph\"\n        })\n    }\n    formatDate = (date) => {\n        //Format into YYYY-MM-DDT:00:00:00.000Z\n        let dateString = `${date.getUTCFullYear()}-${(\"0\" + (date.getUTCMonth() + 1)).slice(-2)}-${(\"0\" + date.getUTCDate()).slice(-2)}T00:00:00.000Z`\n        return dateString\n    }\n    createMetricGraph = (locationData) => {\n        var dataForAllLocations = [];\n\n        let context = {\n            dataForAllLocations: dataForAllLocations\n        };\n\n        this.forEachPromise(locationData, this.getDataPromiseByLocation, context).then(() => {\n            console.log(this.state.metricData.Name);\n            this.setState({\n                showGraph: true,\n                currentView: \"graph\",\n                graphType: \"Set\",\n                data: {\n                    name: this.state.metricData.Name,\n                    data: context.dataForAllLocations,\n                }\n            });\n        });\n    }\n    createSetGraph = (locationData) => {\n        var dataForAllLocations = [];\n        var legend = [];\n\n        this.getMetricsPromise(this.state.metricData.Id).then((metrics) => {\n            let context = {\n                dataForAllLocations: dataForAllLocations,\n                metrics: metrics,\n                locations: legend\n            };\n            this.forEachPromise(locationData, this.getLocationPromise, context).then(() => {\n                console.log(context.locations);\n                console.log(context.dataForAllLocations);\n                this.setState({\n                    showGraph: true,\n                    currentView: \"graph\",\n                    graphType: \"Group\",\n                    data: {\n                        data: context.dataForAllLocations,\n                        legendTitles: context.locations\n                    }\n                });\n                console.log(\"donezo\");\n            })\n        })\n\n    }\n\n    forEachPromise = (items, fn, context) => {\n        return items.reduce(function (promise, item) {\n            return promise.then(function () {\n                return fn(item, context);\n            });\n        }, Promise.resolve());\n    }\n\n    getLocationPromise = (location, context) => {\n        return new Promise((resolve, reject) => {\n            let context2 = {\n                location: location,\n                dataForAllLocations: context.dataForAllLocations,\n                dataForSingleLocation: []\n            }\n            this.forEachPromise(context.metrics, this.getDataPromise, context2).then(() => {\n                context.dataForAllLocations.push(context2.dataForSingleLocation);\n                context.locations.push(context2.location.Name)\n            }).then(() => {\n                resolve(true);\n            });\n        })\n    }\n    getMetricsPromise = (setId) => {\n        return db.Metrics.where(\"parentId\").equalsIgnoreCase(setId).toArray();\n    }\n    getDataPromise = (metric, context) => {\n        return new Promise((resolve, reject) => {\n            db.Data.where(\n                [\"FacilityId\", \"MetricId\", 'Time']\n            ).between(\n                [context.location.Id, metric.Id, this.formatDate(this.state.Dates.StartDate)],\n                [context.location.Id, metric.Id, this.formatDate(this.state.Dates.EndDate)],\n                true,\n                true\n            ).toArray().then((arr) => {\n                let sum = 0;\n                arr.forEach((point) => {\n                    sum += parseInt(point.Value);\n                })\n                context.dataForSingleLocation.push({\n                    Value: sum,\n                    Metric: metric.Name\n                });\n                console.log(\"Adding Data from current Metric: \" + metric.Id + \", value: \" + sum);\n                resolve(true);\n            })\n        })\n    }\n    getDataPromiseByLocation = (location, context) => {\n        return new Promise((resolve, reject) => {\n            db.Data.where(\n                [\"FacilityId\", \"MetricId\", 'Time']\n            ).between(\n                [location.Id, this.state.metricData.Id, this.formatDate(this.state.Dates.StartDate)],\n                [location.Id, this.state.metricData.Id, this.formatDate(this.state.Dates.EndDate)],\n                true,\n                true\n            ).toArray().then((arr) => {\n                let sum = 0;\n                arr.forEach((point) => {\n                    sum += parseInt(point.Value);\n                })\n                context.dataForAllLocations.push({\n                    Value: sum,\n                    Metric: location.Name\n                });\n\n                console.log(\"Adding Data from current Location: \" + location.Id + \", value: \" + sum);\n                resolve(true);\n            })\n\n        })\n    }\n    saveGraph = () => {\n        //Get Number of Dashboards Currently\n        db.Dashboard.toCollection().last().then(object => {\n            let key = 0\n            if (object) {\n                key = object.Id + 1\n            }\n            //Prepare Save Object\n            let newGraph = {\n                Id: key,\n                Title: \"Compare - \" + this.state.metricData.Name,\n                Locations: this.state.locationData,\n                Dates: this.state.Dates,\n                Data: this.state.data,\n                MetricData: this.state.metricData,\n                Compare: true,\n                GraphType: this.state.graphType\n            }\n\n            db.Dashboard.put(newGraph).then(() => {\n                console.log(newGraph);\n                message.success(\"Successfully saved to dashboard.\")\n            })\n        })\n    }\n\n    updateRawData = (rawData) => {\n        this.setState({\n            RawData: rawData\n        })\n    }\n\n    updateData = (data) => {\n        this.setState({ metricData: data })\n    }\n    updateLocation = (location, save) => {\n        if (save) {\n            let tempData = this.state.locationData;\n            if (!this.state.addingLocation) {\n                delete tempData[this.state.selectedLocation.Type + \"-\" + this.state.selectedLocation.Id];\n            }\n            tempData[location.Type + \"-\" + location.Id] = location;\n            this.setState({ selectedLocation: location });\n\n            message.success('Location Added');\n            this.setState({ locationData: tempData });\n        } else {\n            // message.warning('Location Not Saved');\n        }\n        this.setState({\n            currentView: \"table\"\n        })\n    }\n    addLocation = () => {\n        this.setState({\n            addingLocation: true,\n            currentView: \"existing\",\n            selectedLocation: null\n        })\n    }\n    deleteLocation = (location) => {\n        let locationData = this.state.locationData;\n        delete locationData[location.Type + \"-\" + location.Id]; //might have to edit\n        this.setState({\n            locationData: locationData,\n            selectedLocation: null,\n            currentView: \"table\"\n        });\n\n        message.success(\"Location Deleted\");\n    }\n    editLocation = (location) => {\n        this.setState({\n            addingLocation: false,\n            selectedLocation: location,\n            currentView: \"existing\"\n        })\n\n    }\n    showTable = () => {\n        this.setState(\n            { currentView: \"table\" }\n        )\n    }\n    showHideTableClass = () => {\n        return this.state.currentView === \"table\" ? \"\" : \"displayNone\"\n    }\n\n    updateDates =(dates)=>{\n        this.setState({Dates: dates});\n    }\n    render() {\n\n        return (\n            <div>\n                {\n                    this.state.currentView === \"table\" &&\n                    <div className=\"center\">\n                    \n                        <Row className=\"rowVMarginSm rowVMarginTopSm\" gutter={16}>\n                            <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                                <Card className=\"left\" size=\"medium\" title=\"Analyze Data\">\n                                    <h4>Select Data</h4>\n                                    <MetricSelector parentHandler={this.updateData}\n                                        initialData={this.state.metricData}\n                                    ></MetricSelector>\n                                    <Divider/>\n                                    <h4>Select Dates</h4>\n                                    <RangeSelector\n                                        parentHandler={this.updateDates}\n                                        initialData={\n                                            {\n                                                Dates: this.state.Dates\n                                            }\n                                        } />\n                                    <Divider/>\n                                    <h4>Select Locations</h4>\n                                    <div className=\"center\" >\n                                        <Button block onClick={this.addLocation}>Add Location</Button>\n                                    </div>\n                                    {this.state.locationData &&\n                                        <List\n                                            itemLayout=\"horizontal\"\n                                            size=\"large\"\n                                            pagination={{\n                                                onChange: (page) => {\n                                                    console.log(page);\n                                                },\n                                                pageSize: 4,\n                                            }}\n                                            dataSource={Object.values(this.state.locationData)}\n                                            renderItem={item => (\n                                                <List.Item\n                                                    key={item.facility}\n                                                    actions={[\n                                                        <Button onClick={() => { this.editLocation(item) }} style={{ marginLeft: 8 }}>\n                                                            Edit <Icon type=\"edit\" />\n                                                        </Button>,\n                                                        <Button onClick={() => { this.deleteLocation(item) }} style={{ marginLeft: 8 }}>\n                                                            Delete <Icon type=\"delete\" />\n                                                        </Button>\n                                                    ]}>\n                                                    <List.Item.Meta\n                                                        title={<a href=\"https://ant.design\">{item.Name}</a>}\n                                                        description={\n                                                            \"Location Type: \" + item.Type\n                                                        }\n                                                    />\n                                                </List.Item>\n                                            )}\n                                        />\n                                    }\n                                    <Divider/>\n                                    <Button type=\"primary\" block onClick={this.generateGraph}>Generate Graph</Button>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </div>\n                }\n\n                {this.state.currentView !== \"existing\" ?\n                    null :\n                    <div className=\"\">\n                        <Row className={``} gutter={16}>\n                            <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                                <Card className=\"left\" size=\"medium\" title=\"Select Location\">\n                                    <LocationWrapper\n                                        parentHandler={this.updateLocation} initialLocation={this.state.selectedLocation}\n                                    />\n                                </Card>\n                            </Col>\n                        </Row>\n\n                    </div>\n                }\n                {this.state.currentView !== \"graph\" ?\n                    null :\n                    <div className=\"\">\n\n                        <Card className=\"left\" size=\"medium\" title=\"Graph\">\n                            <Button onClick={this.showTable}>\n                                Back\n                            </Button>\n                            <Divider />\n                            <Button onClick={this.saveGraph}>\n                                Save Graph <Icon type=\"save\" />\n                            </Button>\n\n                            <Visualizer\n                                type={this.state.graphType}\n                                show={this.state.showGraph}\n                                data={this.state.data}\n                            />\n                        </Card>\n\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Analysis;\n","import React, { Component } from 'react';\nimport { Row, Col, Table, Card, Alert } from 'antd'\nimport LocationSelector from '../LocationSelector/LocationSelector';\nimport db from '../Database/database'\n\nconst columns = [{\n    title: 'Location',\n    dataIndex: 'Name',\n    key: 'Location',\n    defaultSortOrder: 'ascend',\n    sorter: (a, b) => { return a.Name.localeCompare(b.Name, 'en') }\n}, {\n    title: 'Data Points',\n    dataIndex: 'MetricsReportedInLastYear',\n    key: 'Reports',\n    sorter: (a, b) => { return a.MetricsReportedInLastYear - b.MetricsReportedInLastYear }\n}, {\n    title: 'Percent',\n    dataIndex: 'Score',\n    key: 'Score',\n    sorter: (a, b) => { return a.MetricsReportedInLastYear - b.MetricsReportedInLastYear }\n}];\n\n\nclass DataQuality extends Component {\n\n    state = {\n        ready: false\n    }\n\n    setLocation = (locationData) => {\n        this.setState({ location: locationData })\n        if (locationData.Type === \"Ward\") this.getQualityOfData(locationData.Id)\n    }\n\n    getQualityOfData = (id) => {\n        db.Facility.where({\n            parentId: id\n        }).toArray().then(arr => {\n            const divisor = 512 * 12\n            arr.forEach(el => {\n                el.Score = `${(el.MetricsReportedInLastYear / divisor * 100).toFixed(0)}%`\n                el.key = el.Id\n            })\n            this.setState({\n                data: arr,\n                ready: true\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Alert message=\"This tool reports the amount of data reported in the last year by each facility in a given ward. Use this to identify the facilities that need the most support in the monthly data collection process.\" banner closable />\n\n                <Row className=\"rowVMarginTopSm\" gutter={16}>\n                    <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                        <Card  size=\"medium\" title=\"Select Ward\">\n                            <LocationSelector\n                                parentHandler={this.setLocation}\n                                initialLocation={{\n                                    Type: \"Ward\",\n                                    Id: \"386\"\n                                }}\n                            />\n                        </Card>\n                    </Col>\n                </Row>\n                <Row className=\"rowVMarginTopSm\" gutter={16}>\n                    <Col xs={{ span: 24, offset: 0 }} sm={{ span: 22, offset: 1 }} md={{ span: 18, offset: 3 }} lg={{ span: 16, offset: 4 }}>\n                        {this.state.ready &&\n                            <Table dataSource={this.state.data} columns={columns}></Table>\n                        }\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default DataQuality","import React, { Component } from 'react';\n\n//Routing\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\"\n\n//antd for ui components\nimport { Drawer, Icon, Layout, Menu } from 'antd'\n\n//Nav Bar\nimport NavigationMenu from './NavigationMenu/NavigationMenu'\n\n//pages\nimport Dashboard from './Dashboard/Dashboard'\nimport SampleHome from './SampleHome/SampleHome'\nimport Account from './Account/Account'\nimport User from './Users/Users'\nimport Sync from './Sync/Sync'\nimport Analysis from './Analysis/Analysis'\nimport DataQuality from './DataQuality/DataQuality'\n\nimport userService from './Services/User'\n\nimport './App.css';\n\nconst {\n\tHeader, Footer, Content,\n} = Layout;\n\nconst pathNamesAndTitles = {\n\t\"/\": \"Dashboard\",\n\t\"/account\": \"Account\",\n\t\"/dashboard\": \"Dashboard\",\n\t\"/analysis\": \"Analysis\",\n\t\"/users\": \"Users\",\n\t\"/sync\": \"Synchronize Data\",\n\t\"/health\": \"Data Health\"\n}\n\nclass App extends Component {\n\n\tgetTitle = () => {\n\t\tlet pathName = window.location.pathname\n\t\tif (pathName in pathNamesAndTitles) return pathNamesAndTitles[pathName]\n\t\treturn \"Hmm...this page has no title\"\n\t}\n\n\tstate = {\n\t\tdrawerOpen: false,\n\t\tuser: null\n\t}\n\n\topenDrawer = () => {\n\t\tthis.setState({\n\t\t\tdrawerOpen: true,\n\t\t})\n\t}\n\n\tcloseDrawer = () => {\n\t\tthis.setState({\n\t\t\tdrawerOpen: false,\n\t\t})\n\t}\n\n\tcomponentWillMount() {\n\t\tuserService.user().then((userObj) => {\n\t\t\tthis.setState({\n\t\t\t\tuser: userObj\n\t\t\t})\n\t\t});\n\t}\n\n\tupdateDrawer = () => {\n\t\treturn userService.user().then((result) => {\n\t\t\tthis.setState({\n\t\t\t\tuser: result\n\t\t\t})\n\t\t});\n\t}\n\n\tlogout = async () => {\n\t\tthis.setState({\n\t\t\tuser: null\n\t\t});\n\t\tawait userService.logout();\n\t}\n\n\trender() {\n\t\t\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<Layout>\n\t\t\t\t\t{this.state.user == null ? \"\" :\n\t\t\t\t\t\t<Drawer\n\t\t\t\t\t\t\ttitle=\"Menu\"\n\t\t\t\t\t\t\tplacement=\"left\"\n\t\t\t\t\t\t\tclosable={true}\n\t\t\t\t\t\t\tonClose={this.closeDrawer}\n\t\t\t\t\t\t\tvisible={this.state.drawerOpen}>\n\t\t\t\t\t\t\t<Menu\n\t\t\t\t\t\t\t\tonClick={this.closeDrawer}>\n\t\t\t\t\t\t\t\t<Menu.Item key=\"2\">\n\t\t\t\t\t\t\t\t\t<Link to=\"/dashboard\">\n\t\t\t\t\t\t\t\t\t\t<Icon type=\"area-chart\" />Dashboard\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t<Menu.Item key=\"3\">\n\t\t\t\t\t\t\t\t\t<Link to=\"/analysis\">\n\t\t\t\t\t\t\t\t\t\t<Icon type=\"stock\" />Analysis\n\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t<Menu.Item key=\"4\">\n\t\t\t\t\t\t\t\t\t<Link to=\"/health\">\n\t\t\t\t\t\t\t\t\t\t<Icon type=\"heart\" />Data Health\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t<Menu.Item key=\"5\">\n\t\t\t\t\t\t\t\t\t<Link to=\"/account\">\n\t\t\t\t\t\t\t\t\t\t<Icon type=\"user\" />Account\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.state.user !== null && this.state.user.UserType !== \"admin\" ? \"\" :\n\t\t\t\t\t\t\t\t\t\t<Menu.Item key=\"6\">\n\t\t\t\t\t\t\t\t\t\t\t<Link to=\"/users\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Icon type=\"team\" />Users\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t<Menu.Item key=\"7\">\n\t\t\t\t\t\t\t\t\t<Link to=\"/sync\">\n\t\t\t\t\t\t\t\t\t\t<Icon type=\"sync\" />Synchronize Data\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t{this.state.user == null ? \"\" :\n\t\t\t\t\t\t\t\t\t<Menu.Item key=\"8\" onClick={this.logout}>\n\t\t\t\t\t\t\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t\t\t\t\t\t\t<Icon type=\"poweroff\" />Logout\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Menu>\n\t\t\t\t\t\t</Drawer>\n\t\t\t\t\t}\n\t\t\t\t\t<Header style={{ padding: 0 }}>\n\t\t\t\t\t\t<NavigationMenu\n\t\t\t\t\t\t\tdrawerOpen={this.state.drawerOpen}\n\t\t\t\t\t\t\topenDrawer_f={this.openDrawer}\n\t\t\t\t\t\t\ttitle={this.getTitle()}>\n\t\t\t\t\t\t</NavigationMenu>\n\t\t\t\t\t</Header>\n\t\t\t\t\t<Content className=\"min-height-wrapper gutterOverflowMask\">\n\t\t\t\t\t\t<Route exact path=\"/\" render={(props) => <SampleHome {...props} updateDrawer={this.updateDrawer} />}/>\n\t\t\t\t\t\t<Route path=\"/dashboard\" component={Dashboard} />\n\t\t\t\t\t\t<Route path=\"/analysis\" component={Analysis} />\n\t\t\t\t\t\t<Route path=\"/account\" component={Account} />\n\t\t\t\t\t\t<Route path=\"/users\" component={User} />\n\t\t\t\t\t\t<Route path=\"/sync\" component={Sync} />\n\t\t\t\t\t\t<Route path=\"/health\" component={DataQuality} />\n\t\t\t\t\t</Content>\n\t\t\t\t\t<Footer>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tESSD is an <a href = \"https://github.com/Epidemic-Surveillance-System-Dashboard/\" target = \"_blank\" rel=\"noopener noreferrer\">open source capstone project</a> by Aayush Bahendwar, Jackie Ngo, Laban Lin, and Patrick Lee.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tIt is built with components by \n\t\t\t\t\t\t\t<a href = \"https://ant.design/\" target = \"_blank\" rel=\"noopener noreferrer\"> Ant Financial </a>\n\t\t\t\t\t\t\tand powered by \n\t\t\t\t\t\t\t<a href = \"https://reactjs.org/\" target = \"_blank\" rel=\"noopener noreferrer\"> React</a>.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</Footer>\n\t\t\t\t</Layout>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nserviceWorker.register();\n"],"sourceRoot":""}